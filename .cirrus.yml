env:
  CIRRUS_VAULT_URL: https://vault.sonar.build:8200
  CIRRUS_VAULT_AUTH_PATH: jwt-cirrusci
  CIRRUS_VAULT_ROLE: cirrusci-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}

  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.url]
  ARTIFACTORY_PRIVATE_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PRIVATE_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_DEPLOY_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer
  ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
  #Possible values for ARTIFACTORY_DEPLOY_REPO: sonarsource-private-qa, sonarsource-public-qa
  ARTIFACTORY_DEPLOY_REPO: sonarsource-public-qa
  ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  # Use bash (instead of sh on linux or cmd.exe on windows)
  CIRRUS_SHELL: bash

container_definition: &CONTAINER_DEFINITION
  image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j17-latest
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  region: eu-central-1
  namespace: default

qa_container_definition: &QA_CONTAINER_DEFINITION
  image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j17-latest
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  region: eu-central-1
  namespace: default

win_vm_definition: &WINDOWS_VM_DEFINITION
  ec2_instance:
    experimental: true # see https://github.com/cirruslabs/cirrus-ci-docs/issues/1051
    image: base-windows-jdk17-v*
    platform: windows
    region: eu-central-1
    type: c5.2xlarge
    use_ssd: true

build_container_definition: &BUILD_CONTAINER_DEFINITION
  eks_container:
    dockerfile: .cirrus/python-env.Dockerfile
    docker_arguments:
      CIRRUS_AWS_ACCOUNT: ${CIRRUS_AWS_ACCOUNT}
    cluster_name: ${CIRRUS_CLUSTER_NAME}
    builder_role: cirrus-builder
    builder_image: docker-builder-v*
    builder_instance_type: t3.small
    region: eu-central-1
    namespace: default
    cpu: 2
    memory: 4G

only_sonarsource_qa: &ONLY_SONARSOURCE_QA
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == 'master' || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BUILD_SOURCE == 'api'  || $CIRRUS_BRANCH =~ "dogfood-on-.*")

orchestrator_cache_definition: &ORCHESTRATOR_CACHE_DEFINITION
  set_orchestrator_home_script: |

    # Check if SQ_VERSION exists and create an intermediary variable
    if [ -n "$SQ_VERSION" ]; then
        TASK_NAME_WITH_VERSION="${CIRRUS_TASK_NAME}-${SQ_VERSION}"
    else
        TASK_NAME_WITH_VERSION="${CIRRUS_TASK_NAME}"
    fi

    echo "CURRENT_MONTH=$(date +"%B")" >> $CIRRUS_ENV
    echo "ORCHESTRATOR_HOME=${CIRRUS_WORKING_DIR}/orchestrator/${TASK_NAME_WITH_VERSION}/${CURRENT_MONTH}" >> $CIRRUS_ENV
    echo "TASK_NAME_WITH_VERSION=${TASK_NAME_WITH_VERSION}" >> $CIRRUS_ENV
  mkdir_orchestrator_home_script: |
    echo "Create dir ${ORCHESTRATOR_HOME} if needed"
    mkdir -p ${ORCHESTRATOR_HOME}
  orchestrator_cache:
    folder: ${ORCHESTRATOR_HOME}
    fingerprint_script: echo ${TASK_NAME_WITH_VERSION}-${CURRENT_MONTH}
    reupload_on_changes: "true"

build_task:
  <<: *BUILD_CONTAINER_DEFINITION
  eks_container:
    cpu: 4

  <<: *ONLY_SONARSOURCE_QA
  env:
    # analysis on next
    SONAR_TOKEN: dummy-value
    SONAR_HOST_URL: dummy-value
    #allow deployment of pull request artifacts to repox
    DEPLOY_PULL_REQUEST: true
    CIRRUS_CLONE_DEPTH: 50
    SIGN_KEY: VAULT[development/kv/data/sign data.key]
    PGP_PASSPHRASE: VAULT[development/kv/data/sign data.passphrase]
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  build_script:
    - source cirrus-env BUILD
    - regular_mvn_build_deploy_analyze -DskipTests=true -Dsonar.skip=true -P-typeshed_serializer
    - ./check-license-compliance.sh
  cleanup_before_cache_script: cleanup_maven_repository

test_analyze_task:
  depends_on:
    - build
  <<: *BUILD_CONTAINER_DEFINITION
  eks_container:
    cpu: 4
    memory: 4G
  <<: *ONLY_SONARSOURCE_QA
  env:
    # analysis on next
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
    SONAR_HOST_URL: https://next.sonarqube.com/sonarqube
    #allow deployment of pull request artifacts to repox
    DEPLOY_PULL_REQUEST: true
    CIRRUS_CLONE_DEPTH: 50
    SIGN_KEY: VAULT[development/kv/data/sign data.key]
    PGP_PASSPHRASE: VAULT[development/kv/data/sign data.passphrase]
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  submodules_script:
    - git submodule update --init --jobs 4
    - cd python-frontend/typeshed_serializer/resources/python-type-stubs
    - git sparse-checkout set stubs/sklearn
    - git checkout
  analyze_script:
    - source cirrus-env BUILD
    - PULL_REQUEST_SHA=$GIT_SHA1 regular_mvn_build_deploy_analyze -DfailStubGenerationFast=true -P-deploy-sonarsource,-release,-sign -Dmaven.deploy.skip=true -Dskip.its=true -Dsonar.analysisCache.enabled=true
  cleanup_before_cache_script: cleanup_maven_repository

build_win_task:
  <<: *WINDOWS_VM_DEFINITION
  <<: *ONLY_SONARSOURCE_QA
  maven_cache:
    # windows cache is buggy if using ${CIRRUS_WORKING_DIR}
    # Additionally "~" seems to resolve differently in the context of the cache and the context of the build_script below
    folder: C:/.m2/repository
  git_script:
    - git config --global core.autocrlf input
    - git submodule update --init --jobs 4
    - cd python-frontend/typeshed_serializer/resources/python-type-stubs
    - git sparse-checkout set stubs/sklearn
    - git checkout
  build_script:
    - source cirrus-env CI
    - unset SONARSOURCE_QA
    - mvn.cmd package -Dmaven.repo.local=C:/.m2/repository -DskipTypeshed=true -DfailStubGenerationFast=true

ws_scan_task:
  depends_on:
    - build
  <<: *BUILD_CONTAINER_DEFINITION

  # run only on master and long-term branches
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && ($CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*")
  env:
    WS_APIKEY: VAULT[development/kv/data/mend data.apikey]
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  whitesource_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - mvn clean install -DskipTests -DskipTypeshed -Denforcer.skip=true -Dskip.its=true
    - source ws_scan.sh
  allow_failures: "true"
  always:
    ws_artifacts:
      path: "whitesource/**/*"
 
plugin_qa_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  eks_container:
    <<: *QA_CONTAINER_DEFINITION
    cpu: 6
    memory: 8G
  env:
    CIRRUS_CLONE_DEPTH: 10
    SONARSOURCE_QA: true
    matrix:
      - SQ_VERSION: LATEST_RELEASE[10.6]
      - SQ_VERSION: DEV
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  <<: *ORCHESTRATOR_CACHE_DEFINITION
  qa_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - cd its/plugin
    - mvn verify -Dsonar.runtimeVersion=${SQ_VERSION} -Dmaven.test.redirectTestOutputToFile=false -B -e -V -Djunit.jupiter.execution.parallel.config.dynamic.factor=1
  cleanup_before_cache_script: cleanup_maven_repository
  cleanup_before_orchestrator_cache_script: bash .cirrus/clean-orchestrator-cache.sh


ruling_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  eks_container:
    <<: *QA_CONTAINER_DEFINITION
    cpu: 16
    memory: 32G
  env:
    CIRRUS_CLONE_DEPTH: 10
    SONARSOURCE_QA: true
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  <<: *ORCHESTRATOR_CACHE_DEFINITION
  submodules_script:
    - git submodule update --init --jobs 4
  ruling_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - cd its/ruling
    - mvn verify -Dsonar.runtimeVersion=LATEST_RELEASE -Dmaven.test.redirectTestOutputToFile=false -B -e -V -Dtest=PythonRulingTest -Djunit.jupiter.execution.parallel.config.dynamic.factor=1
  cleanup_before_cache_script: cleanup_maven_repository
  cleanup_before_orchestrator_cache_script: bash .cirrus/clean-orchestrator-cache.sh

pr_analysis_qa_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  eks_container:
    <<: *QA_CONTAINER_DEFINITION
    cpu: 4
    memory: 8G
  env:
    GITHUB_TOKEN: VAULT[development/github/token/licenses-ro token]
    CIRRUS_CLONE_DEPTH: 10
    SONARSOURCE_QA: true
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  <<: *ORCHESTRATOR_CACHE_DEFINITION
  qa_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - cd its/ruling
    - mvn verify -Dsonar.runtimeVersion=LATEST_RELEASE -Dmaven.test.redirectTestOutputToFile=false -B -e -V -Dtest=PythonPrAnalysisTest
  cleanup_before_cache_script: cleanup_maven_repository
  cleanup_before_orchestrator_cache_script: bash .cirrus/clean-orchestrator-cache.sh

promote_task:
  depends_on:
    - test_analyze
    - ruling
    - plugin_qa
    - ws_scan
    - pr_analysis_qa
  <<: *ONLY_SONARSOURCE_QA
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 1
    memory: 1G
  env:
    #promotion cloud function
    ARTIFACTORY_PROMOTE_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promoter access_token]    
    GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promotion token]
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  script: cirrus_promote_maven
  cleanup_before_cache_script: cleanup_maven_repository

