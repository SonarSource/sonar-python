from typing import Any
from .module import Module

class Threshold(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class ReLU(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class RReLU(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class Hardtanh(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class ReLU6(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class Sigmoid(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class Hardsigmoid(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class Tanh(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class SiLU(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class Mish(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class Hardswish(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class ELU(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class CELU(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class SELU(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class GLU(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class GELU(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class Hardshrink(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class LeakyReLU(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class LogSigmoid(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class Softplus(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class Softshrink(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class MultiheadAttention(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class PReLU(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class Softsign(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class Tanhshrink(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class Softmin(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class Softmax(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class Softmax2d(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class LogSoftmax(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...