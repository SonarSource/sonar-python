from typing import Any
from .module import Module

class CircularPad1d(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class CircularPad2d(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class CircularPad3d(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class ConstantPad1d(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class ConstantPad2d(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class ConstantPad3d(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class ReflectionPad1d(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class ReflectionPad2d(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class ReflectionPad3d(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class ReplicationPad1d(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class ReplicationPad2d(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class ReplicationPad3d(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class ZeroPad1d(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class ZeroPad2d(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class ZeroPad3d(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...