from typing import Any
from .module import Module

class L1Loss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class NLLLoss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class NLLLoss2d(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class PoissonNLLLoss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class GaussianNLLLoss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class KLDivLoss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class MSELoss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class BCELoss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class BCEWithLogitsLoss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class HingeEmbeddingLoss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class MultiLabelMarginLoss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class SmoothL1Loss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class HuberLoss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class SoftMarginLoss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class CrossEntropyLoss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class MultiLabelSoftMarginLoss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class CosineEmbeddingLoss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class MarginRankingLoss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class MultiMarginLoss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class TripletMarginLoss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class TripletMarginWithDistanceLoss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...

class CTCLoss(Module):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, *args, **kwargs) -> Any: ...