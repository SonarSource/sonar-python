from SonarPythonAnalyzerFakeStub import CustomStubBase
from typing import Any, Optional


class BaseClient(CustomStubBase):
    def invoke(self, FunctionName: str, InvocationType: str, Payload: str) -> Any: ...

    def list_objects_v2(self, Bucket: str,
                        Delimiter: Optional[str] = ...,
                        EncodingType: Optional[Any] = ...,
                        MaxKeys: Optional[int] = ...,
                        Prefix: Optional[str] = ...,
                        ContinuationToken: Optional[str] = ...,
                        FetchOwner: Optional[bool] = ...,
                        StartAfter: Optional[str] = ...,
                        RequestPayer: Optional[Any] = ...,
                        ExpectedBucketOwner: Optional[str] = ...,
                        OptionalObjectAttributes: Optional[list[Any]] = ...) -> Any: ...

    def scan(self, TableName: str,
             IndexName: str = ...,
             AttributesToGet: list[str] = ...,
             Limit: int = ...,
             Select: str = ...,
             ScanFilter: Any = ...,
             ConditionalOperator: str = ...,
             ExclusiveStartKey: Any = ...,
             ReturnConsumedCapacity: str = ...,
             TotalSegments: int = ...,
             Segment: int = ...,
             ProjectionExpression: str = ...,
             FilterExpression: str = ...,
             ExpressionAttributeNames: Any = ...,
             ExpressionAttributeValues: Any = ...,
             ConsistentRead: bool = ...) -> Any: ...

    def describe_instances(self, *args, **kwargs) -> Any: ...

    def describe_instance_status(self, *args, **kwargs) -> Any: ...

    def describe_volumes(self, *args, **kwargs) -> Any: ...

    def describe_snapshots(self, *args, **kwargs) -> Any: ...

    def describe_images(self, *args, **kwargs) -> Any: ...

    def describe_vpcs(self, *args, **kwargs) -> Any: ...

    def describe_subnets(self, *args, **kwargs) -> Any: ...

    def describe_nat_gateways(self, *args, **kwargs) -> Any: ...

    def describe_key_pairs(self, *args, **kwargs) -> Any: ...

    def get_password_data(self, *args, **kwargs) -> Any: ...

    def head_bucket(self, *args, **kwargs) -> Any: ...

    def head_object(self, *args, **kwargs) -> Any: ...

    def describe_db_instances(self, *args, **kwargs) -> Any: ...

    def describe_db_clusters(self, *args, **kwargs) -> Any: ...

    def describe_db_snapshots(self, *args, **kwargs) -> Any: ...

    def describe_table(self, *args, **kwargs) -> Any: ...

    def describe_services(self, *args, **kwargs) -> Any: ...

    def describe_tasks(self, *args, **kwargs) -> Any: ...

    def describe_cluster(self, *args, **kwargs) -> Any: ...

    def describe_nodegroup(self, *args, **kwargs) -> Any: ...

    def describe_stacks(self, *args, **kwargs) -> Any: ...

    def describe_change_set(self, *args, **kwargs) -> Any: ...

    def get_function_configuration(self, *args, **kwargs) -> Any: ...

    def get_function(self, *args, **kwargs) -> Any: ...

    def connect(self, *args, **kwargs) -> None: ...
