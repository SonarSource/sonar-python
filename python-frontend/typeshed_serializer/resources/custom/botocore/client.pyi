from SonarPythonAnalyzerFakeStub import CustomStubBase
from typing import Any, Optional


class BaseClient(CustomStubBase):
    def invoke(self, FunctionName: str, InvocationType: str, Payload: str) -> Any: ...
    
    def put_metric_data(self, **kwargs) -> None: ...

    def list_objects_v2(self, Bucket: str,
                        Delimiter: Optional[str] = ...,
                        EncodingType: Optional[Any] = ...,
                        MaxKeys: Optional[int] = ...,
                        Prefix: Optional[str] = ...,
                        ContinuationToken: Optional[str] = ...,
                        FetchOwner: Optional[bool] = ...,
                        StartAfter: Optional[str] = ...,
                        RequestPayer: Optional[Any] = ...,
                        ExpectedBucketOwner: Optional[str] = ...,
                        OptionalObjectAttributes: Optional[list[Any]] = ...) -> Any: ...

    def scan(self, TableName: str,
             IndexName: str = ...,
             AttributesToGet: list[str] = ...,
             Limit: int = ...,
             Select: str = ...,
             ScanFilter: Any = ...,
             ConditionalOperator: str = ...,
             ExclusiveStartKey: Any = ...,
             ReturnConsumedCapacity: str = ...,
             TotalSegments: int = ...,
             Segment: int = ...,
             ProjectionExpression: str = ...,
             FilterExpression: str = ...,
             ExpressionAttributeNames: Any = ...,
             ExpressionAttributeValues: Any = ...,
             ConsistentRead: bool = ...) -> Any: ...

    def describe_instances(self, *args, **kwargs) -> Any: ...

    def describe_instance_status(self, *args, **kwargs) -> Any: ...

    def describe_volumes(self, *args, **kwargs) -> Any: ...

    def describe_snapshots(self, *args, **kwargs) -> Any: ...

    def describe_images(self, *args, **kwargs) -> Any: ...

    def describe_vpcs(self, *args, **kwargs) -> Any: ...

    def describe_subnets(self, *args, **kwargs) -> Any: ...

    def describe_nat_gateways(self, *args, **kwargs) -> Any: ...

    def describe_key_pairs(self, *args, **kwargs) -> Any: ...

    def get_password_data(self, *args, **kwargs) -> Any: ...

    def head_bucket(self, *args, **kwargs) -> Any: ...

    def head_object(self, *args, **kwargs) -> Any: ...

    def describe_db_instances(self, *args, **kwargs) -> Any: ...

    def describe_db_clusters(self, *args, **kwargs) -> Any: ...

    def describe_db_snapshots(self, *args, **kwargs) -> Any: ...

    def describe_table(self, *args, **kwargs) -> Any: ...

    def describe_services(self, *args, **kwargs) -> Any: ...

    def describe_tasks(self, *args, **kwargs) -> Any: ...

    def describe_cluster(self, *args, **kwargs) -> Any: ...

    def describe_nodegroup(self, *args, **kwargs) -> Any: ...

    def describe_stacks(self, *args, **kwargs) -> Any: ...

    def describe_change_set(self, *args, **kwargs) -> Any: ...

    def get_function_configuration(self, *args, **kwargs) -> Any: ...

    def get_function(self, *args, **kwargs) -> Any: ...

    # Lambda operations
    def create_function(self, *args, **kwargs) -> Any: ...
    def update_function_code(self, *args, **kwargs) -> Any: ...
    def update_function_configuration(self, *args, **kwargs) -> Any: ...
    def delete_function(self, *args, **kwargs) -> Any: ...
    def list_functions(self, *args, **kwargs) -> Any: ...

    # DynamoDB operations
    def get_item(self, *args, **kwargs) -> Any: ...
    def put_item(self, *args, **kwargs) -> Any: ...
    def delete_item(self, *args, **kwargs) -> Any: ...
    def update_item(self, *args, **kwargs) -> Any: ...
    def query(self, *args, **kwargs) -> Any: ...
    def create_table(self, *args, **kwargs) -> Any: ...
    def delete_table(self, *args, **kwargs) -> Any: ...

    # EC2 operations
    def run_instances(self, *args, **kwargs) -> Any: ...
    def terminate_instances(self, *args, **kwargs) -> Any: ...
    def start_instances(self, *args, **kwargs) -> Any: ...
    def stop_instances(self, *args, **kwargs) -> Any: ...
    def create_security_group(self, *args, **kwargs) -> Any: ...
    def delete_security_group(self, *args, **kwargs) -> Any: ...
    def describe_security_groups(self, *args, **kwargs) -> Any: ...
    def create_vpc(self, *args, **kwargs) -> Any: ...
    def delete_vpc(self, *args, **kwargs) -> Any: ...

    # RDS operations
    def create_db_instance(self, *args, **kwargs) -> Any: ...
    def delete_db_instance(self, *args, **kwargs) -> Any: ...
    def modify_db_instance(self, *args, **kwargs) -> Any: ...
    def reboot_db_instance(self, *args, **kwargs) -> Any: ...

    # IAM operations
    def create_user(self, *args, **kwargs) -> Any: ...
    def delete_user(self, *args, **kwargs) -> Any: ...
    def get_user(self, *args, **kwargs) -> Any: ...
    def create_role(self, *args, **kwargs) -> Any: ...
    def delete_role(self, *args, **kwargs) -> Any: ...
    def get_role(self, *args, **kwargs) -> Any: ...
    def attach_user_policy(self, *args, **kwargs) -> Any: ...
    def detach_user_policy(self, *args, **kwargs) -> Any: ...

    # CloudFormation operations
    def create_stack(self, *args, **kwargs) -> Any: ...
    def delete_stack(self, *args, **kwargs) -> Any: ...
    def update_stack(self, *args, **kwargs) -> Any: ...

    # SNS operations
    def create_topic(self, *args, **kwargs) -> Any: ...
    def delete_topic(self, *args, **kwargs) -> Any: ...
    def publish(self, *args, **kwargs) -> Any: ...
    def subscribe(self, *args, **kwargs) -> Any: ...
    def unsubscribe(self, *args, **kwargs) -> Any: ...

    # SQS operations
    def create_queue(self, *args, **kwargs) -> Any: ...
    def delete_queue(self, *args, **kwargs) -> Any: ...
    def send_message(self, *args, **kwargs) -> Any: ...
    def receive_message(self, *args, **kwargs) -> Any: ...
    def delete_message(self, *args, **kwargs) -> Any: ...

    def connect(self, *args, **kwargs) -> None: ...

   # S3 client 
    def copy_object(self, *args, **kwargs) -> Any: ...
    def create_bucket(self, *args, **kwargs) -> Any: ...
    def create_bucket_metadata_configuration(self, *args, **kwargs) -> Any: ...
    def create_bucket_metadata_table_configuration(self, *args, **kwargs) -> Any: ...
    def create_multipart_upload(self, *args, **kwargs) -> Any: ...
    def create_session(self, *args, **kwargs) -> Any: ...
    def delete_bucket(self, *args, **kwargs) -> Any: ...
    def delete_bucket_analytics_configuration(self, *args, **kwargs) -> Any: ...
    def delete_bucket_cors(self, *args, **kwargs) -> Any: ...
    def delete_bucket_encryption(self, *args, **kwargs) -> Any: ...
    def delete_bucket_intelligent_tiering_configuration(self, *args, **kwargs) -> Any: ...
    def delete_bucket_inventory_configuration(self, *args, **kwargs) -> Any: ...
    def delete_bucket_lifecycle(self, *args, **kwargs) -> Any: ...
    def delete_bucket_metadata_configuration(self, *args, **kwargs) -> Any: ...
    def delete_bucket_metadata_table_configuration(self, *args, **kwargs) -> Any: ...
    def delete_bucket_metrics_configuration(self, *args, **kwargs) -> Any: ...
    def delete_bucket_ownership_controls(self, *args, **kwargs) -> Any: ...
    def delete_bucket_policy(self, *args, **kwargs) -> Any: ...
    def delete_bucket_replication(self, *args, **kwargs) -> Any: ...
    def delete_bucket_tagging(self, *args, **kwargs) -> Any: ...
    def delete_bucket_website(self, *args, **kwargs) -> Any: ...
    def delete_object(self, *args, **kwargs) -> Any: ...
    def delete_object_tagging(self, *args, **kwargs) -> Any: ...
    def delete_objects(self, *args, **kwargs) -> Any: ...
    def delete_public_access_block(self, *args, **kwargs) -> Any: ...
    def download_file(self, *args, **kwargs) -> Any: ...
    def download_fileobj(self, *args, **kwargs) -> Any: ...
    def generate_presigned_post(self, *args, **kwargs) -> Any: ...
    def generate_presigned_url(self, *args, **kwargs) -> Any: ...
    def get_bucket_accelerate_configuration(self, *args, **kwargs) -> Any: ...
    def get_bucket_acl(self, *args, **kwargs) -> Any: ...
    def get_bucket_analytics_configuration(self, *args, **kwargs) -> Any: ...
    def get_bucket_cors(self, *args, **kwargs) -> Any: ...
    def get_bucket_encryption(self, *args, **kwargs) -> Any: ...
    def get_bucket_intelligent_tiering_configuration(self, *args, **kwargs) -> Any: ...
    def get_bucket_inventory_configuration(self, *args, **kwargs) -> Any: ...
    def get_bucket_lifecycle(self, *args, **kwargs) -> Any: ...
    def get_bucket_lifecycle_configuration(self, *args, **kwargs) -> Any: ...
    def get_bucket_location(self, *args, **kwargs) -> Any: ...
    def get_bucket_logging(self, *args, **kwargs) -> Any: ...
    def get_bucket_metadata_configuration(self, *args, **kwargs) -> Any: ...
    def get_bucket_metadata_table_configuration(self, *args, **kwargs) -> Any: ...
    def get_bucket_metrics_configuration(self, *args, **kwargs) -> Any: ...
    def get_bucket_notification(self, *args, **kwargs) -> Any: ...
    def get_bucket_notification_configuration(self, *args, **kwargs) -> Any: ...
    def get_bucket_ownership_controls(self, *args, **kwargs) -> Any: ...
    def get_bucket_policy(self, *args, **kwargs) -> Any: ...
    def get_bucket_policy_status(self, *args, **kwargs) -> Any: ...
    def get_bucket_replication(self, *args, **kwargs) -> Any: ...
    def get_bucket_request_payment(self, *args, **kwargs) -> Any: ...
    def get_bucket_tagging(self, *args, **kwargs) -> Any: ...
    def get_bucket_versioning(self, *args, **kwargs) -> Any: ...
    def get_bucket_website(self, *args, **kwargs) -> Any: ...
    def get_object(self, *args, **kwargs) -> Any: ...
    def get_object_acl(self, *args, **kwargs) -> Any: ...
    def get_object_attributes(self, *args, **kwargs) -> Any: ...
    def get_object_legal_hold(self, *args, **kwargs) -> Any: ...
    def get_object_lock_configuration(self, *args, **kwargs) -> Any: ...
    def get_object_retention(self, *args, **kwargs) -> Any: ...
    def get_object_tagging(self, *args, **kwargs) -> Any: ...
    def get_object_torrent(self, *args, **kwargs) -> Any: ...
    def get_paginator(self, *args, **kwargs) -> Any: ...
    def get_public_access_block(self, *args, **kwargs) -> Any: ...
    def get_waiter(self, *args, **kwargs) -> Any: ...
    def list_bucket_analytics_configurations(self, *args, **kwargs) -> Any: ...
    def list_bucket_intelligent_tiering_configurations(self, *args, **kwargs) -> Any: ...
    def list_bucket_inventory_configurations(self, *args, **kwargs) -> Any: ...
    def list_bucket_metrics_configurations(self, *args, **kwargs) -> Any: ...
    def list_buckets(self, *args, **kwargs) -> Any: ...
    def list_directory_buckets(self, *args, **kwargs) -> Any: ...
    def list_multipart_uploads(self, *args, **kwargs) -> Any: ...
    def list_object_versions(self, *args, **kwargs) -> Any: ...
    def list_objects(self, *args, **kwargs) -> Any: ...
    def list_parts(self, *args, **kwargs) -> Any: ...
    def put_bucket_accelerate_configuration(self, *args, **kwargs) -> Any: ...
    def put_bucket_acl(self, *args, **kwargs) -> Any: ...
    def put_bucket_analytics_configuration(self, *args, **kwargs) -> Any: ...
    def put_bucket_cors(self, *args, **kwargs) -> Any: ...
    def put_bucket_encryption(self, *args, **kwargs) -> Any: ...
    def put_bucket_intelligent_tiering_configuration(self, *args, **kwargs) -> Any: ...
    def put_bucket_inventory_configuration(self, *args, **kwargs) -> Any: ...
    def put_bucket_lifecycle(self, *args, **kwargs) -> Any: ...
    def put_bucket_lifecycle_configuration(self, *args, **kwargs) -> Any: ...
    def put_bucket_logging(self, *args, **kwargs) -> Any: ...
    def put_bucket_metrics_configuration(self, *args, **kwargs) -> Any: ...
    def put_bucket_notification(self, *args, **kwargs) -> Any: ...
    def put_bucket_notification_configuration(self, *args, **kwargs) -> Any: ...
    def put_bucket_ownership_controls(self, *args, **kwargs) -> Any: ...
    def put_bucket_policy(self, *args, **kwargs) -> Any: ...
    def put_bucket_replication(self, *args, **kwargs) -> Any: ...
    def put_bucket_request_payment(self, *args, **kwargs) -> Any: ...
    def put_bucket_tagging(self, *args, **kwargs) -> Any: ...
    def put_bucket_versioning(self, *args, **kwargs) -> Any: ...
    def put_bucket_website(self, *args, **kwargs) -> Any: ...
    def put_object(self, *args, **kwargs) -> Any: ...
    def put_object_acl(self, *args, **kwargs) -> Any: ...
    def put_object_legal_hold(self, *args, **kwargs) -> Any: ...
    def put_object_lock_configuration(self, *args, **kwargs) -> Any: ...
    def put_object_retention(self, *args, **kwargs) -> Any: ...
    def put_object_tagging(self, *args, **kwargs) -> Any: ...
    def put_public_access_block(self, *args, **kwargs) -> Any: ...
    def rename_object(self, *args, **kwargs) -> Any: ...
    def restore_object(self, *args, **kwargs) -> Any: ...
    def select_object_content(self, *args, **kwargs) -> Any: ...
    def update_bucket_metadata_inventory_table_configuration(self, *args, **kwargs) -> Any: ...
    def update_bucket_metadata_journal_table_configuration(self, *args, **kwargs) -> Any: ...
    def upload_file(self, *args, **kwargs) -> Any: ...
    def upload_fileobj(self, *args, **kwargs) -> Any: ...
    def upload_part(self, *args, **kwargs) -> Any: ...
    def upload_part_copy(self, *args, **kwargs) -> Any: ...
    def write_get_object_response(self, *args, **kwargs) -> Any: ...

    # BedrockRuntime client
    def apply_guardrail(self, *args, **kwargs) -> Any: ...
    def can_paginate(self, *args, **kwargs) -> Any: ...
    def close(self, *args, **kwargs) -> Any: ...
    def converse(self, *args, **kwargs) -> Any: ...
    def converse_stream(self, *args, **kwargs) -> Any: ...
    def count_tokens(self, *args, **kwargs) -> Any: ...
    def get_async_invoke(self, *args, **kwargs) -> Any: ...
    def invoke_model(self, *args, **kwargs) -> Any: ...
    def invoke_model_with_response_stream(self, *args, **kwargs) -> Any: ...
    def list_async_invokes(self, *args, **kwargs) -> Any: ...
    def start_async_invoke(self, *args, **kwargs) -> Any: ...

