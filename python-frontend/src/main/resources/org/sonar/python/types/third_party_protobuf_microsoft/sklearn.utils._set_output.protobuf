
sklearn.utils._set_outputê
_SetOutputMixin)sklearn.utils._set_output._SetOutputMixin"builtins.object*ì
__init_subclass__;sklearn.utils._set_output._SetOutputMixin.__init_subclass__"
None*õ
clsë
/Type[sklearn.utils._set_output._SetOutputMixin]V
)sklearn.utils._set_output._SetOutputMixin")sklearn.utils._set_output._SetOutputMixin"type*Å
auto_wrap_output_keysd
Union[None,Tuple[builtins.str]]
None5
Tuple[builtins.str]
builtins.str"builtins.str *
kwargs
Anyp*™

set_output4sklearn.utils._set_output._SetOutputMixin.set_output"8
sklearn.base.BaseEstimator"sklearn.base.BaseEstimator*`
selfV
)sklearn.utils._set_output._SetOutputMixin")sklearn.utils._set_output._SetOutputMixin*…
	transform∑
7Union[None,Literal[builtins.str],Literal[builtins.str]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str µ
wrapsfunctools.wraps"8
_typeshed.IdentityFunction"_typeshed.IdentityFunction*°
wrappedì
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"functools._AnyCallable*^
assignedN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence *]
updatedN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence ﬂ

get_configsklearn._config.get_config"¥
hUnion[builtins.dict[Any,Any],builtins.dict[builtins.str,Union[builtins.bool,builtins.int,builtins.str]]]9
builtins.dict[Any,Any]
Any
Any"builtins.dictä
Jbuiltins.dict[builtins.str,Union[builtins.bool,builtins.int,builtins.str]]
builtins.str"builtins.stré
.Union[builtins.bool,builtins.int,builtins.str]
builtins.bool"builtins.bool
builtins.int"builtins.int
builtins.str"builtins.str"builtins.dictr
check_pandas_support"sklearn.utils.check_pandas_support"
Any*-
caller_name
builtins.str"builtins.str›
available_if(sklearn.utils._available_if.available_if"K
CallableType[builtins.function]&
builtins.function"builtins.function*V
checkK
CallableType[builtins.function]&
builtins.function"builtins.function*ï
__annotations__)sklearn.utils._set_output.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*7
issparse"sklearn.utils._set_output.issparse
Any