
pydantic.networks3
Partspydantic.networks.Parts"typing._TypedDict›7
AnyUrlpydantic.networks.AnyUrl"builtins.str*a
__new__ pydantic.networks.AnyUrl.__new__*
cls*
url*

kwargs0:typing.no_type_check*è
__init__!pydantic.networks.AnyUrl.__init__"
None*>
self4
pydantic.networks.AnyUrl"pydantic.networks.AnyUrl*%
url
builtins.str"builtins.str*(
scheme
builtins.str"builtins.str*P
userD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
passwordD
Union[builtins.str,None]
builtins.str"builtins.str
None *P
hostD
Union[builtins.str,None]
builtins.str"builtins.str
None *O
tldD
Union[builtins.str,None]
builtins.str"builtins.str
None *-
	host_type
builtins.str"builtins.str *P
portD
Union[builtins.str,None]
builtins.str"builtins.str
None *P
pathD
Union[builtins.str,None]
builtins.str"builtins.str
None *Q
queryD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
fragmentD
Union[builtins.str,None]
builtins.str"builtins.str
None *∫
buildpydantic.networks.AnyUrl.build"
builtins.str"builtins.str*g
cls^
Type[pydantic.networks.AnyUrl]4
pydantic.networks.AnyUrl"pydantic.networks.AnyUrl"type*(
scheme
builtins.str"builtins.str*P
userD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
passwordD
Union[builtins.str,None]
builtins.str"builtins.str
None *&
host
builtins.str"builtins.str*P
portD
Union[builtins.str,None]
builtins.str"builtins.str
None *P
pathD
Union[builtins.str,None]
builtins.str"builtins.str
None *Q
queryD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
fragmentD
Union[builtins.str,None]
builtins.str"builtins.str
None *)
_kwargs
builtins.str"builtins.str0:builtins.classmethodp*∑
__modify_schema__*pydantic.networks.AnyUrl.__modify_schema__"
None*g
cls^
Type[pydantic.networks.AnyUrl]4
pydantic.networks.AnyUrl"pydantic.networks.AnyUrl"type*i
field_schemaW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict0:builtins.classmethodp*Õ
__get_validators__+pydantic.networks.AnyUrl.__get_validators__"Ü
QTypeAlias[typing.Generator[TypeAlias[CallableType[builtins.function]],None,None]]â
Ftyping.Generator[TypeAlias[CallableType[builtins.function]],None,None]ò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"pydantic.typing.AnyCallable
None
None"typing.Generator"#pydantic.networks.CallableGenerator*g
cls^
Type[pydantic.networks.AnyUrl]4
pydantic.networks.AnyUrl"pydantic.networks.AnyUrl"type0:builtins.classmethodp*Ö
validate!pydantic.networks.AnyUrl.validate"4
pydantic.networks.AnyUrl"pydantic.networks.AnyUrl*g
cls^
Type[pydantic.networks.AnyUrl]4
pydantic.networks.AnyUrl"pydantic.networks.AnyUrl"type*
value
Any*C
field8
pydantic.fields.ModelField"pydantic.fields.ModelField*D
config8
pydantic.config.BaseConfig"pydantic.config.BaseConfig0:builtins.classmethodp*À
validate_parts'pydantic.networks.AnyUrl.validate_parts"@
TypeAlias[TypedDict]
	TypedDict"pydantic.networks.Parts*g
cls^
Type[pydantic.networks.AnyUrl]4
pydantic.networks.AnyUrl"pydantic.networks.AnyUrl"type*K
parts@
TypeAlias[TypedDict]
	TypedDict"pydantic.networks.Parts0:builtins.classmethodp*˜
validate_host&pydantic.networks.AnyUrl.validate_host"Ì
GTuple[builtins.str,Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool*g
cls^
Type[pydantic.networks.AnyUrl]4
pydantic.networks.AnyUrl"pydantic.networks.AnyUrl"type*K
parts@
TypeAlias[TypedDict]
	TypedDict"pydantic.networks.Parts0:builtins.classmethodp*È
get_default_parts*pydantic.networks.AnyUrl.get_default_parts"@
TypeAlias[TypedDict]
	TypedDict"pydantic.networks.Parts*K
parts@
TypeAlias[TypedDict]
	TypedDict"pydantic.networks.Parts0:builtins.staticmethodh*’
apply_default_parts,pydantic.networks.AnyUrl.apply_default_parts"@
TypeAlias[TypedDict]
	TypedDict"pydantic.networks.Parts*g
cls^
Type[pydantic.networks.AnyUrl]4
pydantic.networks.AnyUrl"pydantic.networks.AnyUrl"type*K
parts@
TypeAlias[TypedDict]
	TypedDict"pydantic.networks.Parts0:builtins.classmethodp*É
__repr__!pydantic.networks.AnyUrl.__repr__"
builtins.str"builtins.str*64
pydantic.networks.AnyUrl"pydantic.networks.AnyUrlr]
strip_whitespace)pydantic.networks.AnyUrl.strip_whitespace
builtins.bool"builtins.boolrO

min_length#pydantic.networks.AnyUrl.min_length
builtins.int"builtins.intrO

max_length#pydantic.networks.AnyUrl.max_length
builtins.int"builtins.intrÀ
allowed_schemes(pydantic.networks.AnyUrl.allowed_schemesç
+Union[typing.Collection[builtins.str],None]R
typing.Collection[builtins.str]
builtins.str"builtins.str"typing.Collection
NonerU
tld_required%pydantic.networks.AnyUrl.tld_required
builtins.bool"builtins.boolrW
user_required&pydantic.networks.AnyUrl.user_required
builtins.bool"builtins.boolrW
host_required&pydantic.networks.AnyUrl.host_required
builtins.bool"builtins.boolr
hidden_parts%pydantic.networks.AnyUrl.hidden_partsH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.setrÎ
	__slots__"pydantic.networks.AnyUrl.__slots__π
àTuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrG
schemepydantic.networks.AnyUrl.scheme
builtins.str"builtins.strrk
userpydantic.networks.AnyUrl.userD
Union[builtins.str,None]
builtins.str"builtins.str
Noners
password!pydantic.networks.AnyUrl.passwordD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerk
hostpydantic.networks.AnyUrl.hostD
Union[builtins.str,None]
builtins.str"builtins.str
Noneri
tldpydantic.networks.AnyUrl.tldD
Union[builtins.str,None]
builtins.str"builtins.str
NonerM
	host_type"pydantic.networks.AnyUrl.host_type
builtins.str"builtins.strrk
portpydantic.networks.AnyUrl.portD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerk
pathpydantic.networks.AnyUrl.pathD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerm
querypydantic.networks.AnyUrl.queryD
Union[builtins.str,None]
builtins.str"builtins.str
Noners
fragment!pydantic.networks.AnyUrl.fragmentD
Union[builtins.str,None]
builtins.str"builtins.str
None–

AnyHttpUrlpydantic.networks.AnyHttpUrl"pydantic.networks.AnyUrlrâ
allowed_schemes,pydantic.networks.AnyHttpUrl.allowed_schemesH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.set‹
HttpUrlpydantic.networks.HttpUrl"pydantic.networks.AnyHttpUrl*Í
get_default_parts+pydantic.networks.HttpUrl.get_default_parts"@
TypeAlias[TypedDict]
	TypedDict"pydantic.networks.Parts*K
parts@
TypeAlias[TypedDict]
	TypedDict"pydantic.networks.Parts0:builtins.staticmethodhrV
tld_required&pydantic.networks.HttpUrl.tld_required
builtins.bool"builtins.boolrP

max_length$pydantic.networks.HttpUrl.max_length
builtins.int"builtins.intrÄ
hidden_parts&pydantic.networks.HttpUrl.hidden_partsH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.set°
FileUrlpydantic.networks.FileUrl"pydantic.networks.AnyUrlrÜ
allowed_schemes)pydantic.networks.FileUrl.allowed_schemesH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.setrX
host_required'pydantic.networks.FileUrl.host_required
builtins.bool"builtins.bool±
PostgresDsnpydantic.networks.PostgresDsn"pydantic.networks.AnyUrlrä
allowed_schemes-pydantic.networks.PostgresDsn.allowed_schemesH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.setr\
user_required+pydantic.networks.PostgresDsn.user_required
builtins.bool"builtins.bool°
AmqpDsnpydantic.networks.AmqpDsn"pydantic.networks.AnyUrlrÜ
allowed_schemes)pydantic.networks.AmqpDsn.allowed_schemesH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.setrX
host_required'pydantic.networks.AmqpDsn.host_required
builtins.bool"builtins.boolì
RedisDsnpydantic.networks.RedisDsn"pydantic.networks.AnyUrl*Î
get_default_parts,pydantic.networks.RedisDsn.get_default_parts"@
TypeAlias[TypedDict]
	TypedDict"pydantic.networks.Parts*K
parts@
TypeAlias[TypedDict]
	TypedDict"pydantic.networks.Parts0:builtins.staticmethodhrá
allowed_schemes*pydantic.networks.RedisDsn.allowed_schemesH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.setrY
host_required(pydantic.networks.RedisDsn.host_required
builtins.bool"builtins.bool∏
KafkaDsnpydantic.networks.KafkaDsn"pydantic.networks.AnyUrl*Î
get_default_parts,pydantic.networks.KafkaDsn.get_default_parts"@
TypeAlias[TypedDict]
	TypedDict"pydantic.networks.Parts*K
parts@
TypeAlias[TypedDict]
	TypedDict"pydantic.networks.Parts0:builtins.staticmethodhrá
allowed_schemes*pydantic.networks.KafkaDsn.allowed_schemesH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.set–	
EmailStrpydantic.networks.EmailStr"builtins.str*ø
__modify_schema__,pydantic.networks.EmailStr.__modify_schema__"
None*m
clsd
 Type[pydantic.networks.EmailStr]8
pydantic.networks.EmailStr"pydantic.networks.EmailStr"type*i
field_schemaW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict0:builtins.classmethodp*’
__get_validators__-pydantic.networks.EmailStr.__get_validators__"Ü
QTypeAlias[typing.Generator[TypeAlias[CallableType[builtins.function]],None,None]]â
Ftyping.Generator[TypeAlias[CallableType[builtins.function]],None,None]ò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"pydantic.typing.AnyCallable
None
None"typing.Generator"#pydantic.networks.CallableGenerator*m
clsd
 Type[pydantic.networks.EmailStr]8
pydantic.networks.EmailStr"pydantic.networks.EmailStr"type0:builtins.classmethodp*ˇ
validate#pydantic.networks.EmailStr.validate"
builtins.str"builtins.str*m
clsd
 Type[pydantic.networks.EmailStr]8
pydantic.networks.EmailStr"pydantic.networks.EmailStr"type*'
value
builtins.str"builtins.str0:builtins.classmethodpö
	NameEmailpydantic.networks.NameEmail"pydantic.utils.Representation*—
__init__$pydantic.networks.NameEmail.__init__"
None*D
self:
pydantic.networks.NameEmail"pydantic.networks.NameEmail*&
name
builtins.str"builtins.str*'
email
builtins.str"builtins.str*ï
__eq__"pydantic.networks.NameEmail.__eq__"
builtins.bool"builtins.bool*<:
pydantic.networks.NameEmail"pydantic.networks.NameEmail*	
Any*√
__modify_schema__-pydantic.networks.NameEmail.__modify_schema__"
None*p
clsg
!Type[pydantic.networks.NameEmail]:
pydantic.networks.NameEmail"pydantic.networks.NameEmail"type*i
field_schemaW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict0:builtins.classmethodp*Ÿ
__get_validators__.pydantic.networks.NameEmail.__get_validators__"Ü
QTypeAlias[typing.Generator[TypeAlias[CallableType[builtins.function]],None,None]]â
Ftyping.Generator[TypeAlias[CallableType[builtins.function]],None,None]ò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"pydantic.typing.AnyCallable
None
None"typing.Generator"#pydantic.networks.CallableGenerator*p
clsg
!Type[pydantic.networks.NameEmail]:
pydantic.networks.NameEmail"pydantic.networks.NameEmail"type0:builtins.classmethodp*å
validate$pydantic.networks.NameEmail.validate":
pydantic.networks.NameEmail"pydantic.networks.NameEmail*p
clsg
!Type[pydantic.networks.NameEmail]:
pydantic.networks.NameEmail"pydantic.networks.NameEmail"type*
value
Any0:builtins.classmethodp*ä
__str__#pydantic.networks.NameEmail.__str__"
builtins.str"builtins.str*<:
pydantic.networks.NameEmail"pydantic.networks.NameEmailrî
	__slots__%pydantic.networks.NameEmail.__slots__`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strrF
name pydantic.networks.NameEmail.name
builtins.str"builtins.strrH
email!pydantic.networks.NameEmail.email
builtins.str"builtins.strí
IPvAnyAddresspydantic.networks.IPvAnyAddress"ipaddress._BaseAddress*”
__modify_schema__1pydantic.networks.IPvAnyAddress.__modify_schema__"
None*|
clss
%Type[pydantic.networks.IPvAnyAddress]B
pydantic.networks.IPvAnyAddress"pydantic.networks.IPvAnyAddress"type*i
field_schemaW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict0:builtins.classmethodp*È
__get_validators__2pydantic.networks.IPvAnyAddress.__get_validators__"Ü
QTypeAlias[typing.Generator[TypeAlias[CallableType[builtins.function]],None,None]]â
Ftyping.Generator[TypeAlias[CallableType[builtins.function]],None,None]ò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"pydantic.typing.AnyCallable
None
None"typing.Generator"#pydantic.networks.CallableGenerator*|
clss
%Type[pydantic.networks.IPvAnyAddress]B
pydantic.networks.IPvAnyAddress"pydantic.networks.IPvAnyAddress"type0:builtins.classmethodp*Ö
validate(pydantic.networks.IPvAnyAddress.validate"ñ
2Union[ipaddress.IPv4Address,ipaddress.IPv6Address].
ipaddress.IPv4Address"ipaddress.IPv4Address.
ipaddress.IPv6Address"ipaddress.IPv6Address*|
clss
%Type[pydantic.networks.IPvAnyAddress]B
pydantic.networks.IPvAnyAddress"pydantic.networks.IPvAnyAddress"type*ù
valueë
/Union[builtins.str,builtins.bytes,builtins.int]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes
builtins.int"builtins.int0:builtins.classmethodp£
IPvAnyInterface!pydantic.networks.IPvAnyInterface"ipaddress._BaseAddress*‹
__modify_schema__3pydantic.networks.IPvAnyInterface.__modify_schema__"
None*Ç
clsy
'Type[pydantic.networks.IPvAnyInterface]F
!pydantic.networks.IPvAnyInterface"!pydantic.networks.IPvAnyInterface"type*i
field_schemaW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict0:builtins.classmethodp*Ú
__get_validators__4pydantic.networks.IPvAnyInterface.__get_validators__"Ü
QTypeAlias[typing.Generator[TypeAlias[CallableType[builtins.function]],None,None]]â
Ftyping.Generator[TypeAlias[CallableType[builtins.function]],None,None]ò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"pydantic.typing.AnyCallable
None
None"typing.Generator"#pydantic.networks.CallableGenerator*Ç
clsy
'Type[pydantic.networks.IPvAnyInterface]F
!pydantic.networks.IPvAnyInterface"!pydantic.networks.IPvAnyInterface"type0:builtins.classmethodp*Ä	
validate*pydantic.networks.IPvAnyInterface.validate"¢
6Union[ipaddress.IPv4Interface,ipaddress.IPv6Interface]2
ipaddress.IPv4Interface"ipaddress.IPv4Interface2
ipaddress.IPv6Interface"ipaddress.IPv6Interface*Ç
clsy
'Type[pydantic.networks.IPvAnyInterface]F
!pydantic.networks.IPvAnyInterface"!pydantic.networks.IPvAnyInterface"type*É
value˜
íTypeAlias[Union[builtins.str,builtins.bytes,builtins.int,Tuple[Union[builtins.str,builtins.bytes,builtins.int],Union[builtins.str,builtins.int]]]]æ
áUnion[builtins.str,builtins.bytes,builtins.int,Tuple[Union[builtins.str,builtins.bytes,builtins.int],Union[builtins.str,builtins.int]]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes
builtins.int"builtins.int—
WTuple[Union[builtins.str,builtins.bytes,builtins.int],Union[builtins.str,builtins.int]]ë
/Union[builtins.str,builtins.bytes,builtins.int]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes
builtins.int"builtins.int`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"pydantic.networks.NetworkType0:builtins.classmethodp¯
IPvAnyNetworkpydantic.networks.IPvAnyNetwork"ipaddress._BaseNetwork*”
__modify_schema__1pydantic.networks.IPvAnyNetwork.__modify_schema__"
None*|
clss
%Type[pydantic.networks.IPvAnyNetwork]B
pydantic.networks.IPvAnyNetwork"pydantic.networks.IPvAnyNetwork"type*i
field_schemaW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict0:builtins.classmethodp*È
__get_validators__2pydantic.networks.IPvAnyNetwork.__get_validators__"Ü
QTypeAlias[typing.Generator[TypeAlias[CallableType[builtins.function]],None,None]]â
Ftyping.Generator[TypeAlias[CallableType[builtins.function]],None,None]ò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"pydantic.typing.AnyCallable
None
None"typing.Generator"#pydantic.networks.CallableGenerator*|
clss
%Type[pydantic.networks.IPvAnyNetwork]B
pydantic.networks.IPvAnyNetwork"pydantic.networks.IPvAnyNetwork"type0:builtins.classmethodp*Î
validate(pydantic.networks.IPvAnyNetwork.validate"ñ
2Union[ipaddress.IPv4Network,ipaddress.IPv6Network].
ipaddress.IPv4Network"ipaddress.IPv4Network.
ipaddress.IPv6Network"ipaddress.IPv6Network*|
clss
%Type[pydantic.networks.IPvAnyNetwork]B
pydantic.networks.IPvAnyNetwork"pydantic.networks.IPvAnyNetwork"type*É
value˜
íTypeAlias[Union[builtins.str,builtins.bytes,builtins.int,Tuple[Union[builtins.str,builtins.bytes,builtins.int],Union[builtins.str,builtins.int]]]]æ
áUnion[builtins.str,builtins.bytes,builtins.int,Tuple[Union[builtins.str,builtins.bytes,builtins.int],Union[builtins.str,builtins.int]]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes
builtins.int"builtins.int—
WTuple[Union[builtins.str,builtins.bytes,builtins.int],Union[builtins.str,builtins.int]]ë
/Union[builtins.str,builtins.bytes,builtins.int]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes
builtins.int"builtins.int`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"pydantic.networks.NetworkType0:builtins.classmethodpn
	url_regexpydantic.networks.url_regex"D
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.PatternÄ
ascii_domain_regex$pydantic.networks.ascii_domain_regex"D
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern|
int_domain_regex"pydantic.networks.int_domain_regex"D
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern±
	stricturlpydantic.networks.stricturl"^
Type[pydantic.networks.AnyUrl]4
pydantic.networks.AnyUrl"pydantic.networks.AnyUrl"type*6
strip_whitespace
builtins.bool"builtins.bool *.

min_length
builtins.int"builtins.int *.

max_length
builtins.int"builtins.int *2
tld_required
builtins.bool"builtins.bool *3
host_required
builtins.bool"builtins.bool *•
allowed_schemesç
+Union[typing.Collection[builtins.str],None]R
typing.Collection[builtins.str]
builtins.str"builtins.str"typing.Collection
None L
import_email_validator(pydantic.networks.import_email_validator"
NoneΩ
validate_email pydantic.networks.validate_email"`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str*'
value
builtins.str"builtins.str*ç
__annotations__!pydantic.networks.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*=
email_validator!pydantic.networks.email_validator
Any*p
__all__pydantic.networks.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*∞
_url_regex_cache"pydantic.networks._url_regex_cachex
$Union[re.Pattern[builtins.str],None]D
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern
None*¬
_ascii_domain_regex_cache+pydantic.networks._ascii_domain_regex_cachex
$Union[re.Pattern[builtins.str],None]D
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern
None*æ
_int_domain_regex_cache)pydantic.networks._int_domain_regex_cachex
$Union[re.Pattern[builtins.str],None]D
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern
None*Ä
pretty_email_regex$pydantic.networks.pretty_email_regexD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern