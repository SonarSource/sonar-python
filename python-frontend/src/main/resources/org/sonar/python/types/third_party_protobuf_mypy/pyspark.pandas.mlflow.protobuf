
pyspark.pandas.mlflowá
PythonModelWrapper(pyspark.pandas.mlflow.PythonModelWrapper"builtins.object*Ê
__init__1pyspark.pandas.mlflow.PythonModelWrapper.__init__"
None*^
selfT
(pyspark.pandas.mlflow.PythonModelWrapper"(pyspark.pandas.mlflow.PythonModelWrapper*+
	model_uri
builtins.str"builtins.str*ó
return_type_hintÜ
kUnion[builtins.str,builtins.type,TypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]]
builtins.str"builtins.str
builtins.type"builtins.type¬
ITypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]¾
>Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype](
numpy.dtype[Any]
Any"numpy.dtypeP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"pyspark.pandas._typing.Dtype*ð
_return_type5pyspark.pandas.mlflow.PythonModelWrapper._return_type"8
pyspark.sql.types.DataType"pyspark.sql.types.DataType*^
selfT
(pyspark.pandas.mlflow.PythonModelWrapper"(pyspark.pandas.mlflow.PythonModelWrapper0:lazy_property*³
_model/pyspark.pandas.mlflow.PythonModelWrapper._model"
Any*^
selfT
(pyspark.pandas.mlflow.PythonModelWrapper"(pyspark.pandas.mlflow.PythonModelWrapper0:lazy_property*»

_model_udf3pyspark.pandas.mlflow.PythonModelWrapper._model_udf"
Any*^
selfT
(pyspark.pandas.mlflow.PythonModelWrapper"(pyspark.pandas.mlflow.PythonModelWrapper0:lazy_property*±
__str__0pyspark.pandas.mlflow.PythonModelWrapper.__str__"
builtins.str"builtins.str*VT
(pyspark.pandas.mlflow.PythonModelWrapper"(pyspark.pandas.mlflow.PythonModelWrapper*³
__repr__1pyspark.pandas.mlflow.PythonModelWrapper.__repr__"
builtins.str"builtins.str*VT
(pyspark.pandas.mlflow.PythonModelWrapper"(pyspark.pandas.mlflow.PythonModelWrapper*ß
predict0pyspark.pandas.mlflow.PythonModelWrapper.predict"Ý
GUnion[pyspark.pandas.series.Series[Any],pandas.core.series.Series[Any]]J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.SeriesD
pandas.core.series.Series[Any]
Any"pandas.core.series.Series*^
selfT
(pyspark.pandas.mlflow.PythonModelWrapper"(pyspark.pandas.mlflow.PythonModelWrapper*á
dataÖ
FUnion[pyspark.pandas.frame.DataFrame[Any],pandas.core.frame.DataFrame]N
#pyspark.pandas.frame.DataFrame[Any]
Any"pyspark.pandas.frame.DataFrame:
pandas.core.frame.DataFrame"pandas.core.frame.DataFramer_

_model_uri3pyspark.pandas.mlflow.PythonModelWrapper._model_uri
builtins.str"builtins.strr®
_return_type_hint:pyspark.pandas.mlflow.PythonModelWrapper._return_type_hintÜ
kUnion[builtins.str,builtins.type,TypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]]
builtins.str"builtins.str
builtins.type"builtins.type¬
ITypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]¾
>Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype](
numpy.dtype[Any]
Any"numpy.dtypeP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"pyspark.pandas._typing.Dtype¥

load_model pyspark.pandas.mlflow.load_model"T
(pyspark.pandas.mlflow.PythonModelWrapper"(pyspark.pandas.mlflow.PythonModelWrapper*+
	model_uri
builtins.str"builtins.str*ñ
predict_typeÜ
kUnion[builtins.str,builtins.type,TypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]]
builtins.str"builtins.str
builtins.type"builtins.type¬
ITypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]¾
>Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype](
numpy.dtype[Any]
Any"numpy.dtypeP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"pyspark.pandas._typing.Dtype .
_testpyspark.pandas.mlflow._test"
None*‘
__annotations__%pyspark.pandas.mlflow.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
pdpandas *
npnumpy *t
__all__pyspark.pandas.mlflow.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*/
mlflowpyspark.pandas.mlflow.mlflow
Any*1
sklearnpyspark.pandas.mlflow.sklearn
Any