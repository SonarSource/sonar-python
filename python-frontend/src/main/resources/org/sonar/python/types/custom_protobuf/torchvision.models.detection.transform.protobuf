
&torchvision.models.detection.transform¯
	ImageList1torchvision.models.detection.image_list.ImageList"*SonarPythonAnalyzerFakeStub.CustomStubBase*§
__init__:torchvision.models.detection.image_list.ImageList.__init__"
None*p
selff
1torchvision.models.detection.image_list.ImageList"1torchvision.models.detection.image_list.ImageList*)
tensors
torch.Tensor"torch.Tensor*¥
image_sizes¢
/builtins.list[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.list*æ
to4torchvision.models.detection.image_list.ImageList.to"f
1torchvision.models.detection.image_list.ImageList"1torchvision.models.detection.image_list.ImageList*p
selff
1torchvision.models.detection.image_list.ImageList"1torchvision.models.detection.image_list.ImageList*(
device
torch.device"torch.devicerM
tensors9torchvision.models.detection.image_list.ImageList.tensors
AnyrU
image_sizes=torchvision.models.detection.image_list.ImageList.image_sizes
AnyÊ
Tensortorch.Tensor"*SonarPythonAnalyzerFakeStub.CustomStubBase*›

new_tensortorch.Tensor.new_tensor"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
data
Any*N
dtypeA
Union[torch.dtype,None]
torch.dtype"torch.dtype
None *}
deviceo
%Union[builtins.str,torch.device,None]
builtins.str"builtins.str
torch.device"torch.device
None *\
requires_gradG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *0

pin_memory
builtins.bool"builtins.bool *¡
flattentorch.Tensor.flatten"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*-
	start_dim
builtins.int"builtins.int *+
end_dim
builtins.int"builtins.int ß.
GeneralizedRCNNTransform?torchvision.models.detection.transform.GeneralizedRCNNTransform"torch.nn.modules.module.Module*Ñ
__init__Htorchvision.models.detection.transform.GeneralizedRCNNTransform.__init__"
None*ç
selfÇ
?torchvision.models.detection.transform.GeneralizedRCNNTransform"?torchvision.models.detection.transform.GeneralizedRCNNTransform**
min_size
builtins.int"builtins.int**
max_size
builtins.int"builtins.int*`

image_meanP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.list*_
	image_stdP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.list*2
size_divisible
builtins.int"builtins.int *Ø

fixed_sizeú
,Union[Tuple[builtins.int,builtins.int],None]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
None *
kwargs
Any*·
forwardGtorchvision.models.detection.transform.GeneralizedRCNNTransform.forward"˛
|Tuple[torchvision.models.detection.image_list.ImageList,Union[builtins.list[builtins.dict[builtins.str,torch.Tensor]],None]]f
1torchvision.models.detection.image_list.ImageList"1torchvision.models.detection.image_list.ImageListì
CUnion[builtins.list[builtins.dict[builtins.str,torch.Tensor]],None]ø
7builtins.list[builtins.dict[builtins.str,torch.Tensor]]u
(builtins.dict[builtins.str,torch.Tensor]
builtins.str"builtins.str
torch.Tensor"torch.Tensor"builtins.dict"builtins.list
None*ç
selfÇ
?torchvision.models.detection.transform.GeneralizedRCNNTransform"?torchvision.models.detection.transform.GeneralizedRCNNTransform*V
imagesJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*£
targetsì
CUnion[builtins.list[builtins.dict[builtins.str,torch.Tensor]],None]ø
7builtins.list[builtins.dict[builtins.str,torch.Tensor]]u
(builtins.dict[builtins.str,torch.Tensor]
builtins.str"builtins.str
torch.Tensor"torch.Tensor"builtins.dict"builtins.list
None *≠
	normalizeItorchvision.models.detection.transform.GeneralizedRCNNTransform.normalize"
torch.Tensor"torch.Tensor*ç
selfÇ
?torchvision.models.detection.transform.GeneralizedRCNNTransform"?torchvision.models.detection.transform.GeneralizedRCNNTransform*'
image
torch.Tensor"torch.Tensor*›
torch_choiceLtorchvision.models.detection.transform.GeneralizedRCNNTransform.torch_choice"
builtins.int"builtins.int*ç
selfÇ
?torchvision.models.detection.transform.GeneralizedRCNNTransform"?torchvision.models.detection.transform.GeneralizedRCNNTransform*Q
kJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*˝
resizeFtorchvision.models.detection.transform.GeneralizedRCNNTransform.resize"¶
HTuple[torch.Tensor,Union[builtins.dict[builtins.str,torch.Tensor],None]]
torch.Tensor"torch.Tensorπ
4Union[builtins.dict[builtins.str,torch.Tensor],None]u
(builtins.dict[builtins.str,torch.Tensor]
builtins.str"builtins.str
torch.Tensor"torch.Tensor"builtins.dict
None*ç
selfÇ
?torchvision.models.detection.transform.GeneralizedRCNNTransform"?torchvision.models.detection.transform.GeneralizedRCNNTransform*'
image
torch.Tensor"torch.Tensor*»
targetπ
4Union[builtins.dict[builtins.str,torch.Tensor],None]u
(builtins.dict[builtins.str,torch.Tensor]
builtins.str"builtins.str
torch.Tensor"torch.Tensor"builtins.dict
None *œ
max_by_axisKtorchvision.models.detection.transform.GeneralizedRCNNTransform.max_by_axis"J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*ç
selfÇ
?torchvision.models.detection.transform.GeneralizedRCNNTransform"?torchvision.models.detection.transform.GeneralizedRCNNTransform*ñ
the_listá
*builtins.list[builtins.list[builtins.int]]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list"builtins.list*ñ
batch_imagesLtorchvision.models.detection.transform.GeneralizedRCNNTransform.batch_images"
torch.Tensor"torch.Tensor*ç
selfÇ
?torchvision.models.detection.transform.GeneralizedRCNNTransform"?torchvision.models.detection.transform.GeneralizedRCNNTransform*V
imagesJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*2
size_divisible
builtins.int"builtins.int *Û
postprocessKtorchvision.models.detection.transform.GeneralizedRCNNTransform.postprocess"ø
7builtins.list[builtins.dict[builtins.str,torch.Tensor]]u
(builtins.dict[builtins.str,torch.Tensor]
builtins.str"builtins.str
torch.Tensor"torch.Tensor"builtins.dict"builtins.list*ç
selfÇ
?torchvision.models.detection.transform.GeneralizedRCNNTransform"?torchvision.models.detection.transform.GeneralizedRCNNTransform*Ã
resultø
7builtins.list[builtins.dict[builtins.str,torch.Tensor]]u
(builtins.dict[builtins.str,torch.Tensor]
builtins.str"builtins.str
torch.Tensor"torch.Tensor"builtins.dict"builtins.list*µ
image_shapes¢
/builtins.list[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.list*Ω
original_image_sizes¢
/builtins.list[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.listr]
min_sizeHtorchvision.models.detection.transform.GeneralizedRCNNTransform.min_size
Anyr]
max_sizeHtorchvision.models.detection.transform.GeneralizedRCNNTransform.max_size
Anyra

image_meanJtorchvision.models.detection.transform.GeneralizedRCNNTransform.image_mean
Anyr_
	image_stdItorchvision.models.detection.transform.GeneralizedRCNNTransform.image_std
Anyri
size_divisibleNtorchvision.models.detection.transform.GeneralizedRCNNTransform.size_divisible
Anyra

fixed_sizeJtorchvision.models.detection.transform.GeneralizedRCNNTransform.fixed_size
Any·
paste_masks_in_image;torchvision.models.detection.roi_heads.paste_masks_in_image"
torch.Tensor"torch.Tensor*'
masks
torch.Tensor"torch.Tensor*'
boxes
torch.Tensor"torch.Tensor*o
	img_shape`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*+
padding
builtins.int"builtins.int œ
resize_keypoints7torchvision.models.detection.transform.resize_keypoints"
torch.Tensor"torch.Tensor*+
	keypoints
torch.Tensor"torch.Tensor*]
original_sizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*X
new_sizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list√
resize_boxes3torchvision.models.detection.transform.resize_boxes"
torch.Tensor"torch.Tensor*'
boxes
torch.Tensor"torch.Tensor*]
original_sizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*X
new_sizeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*¢
__annotations__6torchvision.models.detection.transform.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict