
sklearn.utils.parallel¶
Parallelsklearn.utils.parallel.Parallel"builtins.object*Á
__call__(sklearn.utils.parallel.Parallel.__call__"9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*L
selfB
sklearn.utils.parallel.Parallel"sklearn.utils.parallel.Parallel*ß
iterableò
0Union[typing.Iterable[Any],typing.Iterator[Any]]0
typing.Iterable[Any]
Any"typing.Iterable0
typing.Iterator[Any]
Any"typing.Iteratorë
_FuncWrapper#sklearn.utils.parallel._FuncWrapper"builtins.object*Û
__init__,sklearn.utils.parallel._FuncWrapper.__init__"
None*T
selfJ
#sklearn.utils.parallel._FuncWrapper"#sklearn.utils.parallel._FuncWrapper*Y
functionK
CallableType[builtins.function]&
builtins.function"builtins.function*˙
with_config/sklearn.utils.parallel._FuncWrapper.with_config"J
#sklearn.utils.parallel._FuncWrapper"#sklearn.utils.parallel._FuncWrapper*T
selfJ
#sklearn.utils.parallel._FuncWrapper"#sklearn.utils.parallel._FuncWrapper*ó
configä
Jbuiltins.dict[builtins.str,Union[builtins.bool,builtins.int,builtins.str]]
builtins.str"builtins.stré
.Union[builtins.bool,builtins.int,builtins.str]
builtins.bool"builtins.bool
builtins.int"builtins.int
builtins.str"builtins.str"builtins.dict*X
__call__,sklearn.utils.parallel._FuncWrapper.__call__*
self*
args*

kwargs®
update_wrapperfunctools.update_wrapper"E
functools._T"
builtins.object"builtins.object"builtins.object*R
wrapperE
functools._T"
builtins.object"builtins.object"builtins.object*°
wrappedì
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"functools._AnyCallable*^
assignedN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence *]
updatedN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence ‹
config_contextsklearn._config.config_context"2
typing.Iterator[None]
None"typing.Iterator*\
assume_finiteG
Union[None,builtins.bool]
None
builtins.bool"builtins.bool *ò
working_memoryÅ
˝Union[None,TypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]]
NoneÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *a
print_changed_onlyG
Union[None,builtins.bool]
None
builtins.bool"builtins.bool *«
display∑
7Union[None,Literal[builtins.str],Literal[builtins.str]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *¢
pairwise_dist_chunk_sizeÅ
˝Union[None,TypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]]
NoneÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *j
enable_cython_pairwise_distG
Union[None,builtins.bool]
None
builtins.bool"builtins.bool *a
array_api_dispatchG
Union[None,builtins.bool]
None
builtins.bool"builtins.bool *\
transform_outputD
Union[None,builtins.str]
None
builtins.str"builtins.str ﬂ

get_configsklearn._config.get_config"¥
hUnion[builtins.dict[Any,Any],builtins.dict[builtins.str,Union[builtins.bool,builtins.int,builtins.str]]]9
builtins.dict[Any,Any]
Any
Any"builtins.dictä
Jbuiltins.dict[builtins.str,Union[builtins.bool,builtins.int,builtins.str]]
builtins.str"builtins.stré
.Union[builtins.bool,builtins.int,builtins.str]
builtins.bool"builtins.bool
builtins.int"builtins.int
builtins.str"builtins.str"builtins.dict¬
delayedsklearn.utils.parallel.delayed"ª
:Union[builtins.tuple[Any],CallableType[builtins.function]].
builtins.tuple[Any]
Any"builtins.tupleK
CallableType[builtins.function]&
builtins.function"builtins.function*Y
functionK
CallableType[builtins.function]&
builtins.function"builtins.function*í
__annotations__&sklearn.utils.parallel.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*0
joblibsklearn.utils.parallel.joblib
Any