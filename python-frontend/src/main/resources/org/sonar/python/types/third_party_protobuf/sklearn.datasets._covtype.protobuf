
sklearn.datasets._covtype E
GzipFilegzip.GzipFile"_compression.BaseStream*Å
filenamegzip.GzipFile.filename"
builtins.str"builtins.str*(
self
gzip.GzipFile"gzip.GzipFile0:builtins.property`*£
mtimegzip.GzipFile.mtime"D
Union[builtins.int,None]
builtins.int"builtins.int
None*(
self
gzip.GzipFile"gzip.GzipFile0:builtins.property`*»
writegzip.GzipFile.write"
builtins.int"builtins.int*(
self
gzip.GzipFile"gzip.GzipFile*·
data÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*∏
readgzip.GzipFile.read" 
builtins.bytes"builtins.bytes*(
self
gzip.GzipFile"gzip.GzipFile*P
sizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *í
read1gzip.GzipFile.read1" 
builtins.bytes"builtins.bytes*(
self
gzip.GzipFile"gzip.GzipFile*(
size
builtins.int"builtins.int *ã
peekgzip.GzipFile.peek" 
builtins.bytes"builtins.bytes*(
self
gzip.GzipFile"gzip.GzipFile*#
n
builtins.int"builtins.int*P
closegzip.GzipFile.close"
None*(
self
gzip.GzipFile"gzip.GzipFile*
flushgzip.GzipFile.flush"
None*(
self
gzip.GzipFile"gzip.GzipFile*-
	zlib_mode
builtins.int"builtins.int *f
filenogzip.GzipFile.fileno"
builtins.int"builtins.int*(
self
gzip.GzipFile"gzip.GzipFile*R
rewindgzip.GzipFile.rewind"
None*(
self
gzip.GzipFile"gzip.GzipFile*∏
seekgzip.GzipFile.seek"
builtins.int"builtins.int*(
self
gzip.GzipFile"gzip.GzipFile*(
offset
builtins.int"builtins.int**
whence
builtins.int"builtins.int *¿
readlinegzip.GzipFile.readline" 
builtins.bytes"builtins.bytes*(
self
gzip.GzipFile"gzip.GzipFile*P
sizeD
Union[builtins.int,None]
builtins.int"builtins.int
None 2ñ,
__init__gzip.GzipFile.__init__ø	
__init__gzip.GzipFile.__init__"
None*(
self
gzip.GzipFile"gzip.GzipFile*≈
filename∂
oUnion[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],None]∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath
None*ç
modeÇ
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"gzip._ReadBinaryMode*1
compresslevel
builtins.int"builtins.int *n
fileobj_
!Union[gzip._ReadableFileobj,None].
gzip._ReadableFileobj"gzip._ReadableFileobj
None *W
mtimeJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX˜
__init__gzip.GzipFile.__init__"
None*(
self
gzip.GzipFile"gzip.GzipFile*ç
modeÇ
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"gzip._ReadBinaryMode*1
compresslevel
builtins.int"builtins.int *n
fileobj_
!Union[gzip._ReadableFileobj,None].
gzip._ReadableFileobj"gzip._ReadableFileobj
None *W
mtimeJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX÷
__init__gzip.GzipFile.__init__"
None*(
self
gzip.GzipFile"gzip.GzipFile*≈
filename∂
oUnion[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],None]∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath
None*§
modeô
ïTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]Â
äUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"gzip._WriteBinaryMode*1
compresslevel
builtins.int"builtins.int *n
fileobj_
!Union[gzip._WritableFileobj,None].
gzip._WritableFileobj"gzip._WritableFileobj
None *W
mtimeJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadXé
__init__gzip.GzipFile.__init__"
None*(
self
gzip.GzipFile"gzip.GzipFile*§
modeô
ïTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]Â
äUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"gzip._WriteBinaryMode*1
compresslevel
builtins.int"builtins.int *n
fileobj_
!Union[gzip._WritableFileobj,None].
gzip._WritableFileobj"gzip._WritableFileobj
None *W
mtimeJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadXÀ
__init__gzip.GzipFile.__init__"
None*(
self
gzip.GzipFile"gzip.GzipFile*«
filename∂
oUnion[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],None]∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath
None *P
modeD
Union[builtins.str,None]
builtins.str"builtins.str
None *1
compresslevel
builtins.int"builtins.int *µ
fileobj•
7Union[gzip._ReadableFileobj,gzip._WritableFileobj,None].
gzip._ReadableFileobj"gzip._ReadableFileobj.
gzip._WritableFileobj"gzip._WritableFileobj
None *W
mtimeJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadXra
	myfileobjgzip.GzipFile.myfileobj;
Union[io.FileIO,None]
	io.FileIO"	io.FileIO
Noner≈
modegzip.GzipFile.mode®
2Union[Literal[builtins.int],Literal[builtins.int]]7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.intr8
namegzip.GzipFile.name
builtins.str"builtins.strrD
compressgzip.GzipFile.compress 
zlib._Compress"zlib._Compressrπ
fileobjgzip.GzipFile.fileobjñ
2Union[gzip._ReadableFileobj,gzip._WritableFileobj].
gzip._ReadableFileobj"gzip._ReadableFileobj.
gzip._WritableFileobj"gzip._WritableFileobjr6
crcgzip.GzipFile.crc
builtins.int"builtins.int†
TemporaryDirectorytempfile.TemporaryDirectory"builtins.object*◊
cleanup#tempfile.TemporaryDirectory.cleanup"
None*ú
selfë
*tempfile.TemporaryDirectory[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"tempfile.TemporaryDirectory*ë
	__enter__%tempfile.TemporaryDirectory.__enter__"F
typing.AnyStr"
builtins.object"builtins.object"builtins.object*îë
*tempfile.TemporaryDirectory[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"tempfile.TemporaryDirectory*™
__exit__$tempfile.TemporaryDirectory.__exit__"
None*îë
*tempfile.TemporaryDirectory[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"tempfile.TemporaryDirectory*ìê
(Union[Type[builtins.BaseException],None]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type
None*db
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*[Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None2Ã
__init__$tempfile.TemporaryDirectory.__init__∂
__init__$tempfile.TemporaryDirectory.__init__"
None*p
selff
)tempfile.TemporaryDirectory[builtins.str]
builtins.str"builtins.str"tempfile.TemporaryDirectory*R
suffixD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
prefixD
Union[builtins.str,None]
builtins.str"builtins.str
None * 
diræ
DUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],None]È
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath
None 0:typing.overloadX‡
__init__$tempfile.TemporaryDirectory.__init__"
None*v
selfl
+tempfile.TemporaryDirectory[builtins.bytes] 
builtins.bytes"builtins.bytes"tempfile.TemporaryDirectory*X
suffixJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None *X
prefixJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None *‚
dir÷
HUnion[TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]],None]˝
<TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]]•
1Union[builtins.bytes,os.PathLike[builtins.bytes]] 
builtins.bytes"builtins.bytesL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.BytesPath
None 0:typing.overloadXPrp
name tempfile.TemporaryDirectory.nameF
typing.AnyStr"
builtins.object"builtins.object"builtins.object∆
existsgenericpath.exists"
builtins.bool"builtins.bool*á
path¸
ÇTypeAlias[Union[builtins.int,TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]]]“
wUnion[builtins.int,TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]]
builtins.int"builtins.int∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath"_typeshed.FileDescriptorOrPath¯
check_random_state+sklearn.utils.validation.check_random_state"B
numpy.random.mtrand.RandomState"numpy.random.mtrand.RandomState*
seedÂ
ùUnion[None,TypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]],numpy.random.mtrand.RandomState]
NoneÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.IntB
numpy.random.mtrand.RandomState"numpy.random.mtrand.RandomState™
get_data_home$sklearn.datasets._base.get_data_home"
builtins.str"builtins.str*U
	data_homeD
Union[None,builtins.str]
None
builtins.str"builtins.str ≤

load_descr!sklearn.datasets._base.load_descr"
builtins.str"builtins.str*1
descr_file_name
builtins.str"builtins.str*0
descr_module
builtins.str"builtins.str ˝
fetch_covtype'sklearn.datasets._covtype.fetch_covtype"¢
åUnion[sklearn.utils._bunch.Bunch,Tuple[sklearn.utils._bunch.Bunch,builtins.tuple[Any]],Tuple[numpy.ndarray[Any,Any],numpy.ndarray[Any,Any]]]8
sklearn.utils._bunch.Bunch"sklearn.utils._bunch.Bunch£
5Tuple[sklearn.utils._bunch.Bunch,builtins.tuple[Any]]8
sklearn.utils._bunch.Bunch"sklearn.utils._bunch.Bunch.
builtins.tuple[Any]
Any"builtins.tupleÆ
4Tuple[numpy.ndarray[Any,Any],numpy.ndarray[Any,Any]]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*U
	data_homeD
Union[None,builtins.str]
None
builtins.str"builtins.str *9
download_if_missing
builtins.bool"builtins.bool *˙
random_stateÂ
ùUnion[numpy.random.mtrand.RandomState,None,TypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]]B
numpy.random.mtrand.RandomState"numpy.random.mtrand.RandomState
NoneÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *-
shuffle
builtins.bool"builtins.bool *0

return_X_y
builtins.bool"builtins.bool *.
as_frame
builtins.bool"builtins.bool "Ω

joinposixpath.joiní
joinposixpath.join"
builtins.str"builtins.str*
builtins.str"builtins.str*'
paths
builtins.str"builtins.str0:typing.overloadX∞
joinposixpath.join"
builtins.str"builtins.str*ÏÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*ı
pathsÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath0:typing.overloadX‹
joinposixpath.join" 
builtins.bytes"builtins.bytes*Ä˝
<TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]]•
1Union[builtins.bytes,os.PathLike[builtins.bytes]] 
builtins.bytes"builtins.bytesL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.BytesPath*â
paths˝
<TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]]•
1Union[builtins.bytes,os.PathLike[builtins.bytes]] 
builtins.bytes"builtins.bytesL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.BytesPath0:typing.overloadX*ï
__annotations__)sklearn.datasets._covtype.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*3
joblib sklearn.datasets._covtype.joblib
Any*
npnumpy *g
RemoteFileMetadata)sklearn.datasets._base.RemoteFileMetadata&
builtins.ellipsis"builtins.ellipsis*T
ARCHIVE!sklearn.datasets._covtype.ARCHIVE&
builtins.ellipsis"builtins.ellipsis*R
logger sklearn.datasets._covtype.logger&
builtins.ellipsis"builtins.ellipsis*f
FEATURE_NAMES'sklearn.datasets._covtype.FEATURE_NAMES,
builtins.list[Any]
Any"builtins.list*d
TARGET_NAMES&sklearn.datasets._covtype.TARGET_NAMES,
builtins.list[Any]
Any"builtins.list