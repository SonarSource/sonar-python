
#torchvision.models.detection._utilsÖª
Tensortorch.Tensor"*SonarPythonAnalyzerFakeStub.CustomStubBase*t
shapetorch.Tensor.shape"

torch.Size"
torch.Size*&
self
torch.Tensor"torch.Tensor0:builtins.property`*r
sizetorch.Tensor.size"

torch.Size"
torch.Size*&
self
torch.Tensor"torch.Tensor0:builtins.property`*v
dtypetorch.Tensor.dtype"
torch.dtype"torch.dtype*&
self
torch.Tensor"torch.Tensor0:builtins.property`*z
devicetorch.Tensor.device"
torch.device"torch.device*&
self
torch.Tensor"torch.Tensor0:builtins.property`*v
ndimtorch.Tensor.ndim"
builtins.int"builtins.int*&
self
torch.Tensor"torch.Tensor0:builtins.property`*v
datatorch.Tensor.data"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor0:builtins.property`*û
gradtorch.Tensor.grad"D
Union[torch.Tensor,None]
torch.Tensor"torch.Tensor
None*&
self
torch.Tensor"torch.Tensor0:builtins.property`*~
is_leaftorch.Tensor.is_leaf"
builtins.bool"builtins.bool*&
self
torch.Tensor"torch.Tensor0:builtins.property`*g
grad_fntorch.Tensor.grad_fn"
Any*&
self
torch.Tensor"torch.Tensor0:builtins.property`*Ó
sizetorch.Tensor.size"Z
Union[torch.Size,builtins.int]

torch.Size"
torch.Size
builtins.int"builtins.int*&
self
torch.Tensor"torch.Tensor*O
dimD
Union[builtins.int,None]
builtins.int"builtins.int
None *]
dimtorch.Tensor.dim"
builtins.int"builtins.int*&
self
torch.Tensor"torch.Tensor*a
numeltorch.Tensor.numel"
builtins.int"builtins.int*&
self
torch.Tensor"torch.Tensor*o
element_sizetorch.Tensor.element_size"
builtins.int"builtins.int*&
self
torch.Tensor"torch.Tensor*g
nelementtorch.Tensor.nelement"
builtins.int"builtins.int*&
self
torch.Tensor"torch.Tensor*è
totorch.Tensor.to"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
deviceq
,Union[UnboundType[device],builtins.str,None]
UnboundType[device]
builtins.str"builtins.str
None *Q
dtypeD
Union[UnboundType[dtype],None]
UnboundType[dtype]
None *2
non_blocking
builtins.bool"builtins.bool **
copy
builtins.bool"builtins.bool *ﬁ
cudatorch.Tensor.cuda"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*}
deviceo
%Union[builtins.int,builtins.str,None]
builtins.int"builtins.int
builtins.str"builtins.str
None *]
cputorch.Tensor.cpu"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*›
typetorch.Tensor.type"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*|
dtypeo
+Union[UnboundType[dtype],builtins.str,None]
UnboundType[dtype]
builtins.str"builtins.str
None *a
floattorch.Tensor.float"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*c
doubletorch.Tensor.double"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*]
inttorch.Tensor.int"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*_
longtorch.Tensor.long"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*_
booltorch.Tensor.bool"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*Ä
viewtorch.Tensor.view"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
shape
UnboundType[int]*Ü
reshapetorch.Tensor.reshape"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
shape
UnboundType[int]*Ü
resize_torch.Tensor.resize_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
sizes
UnboundType[int]*≤
squeezetorch.Tensor.squeeze"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*K
dim@
Union[UnboundType[int],None]
UnboundType[int]
None *à
	unsqueezetorch.Tensor.unsqueeze"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
dim
UnboundType[int]*©
	transposetorch.Tensor.transpose"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
dim0
UnboundType[int]*
dim1
UnboundType[int]*Ö
permutetorch.Tensor.permute"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
dims
UnboundType[int]*±
flattentorch.Tensor.flatten"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*%
	start_dim
UnboundType[int] *#
end_dim
UnboundType[int] *p
__getitem__torch.Tensor.__getitem__"
torch.Tensor"torch.Tensor*
torch.Tensor"torch.Tensor*	
Any*g
__setitem__torch.Tensor.__setitem__"
None*
torch.Tensor"torch.Tensor*	
Any*	
Any*£
selecttorch.Tensor.select"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
dim
UnboundType[int]*
index
UnboundType[int]*∑
index_selecttorch.Tensor.index_select"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
dim
UnboundType[int]*'
index
torch.Tensor"torch.Tensor*ô
masked_selecttorch.Tensor.masked_select"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*&
mask
torch.Tensor"torch.Tensor*ﬁ
addtorch.Tensor.add"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*ì
otherá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*i
alpha\
*Union[UnboundType[float],UnboundType[int]]
UnboundType[float]
UnboundType[int] *‡
add_torch.Tensor.add_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*ì
otherá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*i
alpha\
*Union[UnboundType[float],UnboundType[int]]
UnboundType[float]
UnboundType[int] *ﬁ
subtorch.Tensor.sub"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*ì
otherá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*i
alpha\
*Union[UnboundType[float],UnboundType[int]]
UnboundType[float]
UnboundType[int] *‡
sub_torch.Tensor.sub_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*ì
otherá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*i
alpha\
*Union[UnboundType[float],UnboundType[int]]
UnboundType[float]
UnboundType[int] *Û
multorch.Tensor.mul"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*ì
otherá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*ı
mul_torch.Tensor.mul_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*ì
otherá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*Û
divtorch.Tensor.div"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*ì
otherá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*ı
div_torch.Tensor.div_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*ì
otherá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*ˆ
powtorch.Tensor.pow"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*ñ
exponentá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*¯
pow_torch.Tensor.pow_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*ñ
exponentá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*_
sqrttorch.Tensor.sqrt"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*a
sqrt_torch.Tensor.sqrt_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*]
abstorch.Tensor.abs"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*_
abs_torch.Tensor.abs_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*]
negtorch.Tensor.neg"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*_
neg_torch.Tensor.neg_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*]
exptorch.Tensor.exp"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*_
exp_torch.Tensor.exp_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*]
logtorch.Tensor.log"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*_
log_torch.Tensor.log_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*]
sintorch.Tensor.sin"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*_
sin_torch.Tensor.sin_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*]
costorch.Tensor.cos"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*_
cos_torch.Tensor.cos_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*]
tantorch.Tensor.tan"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*_
tan_torch.Tensor.tan_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*_
sinhtorch.Tensor.sinh"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*a
sinh_torch.Tensor.sinh_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*_
coshtorch.Tensor.cosh"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*a
cosh_torch.Tensor.cosh_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*_
tanhtorch.Tensor.tanh"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*a
tanh_torch.Tensor.tanh_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*a
floortorch.Tensor.floor"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*c
floor_torch.Tensor.floor_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*_
ceiltorch.Tensor.ceil"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*a
ceil_torch.Tensor.ceil_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*a
roundtorch.Tensor.round"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*c
round_torch.Tensor.round_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*a
trunctorch.Tensor.trunc"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*c
trunc_torch.Tensor.trunc_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*_
fractorch.Tensor.frac"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*a
frac_torch.Tensor.frac_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*Ÿ
clamptorch.Tensor.clamp"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*z
mino
+Union[torch.Tensor,UnboundType[float],None]
torch.Tensor"torch.Tensor
UnboundType[float]
None *z
maxo
+Union[torch.Tensor,UnboundType[float],None]
torch.Tensor"torch.Tensor
UnboundType[float]
None *€
clamp_torch.Tensor.clamp_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*z
mino
+Union[torch.Tensor,UnboundType[float],None]
torch.Tensor"torch.Tensor
UnboundType[float]
None *z
maxo
+Union[torch.Tensor,UnboundType[float],None]
torch.Tensor"torch.Tensor
UnboundType[float]
None *e
sigmoidtorch.Tensor.sigmoid"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*g
sigmoid_torch.Tensor.sigmoid_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*_
relutorch.Tensor.relu"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*a
relu_torch.Tensor.relu_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*ô

leaky_relutorch.Tensor.leaky_relu"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*,
negative_slope
UnboundType[float] *õ
leaky_relu_torch.Tensor.leaky_relu_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*,
negative_slope
UnboundType[float] *Ñ
softmaxtorch.Tensor.softmax"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
dim
UnboundType[int]*å
log_softmaxtorch.Tensor.log_softmax"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
dim
UnboundType[int]*˛
masked_filltorch.Tensor.masked_fill"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*&
mask
torch.Tensor"torch.Tensor*g
value\
*Union[UnboundType[float],UnboundType[int]]
UnboundType[float]
UnboundType[int]*Ä
masked_fill_torch.Tensor.masked_fill_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*&
mask
torch.Tensor"torch.Tensor*g
value\
*Union[UnboundType[float],UnboundType[int]]
UnboundType[float]
UnboundType[int]*ú

index_filltorch.Tensor.index_fill"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
dim
UnboundType[int]*'
index
torch.Tensor"torch.Tensor*g
value\
*Union[UnboundType[float],UnboundType[int]]
UnboundType[float]
UnboundType[int]*û
index_fill_torch.Tensor.index_fill_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
dim
UnboundType[int]*'
index
torch.Tensor"torch.Tensor*g
value\
*Union[UnboundType[float],UnboundType[int]]
UnboundType[float]
UnboundType[int]*ò
scattertorch.Tensor.scatter"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
dim
UnboundType[int]*'
index
torch.Tensor"torch.Tensor*i
src`
&Union[torch.Tensor,UnboundType[float]]
torch.Tensor"torch.Tensor
UnboundType[float]*ö
scatter_torch.Tensor.scatter_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
dim
UnboundType[int]*'
index
torch.Tensor"torch.Tensor*i
src`
&Union[torch.Tensor,UnboundType[float]]
torch.Tensor"torch.Tensor
UnboundType[float]*±
copytorch.Tensor.copy"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*%
src
torch.Tensor"torch.Tensor*)
non_blocking
UnboundType[bool] *É
mmtorch.Tensor.mm"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*&
mat2
torch.Tensor"torch.Tensor*Ö
bmmtorch.Tensor.bmm"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*&
mat2
torch.Tensor"torch.Tensor*å
matmultorch.Tensor.matmul"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*'
other
torch.Tensor"torch.Tensor*Ü
dottorch.Tensor.dot"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*'
other
torch.Tensor"torch.Tensor*Ω
sumtorch.Tensor.sum"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*∑
dim´
=Union[UnboundType[int],builtins.tuple[UnboundType[int]],None]
UnboundType[int]H
 builtins.tuple[UnboundType[int]]
UnboundType[int]"builtins.tuple
None *$
keepdim
UnboundType[bool] *ø
meantorch.Tensor.mean"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*∑
dim´
=Union[UnboundType[int],builtins.tuple[UnboundType[int]],None]
UnboundType[int]H
 builtins.tuple[UnboundType[int]]
UnboundType[int]"builtins.tuple
None *$
keepdim
UnboundType[bool] *Ì
maxtorch.Tensor.max"∏
4Union[torch.Tensor,Tuple[torch.Tensor,torch.Tensor]]
torch.Tensor"torch.Tensor`
 Tuple[torch.Tensor,torch.Tensor]
torch.Tensor"torch.Tensor
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*K
dim@
Union[UnboundType[int],None]
UnboundType[int]
None *$
keepdim
UnboundType[bool] *Ì
mintorch.Tensor.min"∏
4Union[torch.Tensor,Tuple[torch.Tensor,torch.Tensor]]
torch.Tensor"torch.Tensor`
 Tuple[torch.Tensor,torch.Tensor]
torch.Tensor"torch.Tensor
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*K
dim@
Union[UnboundType[int],None]
UnboundType[int]
None *$
keepdim
UnboundType[bool] *Ω
stdtorch.Tensor.std"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*∑
dim´
=Union[UnboundType[int],builtins.tuple[UnboundType[int]],None]
UnboundType[int]H
 builtins.tuple[UnboundType[int]]
UnboundType[int]"builtins.tuple
None *$
keepdim
UnboundType[bool] *Ω
vartorch.Tensor.var"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*∑
dim´
=Union[UnboundType[int],builtins.tuple[UnboundType[int]],None]
UnboundType[int]H
 builtins.tuple[UnboundType[int]]
UnboundType[int]"builtins.tuple
None *$
keepdim
UnboundType[bool] *Ò
eqtorch.Tensor.eq"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*ì
otherá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*Ò
netorch.Tensor.ne"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*ì
otherá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*Ò
lttorch.Tensor.lt"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*ì
otherá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*Ò
letorch.Tensor.le"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*ì
otherá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*Ò
gttorch.Tensor.gt"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*ì
otherá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*Ò
getorch.Tensor.ge"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*ì
otherá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*a
clonetorch.Tensor.clone"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*c
detachtorch.Tensor.detach"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*e
detach_torch.Tensor.detach_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*≥
copy_torch.Tensor.copy_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*%
src
torch.Tensor"torch.Tensor*)
non_blocking
UnboundType[bool] *¨
backwardtorch.Tensor.backward"
None*&
self
torch.Tensor"torch.Tensor*T
gradientD
Union[torch.Tensor,None]
torch.Tensor"torch.Tensor
None *V
retain_graphB
Union[UnboundType[bool],None]
UnboundType[bool]
None *)
create_graph
UnboundType[bool] *ü
requires_grad_torch.Tensor.requires_grad_"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor**
requires_grad
UnboundType[bool] *Y
retain_gradtorch.Tensor.retain_grad"
None*&
self
torch.Tensor"torch.Tensor*…
itemtorch.Tensor.item"Ö
<Union[UnboundType[int],UnboundType[float],UnboundType[bool]]
UnboundType[int]
UnboundType[float]
UnboundType[bool]*&
self
torch.Tensor"torch.Tensor*s
tolisttorch.Tensor.tolist",
builtins.list[Any]
Any"builtins.list*&
self
torch.Tensor"torch.Tensor*L
numpytorch.Tensor.numpy"
Any*&
self
torch.Tensor"torch.Tensor*Í
__add__torch.Tensor.__add__"
torch.Tensor"torch.Tensor*
torch.Tensor"torch.Tensor*äá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*Í
__sub__torch.Tensor.__sub__"
torch.Tensor"torch.Tensor*
torch.Tensor"torch.Tensor*äá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*Í
__mul__torch.Tensor.__mul__"
torch.Tensor"torch.Tensor*
torch.Tensor"torch.Tensor*äá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*Ú
__truediv__torch.Tensor.__truediv__"
torch.Tensor"torch.Tensor*
torch.Tensor"torch.Tensor*äá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*Í
__pow__torch.Tensor.__pow__"
torch.Tensor"torch.Tensor*
torch.Tensor"torch.Tensor*äá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*]
__neg__torch.Tensor.__neg__"
torch.Tensor"torch.Tensor*
torch.Tensor"torch.Tensor*f
__eq__torch.Tensor.__eq__"
torch.Tensor"torch.Tensor*
torch.Tensor"torch.Tensor*	
Any*f
__ne__torch.Tensor.__ne__"
torch.Tensor"torch.Tensor*
torch.Tensor"torch.Tensor*	
Any*Ë
__lt__torch.Tensor.__lt__"
torch.Tensor"torch.Tensor*
torch.Tensor"torch.Tensor*äá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*Ë
__le__torch.Tensor.__le__"
torch.Tensor"torch.Tensor*
torch.Tensor"torch.Tensor*äá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*Ë
__gt__torch.Tensor.__gt__"
torch.Tensor"torch.Tensor*
torch.Tensor"torch.Tensor*äá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*Ë
__ge__torch.Tensor.__ge__"
torch.Tensor"torch.Tensor*
torch.Tensor"torch.Tensor*äá
7Union[torch.Tensor,UnboundType[float],UnboundType[int]]
torch.Tensor"torch.Tensor
UnboundType[float]
UnboundType[int]*U
__len__torch.Tensor.__len__"
UnboundType[int]*
torch.Tensor"torch.Tensor*]
__str__torch.Tensor.__str__"
builtins.str"builtins.str*
torch.Tensor"torch.Tensor*_
__repr__torch.Tensor.__repr__"
builtins.str"builtins.str*
torch.Tensor"torch.Tensor*‘

new_tensortorch.Tensor.new_tensor"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
data
Any*Q
dtypeD
Union[UnboundType[dtype],None]
UnboundType[dtype]
None *
deviceq
,Union[builtins.str,UnboundType[device],None]
builtins.str"builtins.str
UnboundType[device]
None *W
requires_gradB
Union[UnboundType[bool],None]
UnboundType[bool]
None *'

pin_memory
UnboundType[bool] *±
flattentorch.Tensor.flatten"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*%
	start_dim
UnboundType[int] *#
end_dim
UnboundType[int] 2–
requires_gradtorch.Tensor.requires_gradå
requires_gradtorch.Tensor.requires_grad"
builtins.bool"builtins.bool*&
self
torch.Tensor"torch.Tensor0:builtins.propertyX`ì
requires_gradtorch.Tensor.requires_grad"
None*&
self
torch.Tensor"torch.Tensor*)
value
builtins.bool"builtins.bool0:.setterû

BalancedPositiveNegativeSamplerCtorchvision.models.detection._utils.BalancedPositiveNegativeSampler"*SonarPythonAnalyzerFakeStub.CustomStubBase*Î
__init__Ltorchvision.models.detection._utils.BalancedPositiveNegativeSampler.__init__"
None*ï
selfä
Ctorchvision.models.detection._utils.BalancedPositiveNegativeSampler"Ctorchvision.models.detection._utils.BalancedPositiveNegativeSampler*6
batch_size_per_image
builtins.int"builtins.int*7
positive_fraction 
builtins.float"builtins.float*´
__call__Ltorchvision.models.detection._utils.BalancedPositiveNegativeSampler.__call__"⁄
>Tuple[builtins.list[torch.Tensor],builtins.list[torch.Tensor]]J
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.listJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*ï
selfä
Ctorchvision.models.detection._utils.BalancedPositiveNegativeSampler"Ctorchvision.models.detection._utils.BalancedPositiveNegativeSampler*\
matched_idxsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.listry
batch_size_per_imageXtorchvision.models.detection._utils.BalancedPositiveNegativeSampler.batch_size_per_image
Anyrs
positive_fractionUtorchvision.models.detection._utils.BalancedPositiveNegativeSampler.positive_fraction
AnyÆ
BoxCoder,torchvision.models.detection._utils.BoxCoder"*SonarPythonAnalyzerFakeStub.CustomStubBase*À
__init__5torchvision.models.detection._utils.BoxCoder.__init__"
None*f
self\
,torchvision.models.detection._utils.BoxCoder",torchvision.models.detection._utils.BoxCoder*‹
weightsŒ
BTuple[builtins.float,builtins.float,builtins.float,builtins.float] 
builtins.float"builtins.float 
builtins.float"builtins.float 
builtins.float"builtins.float 
builtins.float"builtins.float*7
bbox_xform_clip 
builtins.float"builtins.float *≠
encode3torchvision.models.detection._utils.BoxCoder.encode"J
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*f
self\
,torchvision.models.detection._utils.BoxCoder",torchvision.models.detection._utils.BoxCoder*_
reference_boxesJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*Y
	proposalsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*±
encode_single:torchvision.models.detection._utils.BoxCoder.encode_single"
torch.Tensor"torch.Tensor*f
self\
,torchvision.models.detection._utils.BoxCoder",torchvision.models.detection._utils.BoxCoder*1
reference_boxes
torch.Tensor"torch.Tensor*+
	proposals
torch.Tensor"torch.Tensor*«
decode3torchvision.models.detection._utils.BoxCoder.decode"
torch.Tensor"torch.Tensor*f
self\
,torchvision.models.detection._utils.BoxCoder",torchvision.models.detection._utils.BoxCoder*+
	rel_codes
torch.Tensor"torch.Tensor*U
boxesJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*ß
decode_single:torchvision.models.detection._utils.BoxCoder.decode_single"
torch.Tensor"torch.Tensor*f
self\
,torchvision.models.detection._utils.BoxCoder",torchvision.models.detection._utils.BoxCoder*+
	rel_codes
torch.Tensor"torch.Tensor*'
boxes
torch.Tensor"torch.TensorrH
weights4torchvision.models.detection._utils.BoxCoder.weights
AnyrX
bbox_xform_clip<torchvision.models.detection._utils.BoxCoder.bbox_xform_clip
Anyª
BoxLinearCoder2torchvision.models.detection._utils.BoxLinearCoder"*SonarPythonAnalyzerFakeStub.CustomStubBase*˛
__init__;torchvision.models.detection._utils.BoxLinearCoder.__init__"
None*r
selfh
2torchvision.models.detection._utils.BoxLinearCoder"2torchvision.models.detection._utils.BoxLinearCoder*7
normalize_by_size
builtins.bool"builtins.bool *µ
encode9torchvision.models.detection._utils.BoxLinearCoder.encode"
torch.Tensor"torch.Tensor*r
selfh
2torchvision.models.detection._utils.BoxLinearCoder"2torchvision.models.detection._utils.BoxLinearCoder*1
reference_boxes
torch.Tensor"torch.Tensor*+
	proposals
torch.Tensor"torch.Tensor*´
decode9torchvision.models.detection._utils.BoxLinearCoder.decode"
torch.Tensor"torch.Tensor*r
selfh
2torchvision.models.detection._utils.BoxLinearCoder"2torchvision.models.detection._utils.BoxLinearCoder*+
	rel_codes
torch.Tensor"torch.Tensor*'
boxes
torch.Tensor"torch.Tensorrb
normalize_by_sizeDtorchvision.models.detection._utils.BoxLinearCoder.normalize_by_size
AnyÅ
Matcher+torchvision.models.detection._utils.Matcher"*SonarPythonAnalyzerFakeStub.CustomStubBase*‹
__init__4torchvision.models.detection._utils.Matcher.__init__"
None*d
selfZ
+torchvision.models.detection._utils.Matcher"+torchvision.models.detection._utils.Matcher*4
high_threshold 
builtins.float"builtins.float*3
low_threshold 
builtins.float"builtins.float*?
allow_low_quality_matches
builtins.bool"builtins.bool *¸
__call__4torchvision.models.detection._utils.Matcher.__call__"
torch.Tensor"torch.Tensor*d
selfZ
+torchvision.models.detection._utils.Matcher"+torchvision.models.detection._utils.Matcher*6
match_quality_matrix
torch.Tensor"torch.Tensor*‚
set_low_quality_matches_Dtorchvision.models.detection._utils.Matcher.set_low_quality_matches_"
None*d
selfZ
+torchvision.models.detection._utils.Matcher"+torchvision.models.detection._utils.Matcher*)
matches
torch.Tensor"torch.Tensor*-
all_matches
torch.Tensor"torch.Tensor*6
match_quality_matrix
torch.Tensor"torch.Tensorrt
BELOW_LOW_THRESHOLD?torchvision.models.detection._utils.Matcher.BELOW_LOW_THRESHOLD
builtins.int"builtins.intrr
BETWEEN_THRESHOLDS>torchvision.models.detection._utils.Matcher.BETWEEN_THRESHOLDS
builtins.int"builtins.intrW
__annotations__;torchvision.models.detection._utils.Matcher.__annotations__
AnyrU
high_threshold:torchvision.models.detection._utils.Matcher.high_threshold
AnyrS
low_threshold9torchvision.models.detection._utils.Matcher.low_threshold
Anyrk
allow_low_quality_matchesEtorchvision.models.detection._utils.Matcher.allow_low_quality_matches
Anyﬁ

SSDMatcher.torchvision.models.detection._utils.SSDMatcher"+torchvision.models.detection._utils.Matcher*Í
__init__7torchvision.models.detection._utils.SSDMatcher.__init__"
None*j
self`
.torchvision.models.detection._utils.SSDMatcher".torchvision.models.detection._utils.SSDMatcher*/
	threshold 
builtins.float"builtins.float*Ö
__call__7torchvision.models.detection._utils.SSDMatcher.__call__"
torch.Tensor"torch.Tensor*j
self`
.torchvision.models.detection._utils.SSDMatcher".torchvision.models.detection._utils.SSDMatcher*6
match_quality_matrix
torch.Tensor"torch.TensorÈ
encode_boxes0torchvision.models.detection._utils.encode_boxes"
torch.Tensor"torch.Tensor*1
reference_boxes
torch.Tensor"torch.Tensor*+
	proposals
torch.Tensor"torch.Tensor*)
weights
torch.Tensor"torch.Tensorƒ
overwrite_eps1torchvision.models.detection._utils.overwrite_eps"
None*K
model@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*)
eps 
builtins.float"builtins.float◊
retrieve_out_channels9torchvision.models.detection._utils.retrieve_out_channels"J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*K
model@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*j
size`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*ü
__annotations__3torchvision.models.detection._utils.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
nntorch.nn *S
FrozenBatchNorm2d5torchvision.models.detection._utils.FrozenBatchNorm2d
Any*[
complete_box_iou_loss9torchvision.models.detection._utils.complete_box_iou_loss
Any*[
distance_box_iou_loss9torchvision.models.detection._utils.distance_box_iou_loss
Any*a
generalized_box_iou_loss<torchvision.models.detection._utils.generalized_box_iou_loss
Any