
anyio._core._socketsä
connect_unix!anyio._core._sockets.connect_unix"Ø
=typing.Coroutine[Any,Any,anyio.abc._sockets.UNIXSocketStream]
Any
AnyJ
#anyio.abc._sockets.UNIXSocketStream"#anyio.abc._sockets.UNIXSocketStream"typing.Coroutine*¢
pathó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeHæ
create_tcp_listener(anyio._core._sockets.create_tcp_listener"∂
^typing.Coroutine[Any,Any,anyio.streams.stapled.MultiListener[anyio.abc._sockets.SocketStream]]
Any
AnyØ
Danyio.streams.stapled.MultiListener[anyio.abc._sockets.SocketStream]B
anyio.abc._sockets.SocketStream"anyio.abc._sockets.SocketStream"#anyio.streams.stapled.MultiListener"typing.Coroutine*Æ

local_hostõ
VUnion[TypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]],None]¥
JTypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]]¡
?Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]
builtins.str"builtins.str.
ipaddress.IPv4Address"ipaddress.IPv4Address.
ipaddress.IPv6Address"ipaddress.IPv6Address" anyio.abc._sockets.IPAddressType
None *.

local_port
builtins.int"builtins.int *Å
familyÚ
kTypeAlias[Union[Literal[socket.AddressFamily],Literal[socket.AddressFamily],Literal[socket.AddressFamily]]]◊
`Union[Literal[socket.AddressFamily],Literal[socket.AddressFamily],Literal[socket.AddressFamily]]O
Literal[socket.AddressFamily]	,
socket.AddressFamily"socket.AddressFamilyO
Literal[socket.AddressFamily]	,
socket.AddressFamily"socket.AddressFamilyO
Literal[socket.AddressFamily]	,
socket.AddressFamily"socket.AddressFamily"'anyio._core._sockets.AnyIPAddressFamily *+
backlog
builtins.int"builtins.int *0

reuse_port
builtins.bool"builtins.bool Hì
create_unix_listener)anyio._core._sockets.create_unix_listener"©
;typing.Coroutine[Any,Any,anyio.abc._sockets.SocketListener]
Any
AnyF
!anyio.abc._sockets.SocketListener"!anyio.abc._sockets.SocketListener"typing.Coroutine*¢
pathó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike*P
modeD
Union[builtins.int,None]
builtins.int"builtins.int
None *+
backlog
builtins.int"builtins.int HÒ	
create_udp_socket&anyio._core._sockets.create_udp_socket"ö
6typing.Coroutine[Any,Any,anyio.abc._sockets.UDPSocket]
Any
Any<
anyio.abc._sockets.UDPSocket"anyio.abc._sockets.UDPSocket"typing.Coroutine*Å
familyÚ
kTypeAlias[Union[Literal[socket.AddressFamily],Literal[socket.AddressFamily],Literal[socket.AddressFamily]]]◊
`Union[Literal[socket.AddressFamily],Literal[socket.AddressFamily],Literal[socket.AddressFamily]]O
Literal[socket.AddressFamily]	,
socket.AddressFamily"socket.AddressFamilyO
Literal[socket.AddressFamily]	,
socket.AddressFamily"socket.AddressFamilyO
Literal[socket.AddressFamily]	,
socket.AddressFamily"socket.AddressFamily"'anyio._core._sockets.AnyIPAddressFamily *Æ

local_hostõ
VUnion[TypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]],None]¥
JTypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]]¡
?Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]
builtins.str"builtins.str.
ipaddress.IPv4Address"ipaddress.IPv4Address.
ipaddress.IPv6Address"ipaddress.IPv6Address" anyio.abc._sockets.IPAddressType
None *.

local_port
builtins.int"builtins.int *0

reuse_port
builtins.bool"builtins.bool Hò
create_connected_udp_socket0anyio._core._sockets.create_connected_udp_socket"µ
?typing.Coroutine[Any,Any,anyio.abc._sockets.ConnectedUDPSocket]
Any
AnyN
%anyio.abc._sockets.ConnectedUDPSocket"%anyio.abc._sockets.ConnectedUDPSocket"typing.Coroutine*∆
remote_host¥
JTypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]]¡
?Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]
builtins.str"builtins.str.
ipaddress.IPv4Address"ipaddress.IPv4Address.
ipaddress.IPv6Address"ipaddress.IPv6Address" anyio.abc._sockets.IPAddressType*-
remote_port
builtins.int"builtins.int*Å
familyÚ
kTypeAlias[Union[Literal[socket.AddressFamily],Literal[socket.AddressFamily],Literal[socket.AddressFamily]]]◊
`Union[Literal[socket.AddressFamily],Literal[socket.AddressFamily],Literal[socket.AddressFamily]]O
Literal[socket.AddressFamily]	,
socket.AddressFamily"socket.AddressFamilyO
Literal[socket.AddressFamily]	,
socket.AddressFamily"socket.AddressFamilyO
Literal[socket.AddressFamily]	,
socket.AddressFamily"socket.AddressFamily"'anyio._core._sockets.AnyIPAddressFamily *Æ

local_hostõ
VUnion[TypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]],None]¥
JTypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]]¡
?Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]
builtins.str"builtins.str.
ipaddress.IPv4Address"ipaddress.IPv4Address.
ipaddress.IPv6Address"ipaddress.IPv6Address" anyio.abc._sockets.IPAddressType
None *.

local_port
builtins.int"builtins.int *0

reuse_port
builtins.bool"builtins.bool Hù
create_unix_datagram_socket0anyio._core._sockets.create_unix_datagram_socket"µ
?typing.Coroutine[Any,Any,anyio.abc._sockets.UNIXDatagramSocket]
Any
AnyN
%anyio.abc._sockets.UNIXDatagramSocket"%anyio.abc._sockets.UNIXDatagramSocket"typing.Coroutine*π

local_path¶
2Union[None,builtins.str,os.PathLike[builtins.str]]
None
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike *V

local_modeD
Union[builtins.int,None]
builtins.int"builtins.int
None H¯
%create_connected_unix_datagram_socket:anyio._core._sockets.create_connected_unix_datagram_socket"–
Htyping.Coroutine[Any,Any,anyio.abc._sockets.ConnectedUNIXDatagramSocket]
Any
Any`
.anyio.abc._sockets.ConnectedUNIXDatagramSocket".anyio.abc._sockets.ConnectedUNIXDatagramSocket"typing.Coroutine*©
remote_pathó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike*π

local_path¶
2Union[None,builtins.str,os.PathLike[builtins.str]]
None
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike *V

local_modeD
Union[builtins.int,None]
builtins.int"builtins.int
None H≤

getaddrinfo anyio._core._sockets.getaddrinfo"¶
ëtyping.Coroutine[Any,Any,builtins.list[Tuple[socket.AddressFamily,socket.SocketKind,builtins.int,builtins.str,Tuple[builtins.str,builtins.int]]]]
Any
AnyÎ
wbuiltins.list[Tuple[socket.AddressFamily,socket.SocketKind,builtins.int,builtins.str,Tuple[builtins.str,builtins.int]]]‡
hTuple[socket.AddressFamily,socket.SocketKind,builtins.int,builtins.str,Tuple[builtins.str,builtins.int]],
socket.AddressFamily"socket.AddressFamily&
socket.SocketKind"socket.SocketKind
builtins.int"builtins.int
builtins.str"builtins.str`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.list"typing.Coroutine*
hostu
'Union[builtins.bytes,builtins.str,None] 
builtins.bytes"builtins.bytes
builtins.str"builtins.str
None*y
porto
%Union[builtins.str,builtins.int,None]
builtins.str"builtins.str
builtins.int"builtins.int
None*Ü
familyx
(Union[builtins.int,socket.AddressFamily]
builtins.int"builtins.int,
socket.AddressFamily"socket.AddressFamily *{
typeo
%Union[builtins.int,socket.SocketKind]
builtins.int"builtins.int&
socket.SocketKind"socket.SocketKind *)
proto
builtins.int"builtins.int *)
flags
builtins.int"builtins.int HÀ
getnameinfo anyio._core._sockets.getnameinfo"®
2typing.Awaitable[Tuple[builtins.str,builtins.str]]`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"typing.Awaitable*√
sockaddr¥
+TypeAlias[Tuple[builtins.str,builtins.int]]`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"!anyio.abc._sockets.IPSockAddrType*)
flags
builtins.int"builtins.int °
wait_socket_readable)anyio._core._sockets.wait_socket_readable"4
typing.Awaitable[None]
None"typing.Awaitable*(
sock
socket.socket"socket.socket°
wait_socket_writable)anyio._core._sockets.wait_socket_writable"4
typing.Awaitable[None]
None"typing.Awaitable*(
sock
socket.socket"socket.socket∏
convert_ipv6_sockaddr*anyio._core._sockets.convert_ipv6_sockaddr"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*ê
sockaddrÅ
bUnion[Tuple[builtins.str,builtins.int,builtins.int,builtins.int],Tuple[builtins.str,builtins.int]]∂
:Tuple[builtins.str,builtins.int,builtins.int,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.intË
setup_unix_local_socket,anyio._core._sockets.setup_unix_local_socket"m
'typing.Coroutine[Any,Any,socket.socket]
Any
Any
socket.socket"socket.socket"typing.Coroutine*±
path¶
2Union[None,builtins.str,os.PathLike[builtins.str]]
None
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike*N
modeD
Union[builtins.int,None]
builtins.int"builtins.int
None**
socktype
builtins.int"builtins.intH"Õ3
connect_tcp anyio._core._sockets.connect_tcpï

connect_tcp anyio._core._sockets.connect_tcp"ó
5typing.Coroutine[Any,Any,anyio.streams.tls.TLSStream]
Any
Any:
anyio.streams.tls.TLSStream"anyio.streams.tls.TLSStream"typing.Coroutine*∆
remote_host¥
JTypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]]¡
?Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]
builtins.str"builtins.str.
ipaddress.IPv4Address"ipaddress.IPv4Address.
ipaddress.IPv6Address"ipaddress.IPv6Address" anyio.abc._sockets.IPAddressType*-
remote_port
builtins.int"builtins.int*Æ

local_hostõ
VUnion[TypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]],None]¥
JTypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]]¡
?Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]
builtins.str"builtins.str.
ipaddress.IPv4Address"ipaddress.IPv4Address.
ipaddress.IPv6Address"ipaddress.IPv6Address" anyio.abc._sockets.IPAddressType
None *]
ssl_contextJ
Union[ssl.SSLContext,None] 
ssl.SSLContext"ssl.SSLContext
None *=
tls_standard_compatible
builtins.bool"builtins.bool *.
tls_hostname
builtins.str"builtins.str*<
happy_eyeballs_delay 
builtins.float"builtins.float 0:typing.overloadHXì

connect_tcp anyio._core._sockets.connect_tcp"ó
5typing.Coroutine[Any,Any,anyio.streams.tls.TLSStream]
Any
Any:
anyio.streams.tls.TLSStream"anyio.streams.tls.TLSStream"typing.Coroutine*∆
remote_host¥
JTypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]]¡
?Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]
builtins.str"builtins.str.
ipaddress.IPv4Address"ipaddress.IPv4Address.
ipaddress.IPv6Address"ipaddress.IPv6Address" anyio.abc._sockets.IPAddressType*-
remote_port
builtins.int"builtins.int*Æ

local_hostõ
VUnion[TypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]],None]¥
JTypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]]¡
?Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]
builtins.str"builtins.str.
ipaddress.IPv4Address"ipaddress.IPv4Address.
ipaddress.IPv6Address"ipaddress.IPv6Address" anyio.abc._sockets.IPAddressType
None *1
ssl_context 
ssl.SSLContext"ssl.SSLContext*=
tls_standard_compatible
builtins.bool"builtins.bool *X
tls_hostnameD
Union[builtins.str,None]
builtins.str"builtins.str
None *<
happy_eyeballs_delay 
builtins.float"builtins.float 0:typing.overloadHXÑ
connect_tcp anyio._core._sockets.connect_tcp"ó
5typing.Coroutine[Any,Any,anyio.streams.tls.TLSStream]
Any
Any:
anyio.streams.tls.TLSStream"anyio.streams.tls.TLSStream"typing.Coroutine*∆
remote_host¥
JTypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]]¡
?Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]
builtins.str"builtins.str.
ipaddress.IPv4Address"ipaddress.IPv4Address.
ipaddress.IPv6Address"ipaddress.IPv6Address" anyio.abc._sockets.IPAddressType*-
remote_port
builtins.int"builtins.int*Æ

local_hostõ
VUnion[TypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]],None]¥
JTypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]]¡
?Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]
builtins.str"builtins.str.
ipaddress.IPv4Address"ipaddress.IPv4Address.
ipaddress.IPv6Address"ipaddress.IPv6Address" anyio.abc._sockets.IPAddressType
None *C
tls:
Literal[builtins.bool]	
builtins.bool"builtins.bool*]
ssl_contextJ
Union[ssl.SSLContext,None] 
ssl.SSLContext"ssl.SSLContext
None *=
tls_standard_compatible
builtins.bool"builtins.bool *X
tls_hostnameD
Union[builtins.str,None]
builtins.str"builtins.str
None *<
happy_eyeballs_delay 
builtins.float"builtins.float 0:typing.overloadHXê
connect_tcp anyio._core._sockets.connect_tcp"£
9typing.Coroutine[Any,Any,anyio.abc._sockets.SocketStream]
Any
AnyB
anyio.abc._sockets.SocketStream"anyio.abc._sockets.SocketStream"typing.Coroutine*∆
remote_host¥
JTypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]]¡
?Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]
builtins.str"builtins.str.
ipaddress.IPv4Address"ipaddress.IPv4Address.
ipaddress.IPv6Address"ipaddress.IPv6Address" anyio.abc._sockets.IPAddressType*-
remote_port
builtins.int"builtins.int*Æ

local_hostõ
VUnion[TypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]],None]¥
JTypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]]¡
?Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]
builtins.str"builtins.str.
ipaddress.IPv4Address"ipaddress.IPv4Address.
ipaddress.IPv6Address"ipaddress.IPv6Address" anyio.abc._sockets.IPAddressType
None *C
tls:
Literal[builtins.bool]	
builtins.bool"builtins.bool*]
ssl_contextJ
Union[ssl.SSLContext,None] 
ssl.SSLContext"ssl.SSLContext
None *=
tls_standard_compatible
builtins.bool"builtins.bool *X
tls_hostnameD
Union[builtins.str,None]
builtins.str"builtins.str
None *<
happy_eyeballs_delay 
builtins.float"builtins.float 0:typing.overloadHX”
connect_tcp anyio._core._sockets.connect_tcp"£
9typing.Coroutine[Any,Any,anyio.abc._sockets.SocketStream]
Any
AnyB
anyio.abc._sockets.SocketStream"anyio.abc._sockets.SocketStream"typing.Coroutine*∆
remote_host¥
JTypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]]¡
?Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]
builtins.str"builtins.str.
ipaddress.IPv4Address"ipaddress.IPv4Address.
ipaddress.IPv6Address"ipaddress.IPv6Address" anyio.abc._sockets.IPAddressType*-
remote_port
builtins.int"builtins.int*Æ

local_hostõ
VUnion[TypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]],None]¥
JTypeAlias[Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]]¡
?Union[builtins.str,ipaddress.IPv4Address,ipaddress.IPv6Address]
builtins.str"builtins.str.
ipaddress.IPv4Address"ipaddress.IPv4Address.
ipaddress.IPv6Address"ipaddress.IPv6Address" anyio.abc._sockets.IPAddressType
None *<
happy_eyeballs_delay 
builtins.float"builtins.float 0:typing.overloadHX*ê
__annotations__$anyio._core._sockets.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*u
IPPROTO_IPV6!anyio._core._sockets.IPPROTO_IPV6B
Union[Any,builtins.int]
Any
builtins.int"builtins.int