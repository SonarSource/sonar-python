
pyspark.sql.groupà
GroupedDatapyspark.sql.group.GroupedData"2pyspark.sql.pandas.group_ops.PandasGroupedOpsMixin*‰
__init__&pyspark.sql.group.GroupedData.__init__"
None*H
self>
pyspark.sql.group.GroupedData"pyspark.sql.group.GroupedData*
jgd
Any*J
dfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*í
__repr__&pyspark.sql.group.GroupedData.__repr__"
builtins.str"builtins.str*@>
pyspark.sql.group.GroupedData"pyspark.sql.group.GroupedData*√
count#pyspark.sql.group.GroupedData.count"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*H
self>
pyspark.sql.group.GroupedData"pyspark.sql.group.GroupedData0:dfapi*Ú
mean"pyspark.sql.group.GroupedData.mean"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*H
self>
pyspark.sql.group.GroupedData"pyspark.sql.group.GroupedData*&
cols
builtins.str"builtins.str0:df_varargs_api*
avg!pyspark.sql.group.GroupedData.avg"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*H
self>
pyspark.sql.group.GroupedData"pyspark.sql.group.GroupedData*&
cols
builtins.str"builtins.str0:df_varargs_api*
max!pyspark.sql.group.GroupedData.max"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*H
self>
pyspark.sql.group.GroupedData"pyspark.sql.group.GroupedData*&
cols
builtins.str"builtins.str0:df_varargs_api*
min!pyspark.sql.group.GroupedData.min"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*H
self>
pyspark.sql.group.GroupedData"pyspark.sql.group.GroupedData*&
cols
builtins.str"builtins.str0:df_varargs_api*
sum!pyspark.sql.group.GroupedData.sum"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*H
self>
pyspark.sql.group.GroupedData"pyspark.sql.group.GroupedData*&
cols
builtins.str"builtins.str0:df_varargs_api*í
pivot#pyspark.sql.group.GroupedData.pivot">
pyspark.sql.group.GroupedData"pyspark.sql.group.GroupedData*H
self>
pyspark.sql.group.GroupedData"pyspark.sql.group.GroupedData*+
	pivot_col
builtins.str"builtins.str*¨
valuesù
nUnion[builtins.list[TypeAlias[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]]],None]û
bbuiltins.list[TypeAlias[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]]]®
STypeAlias[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]]≠
HTypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]ø
=Union[builtins.bool,builtins.float,builtins.int,builtins.str]
builtins.bool"builtins.bool 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str"pyspark._typing.PrimitiveType"pyspark.sql._typing.LiteralType"builtins.list
None 2Ú
agg!pyspark.sql.group.GroupedData.aggá
agg!pyspark.sql.group.GroupedData.agg"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*H
self>
pyspark.sql.group.GroupedData"pyspark.sql.group.GroupedData*A
exprs6
pyspark.sql.column.Column"pyspark.sql.column.Column0:overloadXΩ
agg!pyspark.sql.group.GroupedData.agg"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*H
self>
pyspark.sql.group.GroupedData"pyspark.sql.group.GroupedData*wu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict0:overloadXr3
_jgd"pyspark.sql.group.GroupedData._jgd
Anyrl
_df!pyspark.sql.group.GroupedData._dfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFramerv
session%pyspark.sql.group.GroupedData.sessionD
 pyspark.sql.session.SparkSession" pyspark.sql.session.SparkSession¡
dfapipyspark.sql.group.dfapi"K
CallableType[builtins.function]&
builtins.function"builtins.function*R
fK
CallableType[builtins.function]&
builtins.function"builtins.function”
df_varargs_api pyspark.sql.group.df_varargs_api"K
CallableType[builtins.function]&
builtins.function"builtins.function*R
fK
CallableType[builtins.function]&
builtins.function"builtins.function*
_testpyspark.sql.group._test"
None*ç
__annotations__!pyspark.sql.group.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*3

JavaObjectpyspark.sql.group.JavaObject
Any*p
__all__pyspark.sql.group.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list