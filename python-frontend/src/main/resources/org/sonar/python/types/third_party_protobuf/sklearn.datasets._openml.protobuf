
sklearn.datasets._openml“
closingcontextlib.closing"!contextlib.AbstractContextManager*Ù
__init__contextlib.closing.__init__"
None*¬
self∑
.contextlib.closing[contextlib._SupportsCloseT]q
contextlib._SupportsCloseT6
contextlib._SupportsClose"contextlib._SupportsClose"contextlib._SupportsClose"contextlib.closing*|
thingq
contextlib._SupportsCloseT6
contextlib._SupportsClose"contextlib._SupportsClose"contextlib._SupportsClose*ñ
__exit__contextlib.closing.__exit__"
None*∫∑
.contextlib.closing[contextlib._SupportsCloseT]q
contextlib._SupportsCloseT6
contextlib._SupportsClose"contextlib._SupportsClose"contextlib._SupportsClose"contextlib.closing*&"
builtins.object"builtins.objectP†
TemporaryDirectorytempfile.TemporaryDirectory"builtins.object*◊
cleanup#tempfile.TemporaryDirectory.cleanup"
None*ú
selfë
*tempfile.TemporaryDirectory[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"tempfile.TemporaryDirectory*ë
	__enter__%tempfile.TemporaryDirectory.__enter__"F
typing.AnyStr"
builtins.object"builtins.object"builtins.object*îë
*tempfile.TemporaryDirectory[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"tempfile.TemporaryDirectory*™
__exit__$tempfile.TemporaryDirectory.__exit__"
None*îë
*tempfile.TemporaryDirectory[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"tempfile.TemporaryDirectory*ìê
(Union[Type[builtins.BaseException],None]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type
None*db
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*[Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None2Ã
__init__$tempfile.TemporaryDirectory.__init__∂
__init__$tempfile.TemporaryDirectory.__init__"
None*p
selff
)tempfile.TemporaryDirectory[builtins.str]
builtins.str"builtins.str"tempfile.TemporaryDirectory*R
suffixD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
prefixD
Union[builtins.str,None]
builtins.str"builtins.str
None * 
diræ
DUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],None]È
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath
None 0:typing.overloadX‡
__init__$tempfile.TemporaryDirectory.__init__"
None*v
selfl
+tempfile.TemporaryDirectory[builtins.bytes] 
builtins.bytes"builtins.bytes"tempfile.TemporaryDirectory*X
suffixJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None *X
prefixJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None *‚
dir÷
HUnion[TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]],None]˝
<TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]]•
1Union[builtins.bytes,os.PathLike[builtins.bytes]] 
builtins.bytes"builtins.bytesL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.BytesPath
None 0:typing.overloadXPrp
name tempfile.TemporaryDirectory.nameF
typing.AnyStr"
builtins.object"builtins.object"builtins.object˜
	HTTPErrorurllib.error.HTTPError"urllib.error.URLError"urllib.response.addinfourl*ò
reasonurllib.error.HTTPError.reason"
builtins.str"builtins.str*:
self0
urllib.error.HTTPError"urllib.error.HTTPError0:builtins.property`*©
__init__urllib.error.HTTPError.__init__"
None*:
self0
urllib.error.HTTPError"urllib.error.HTTPError*%
url
builtins.str"builtins.str*&
code
builtins.int"builtins.int*%
msg
builtins.str"builtins.str*8
hdrs.
email.message.Message"email.message.Message*Ö
fp}
%Union[typing.IO[builtins.bytes],None]H
typing.IO[builtins.bytes] 
builtins.bytes"builtins.bytes"	typing.IO
None2î
headersurllib.error.HTTPError.headersÆ
headersurllib.error.HTTPError.headers".
email.message.Message"email.message.Message*:
self0
urllib.error.HTTPError"urllib.error.HTTPError0:builtins.propertyX`∑
headersurllib.error.HTTPError.headers"
None*:
self0
urllib.error.HTTPError"urllib.error.HTTPError*;
headers.
email.message.Message"email.message.Message0:.setterrA
codeurllib.error.HTTPError.code
builtins.int"builtins.int∞
URLErrorurllib.error.URLError"builtins.OSError*—
__init__urllib.error.URLError.__init__"
None*8
self.
urllib.error.URLError"urllib.error.URLError*ä
reason~
*Union[builtins.str,builtins.BaseException]
builtins.str"builtins.str0
builtins.BaseException"builtins.BaseException*T
filenameD
Union[builtins.str,None]
builtins.str"builtins.str
None r¶
reasonurllib.error.URLError.reason~
*Union[builtins.str,builtins.BaseException]
builtins.str"builtins.str0
builtins.BaseException"builtins.BaseExceptionÎ;
Requesturllib.request.Request"builtins.object*∆
__init__urllib.request.Request.__init__"
None*:
self0
urllib.request.Request"urllib.request.Request*%
url
builtins.str"builtins.str*Æ
data°
ÙTypeAlias[Union[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],_typeshed.SupportsRead[builtins.bytes],typing.Iterable[builtins.bytes],None]]ã

ÈUnion[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],_typeshed.SupportsRead[builtins.bytes],typing.Iterable[builtins.bytes],None]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBufferb
&_typeshed.SupportsRead[builtins.bytes] 
builtins.bytes"builtins.bytes"_typeshed.SupportsReadT
typing.Iterable[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Iterable
None"urllib.request._DataType *ï
headersÖ
0typing.MutableMapping[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"typing.MutableMapping *[
origin_req_hostD
Union[builtins.str,None]
builtins.str"builtins.str
None *2
unverifiable
builtins.bool"builtins.bool *R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None *â

get_method!urllib.request.Request.get_method"
builtins.str"builtins.str*:
self0
urllib.request.Request"urllib.request.Request*√

add_header!urllib.request.Request.add_header"
None*:
self0
urllib.request.Request"urllib.request.Request*%
key
builtins.str"builtins.str*%
val
builtins.str"builtins.str*›
add_unredirected_header.urllib.request.Request.add_unredirected_header"
None*:
self0
urllib.request.Request"urllib.request.Request*%
key
builtins.str"builtins.str*%
val
builtins.str"builtins.str*∫

has_header!urllib.request.Request.has_header"
builtins.bool"builtins.bool*:
self0
urllib.request.Request"urllib.request.Request*-
header_name
builtins.str"builtins.str*™
remove_header$urllib.request.Request.remove_header"
None*:
self0
urllib.request.Request"urllib.request.Request*-
header_name
builtins.str"builtins.str*ç
get_full_url#urllib.request.Request.get_full_url"
builtins.str"builtins.str*:
self0
urllib.request.Request"urllib.request.Request*√
	set_proxy urllib.request.Request.set_proxy"
None*:
self0
urllib.request.Request"urllib.request.Request*&
host
builtins.str"builtins.str*&
type
builtins.str"builtins.str*î
header_items#urllib.request.Request.header_items"¢
/builtins.list[Tuple[builtins.str,builtins.str]]`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.list*:
self0
urllib.request.Request"urllib.request.Request*â
	has_proxy urllib.request.Request.has_proxy"
builtins.bool"builtins.bool*:
self0
urllib.request.Request"urllib.request.Request2Û
full_urlurllib.request.Request.full_urlû
full_urlurllib.request.Request.full_url"
builtins.str"builtins.str*:
self0
urllib.request.Request"urllib.request.Request0:builtins.propertyX`•
full_urlurllib.request.Request.full_url"
None*:
self0
urllib.request.Request"urllib.request.Request*'
value
builtins.str"builtins.str0:.setter}
full_urlurllib.request.Request.full_url"
None*:
self0
urllib.request.Request"urllib.request.Request0:.deleter2»

get_header!urllib.request.Request.get_headerı

get_header!urllib.request.Request.get_header"D
Union[builtins.str,None]
builtins.str"builtins.str
None*:
self0
urllib.request.Request"urllib.request.Request*-
header_name
builtins.str"builtins.str0:typing.overloadXû

get_header!urllib.request.Request.get_header"ì
%Union[builtins.str,urllib.request._T]
builtins.str"builtins.strJ
urllib.request._T"
builtins.object"builtins.object"builtins.object*:
self0
urllib.request.Request"urllib.request.Request*-
header_name
builtins.str"builtins.str*W
defaultJ
urllib.request._T"
builtins.object"builtins.object"builtins.object0:typing.overloadXrA
typeurllib.request.Request.type
builtins.str"builtins.strrA
hosturllib.request.Request.host
builtins.str"builtins.strrW
origin_req_host&urllib.request.Request.origin_req_host
builtins.str"builtins.strrI
selectorurllib.request.Request.selector
builtins.str"builtins.strr«
dataurllib.request.Request.data°
ÙTypeAlias[Union[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],_typeshed.SupportsRead[builtins.bytes],typing.Iterable[builtins.bytes],None]]ã

ÈUnion[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],_typeshed.SupportsRead[builtins.bytes],typing.Iterable[builtins.bytes],None]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBufferb
&_typeshed.SupportsRead[builtins.bytes] 
builtins.bytes"builtins.bytes"_typeshed.SupportsReadT
typing.Iterable[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Iterable
None"urllib.request._DataTyper±
headersurllib.request.Request.headersÖ
0typing.MutableMapping[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"typing.MutableMappingr¥
unredirected_hdrs(urllib.request.Request.unredirected_hdrsu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dictrS
unverifiable#urllib.request.Request.unverifiable
builtins.bool"builtins.boolrm
methodurllib.request.Request.methodD
Union[builtins.str,None]
builtins.str"builtins.str
Noneru
timeouturllib.request.Request.timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
NoneH
OpenMLError$sklearn.datasets._openml.OpenMLError"builtins.ValueErrorµ
wrapsfunctools.wraps"8
_typeshed.IdentityFunction"_typeshed.IdentityFunction*°
wrappedì
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"functools._AnyCallable*^
assignedN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence *]
updatedN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence ∂
urlopenurllib.request.urlopen"7
TypeAlias[Any]
Any"urllib.request._UrlopenRet*á
url~
*Union[builtins.str,urllib.request.Request]
builtins.str"builtins.str0
urllib.request.Request"urllib.request.Request*¿
data≥
ÄUnion[TypeAlias[Union[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],_typeshed.SupportsRead[builtins.bytes],typing.Iterable[builtins.bytes],None]],None]°
ÙTypeAlias[Union[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],_typeshed.SupportsRead[builtins.bytes],typing.Iterable[builtins.bytes],None]]ã

ÈUnion[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],_typeshed.SupportsRead[builtins.bytes],typing.Iterable[builtins.bytes],None]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBufferb
&_typeshed.SupportsRead[builtins.bytes] 
builtins.bytes"builtins.bytes"_typeshed.SupportsReadT
typing.Iterable[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Iterable
None"urllib.request._DataType
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *R
cafileD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
capathD
Union[builtins.str,None]
builtins.str"builtins.str
None */
	cadefault
builtins.bool"builtins.bool *Y
contextJ
Union[ssl.SSLContext,None] 
ssl.SSLContext"ssl.SSLContext
None r
check_pandas_support"sklearn.utils.check_pandas_support"
Any*-
caller_name
builtins.str"builtins.str™
get_data_home$sklearn.datasets._base.get_data_home"
builtins.str"builtins.str*U
	data_homeD
Union[None,builtins.str]
None
builtins.str"builtins.str œ
load_arff_from_gzip_file6sklearn.datasets._arff_parser.load_arff_from_gzip_file"…
ÌTuple[Union[pandas.core.frame.DataFrame,numpy.ndarray[Any,Any],Any],Union[pandas.core.frame.DataFrame,numpy.ndarray[Any,Any],pandas.core.series.Series[Any]],Union[pandas.core.frame.DataFrame,None],Union[builtins.list[builtins.str],None]]¡
=Union[pandas.core.frame.DataFrame,numpy.ndarray[Any,Any],Any]:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray
Anyô
XUnion[pandas.core.frame.DataFrame,numpy.ndarray[Any,Any],pandas.core.series.Series[Any]]:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayD
pandas.core.series.Series[Any]
Any"pandas.core.series.Seriesq
'Union[pandas.core.frame.DataFrame,None]:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None*-
	gzip_file
gzip.GzipFile"gzip.GzipFile*µ
parser®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*â
output_type˜
HUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*R
openml_columns_info9
builtins.dict[Any,Any]
Any
Any"builtins.dict*˛
feature_names_to_select‡
@Union[builtins.list[builtins.str],typing.Sequence[builtins.str]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*π
target_names_to_selectú
KUnion[typing.Sequence[builtins.str],builtins.list[Union[Any,builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence{
&builtins.list[Union[Any,builtins.str]]B
Union[Any,builtins.str]
Any
builtins.str"builtins.str"builtins.list*™
shapeú
,Union[None,Tuple[builtins.int,builtins.int]]
None`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int "Ω

joinposixpath.joiní
joinposixpath.join"
builtins.str"builtins.str*
builtins.str"builtins.str*'
paths
builtins.str"builtins.str0:typing.overloadX∞
joinposixpath.join"
builtins.str"builtins.str*ÏÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*ı
pathsÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath0:typing.overloadX‹
joinposixpath.join" 
builtins.bytes"builtins.bytes*Ä˝
<TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]]•
1Union[builtins.bytes,os.PathLike[builtins.bytes]] 
builtins.bytes"builtins.bytesL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.BytesPath*â
paths˝
<TypeAlias[Union[builtins.bytes,os.PathLike[builtins.bytes]]]•
1Union[builtins.bytes,os.PathLike[builtins.bytes]] 
builtins.bytes"builtins.bytesL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.BytesPath0:typing.overloadX"ç
fetch_openml%sklearn.datasets._openml.fetch_openml≥
fetch_openml%sklearn.datasets._openml.fetch_openml"8
sklearn.utils._bunch.Bunch"sklearn.utils._bunch.Bunch*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *o
version`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int *S
data_idD
Union[builtins.int,None]
builtins.int"builtins.int
None *U
	data_homeD
Union[builtins.str,None]
builtins.str"builtins.str
None *õ
target_columnÖ
+Union[builtins.str,builtins.list[Any],None]
builtins.str"builtins.str,
builtins.list[Any]
Any"builtins.list
None *+
cache
builtins.bool"builtins.bool *L

return_X_y:
Literal[builtins.bool]	
builtins.bool"builtins.bool *s
as_framec
!Union[builtins.str,builtins.bool]
builtins.str"builtins.str
builtins.bool"builtins.bool *-
	n_retries
builtins.int"builtins.int *-
delay 
builtins.float"builtins.float *R
parserD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:typing.overloadXü	
fetch_openml%sklearn.datasets._openml.fetch_openml"£
5Tuple[sklearn.utils._bunch.Bunch,builtins.tuple[Any]]8
sklearn.utils._bunch.Bunch"sklearn.utils._bunch.Bunch.
builtins.tuple[Any]
Any"builtins.tuple*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *o
version`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int *S
data_idD
Union[builtins.int,None]
builtins.int"builtins.int
None *U
	data_homeD
Union[builtins.str,None]
builtins.str"builtins.str
None *õ
target_columnÖ
+Union[builtins.str,builtins.list[Any],None]
builtins.str"builtins.str,
builtins.list[Any]
Any"builtins.list
None *+
cache
builtins.bool"builtins.bool *L

return_X_y:
Literal[builtins.bool]	
builtins.bool"builtins.bool *s
as_framec
!Union[builtins.str,builtins.bool]
builtins.str"builtins.str
builtins.bool"builtins.bool *-
	n_retries
builtins.int"builtins.int *-
delay 
builtins.float"builtins.float *R
parserD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:typing.overloadX*î
__annotations__(sklearn.datasets._openml.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
npnumpy *w
__all__ sklearn.datasets._openml.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*W
_OPENML_PREFIX'sklearn.datasets._openml._OPENML_PREFIX
builtins.str"builtins.str*S
_SEARCH_NAME%sklearn.datasets._openml._SEARCH_NAME
builtins.str"builtins.str*O

_DATA_INFO#sklearn.datasets._openml._DATA_INFO
builtins.str"builtins.str*W
_DATA_FEATURES'sklearn.datasets._openml._DATA_FEATURES
builtins.str"builtins.str*Y
_DATA_QUALITIES(sklearn.datasets._openml._DATA_QUALITIES
builtins.str"builtins.str*O

_DATA_FILE#sklearn.datasets._openml._DATA_FILE
builtins.str"builtins.str*k
OpenmlQualitiesType,sklearn.datasets._openml.OpenmlQualitiesType&
builtins.ellipsis"builtins.ellipsis*i
OpenmlFeaturesType+sklearn.datasets._openml.OpenmlFeaturesType&
builtins.ellipsis"builtins.ellipsis