
csvÿ
Dialect_csv.Dialect"builtins.object*S
__init___csv.Dialect.__init__"
None*&
self
_csv.Dialect"_csv.DialectrA
	delimiter_csv.Dialect.delimiter
builtins.str"builtins.strri
	quotechar_csv.Dialect.quotecharD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerk

escapechar_csv.Dialect.escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
NonerG
doublequote_csv.Dialect.doublequote
builtins.bool"builtins.boolrQ
skipinitialspace_csv.Dialect.skipinitialspace
builtins.bool"builtins.boolrK
lineterminator_csv.Dialect.lineterminator
builtins.str"builtins.strr=
quoting_csv.Dialect.quoting
builtins.int"builtins.intr=
strict_csv.Dialect.strict
builtins.bool"builtins.bool'
Error
_csv.Error"builtins.Exception›Z
_DictReadMappingbuiltins.dict"typing.MutableMapping*Û
__new__builtins.dict.__new__"ï
builtins.dict.SelfÇ
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict"builtins.dict*ž
cls”
Type[builtins.dict.Self]ï
builtins.dict.SelfÇ
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict"builtins.dict"type*
args
Any*
kwargs
Any*¹
copybuiltins.dict.copy"Ç
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict*Ò
selfÇ
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict*Ó
keysbuiltins.dict.keys"á
5_collections_abc.dict_keys[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"_collections_abc.dict_keys*Ò
selfÇ
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict*Û
valuesbuiltins.dict.values"å
7_collections_abc.dict_values[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"_collections_abc.dict_values*Ò
selfÇ
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict*×
itemsbuiltins.dict.items"ã
6_collections_abc.dict_items[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"_collections_abc.dict_items*Ò
selfÇ
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict*‹
__len__builtins.dict.__len__"
builtins.int"builtins.int*ÊÇ
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict*…
__getitem__builtins.dict.__getitem__"E
builtins._VT"
builtins.object"builtins.object"builtins.object*ÊÇ
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict*GE
builtins._KT"
builtins.object"builtins.object"builtins.object*‘
__setitem__builtins.dict.__setitem__"
None*ÊÇ
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict*GE
builtins._KT"
builtins.object"builtins.object"builtins.object*GE
builtins._VT"
builtins.object"builtins.object"builtins.object*È
__delitem__builtins.dict.__delitem__"
None*ÊÇ
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict*GE
builtins._KT"
builtins.object"builtins.object"builtins.object*è
__iter__builtins.dict.__iter__"w
typing.Iterator[builtins._KT]E
builtins._KT"
builtins.object"builtins.object"builtins.object"typing.Iterator*ÊÇ
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict*ð
__reversed__builtins.dict.__reversed__"w
typing.Iterator[builtins._KT]E
builtins._KT"
builtins.object"builtins.object"builtins.object"typing.Iterator*ÊÇ
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict2ž
__init__builtins.dict.__init__–
__init__builtins.dict.__init__"
None*Ò
selfÇ
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict0:typing.overloadXÀ
__init__builtins.dict.__init__"
None*©
selfž
(builtins.dict[builtins.str,builtins._VT]
builtins.str"builtins.strE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict*Q
kwargsE
builtins._VT"
builtins.object"builtins.object"builtins.object0:typing.overloadX‰
__init__builtins.dict.__init__"
None*Ò
selfÇ
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict*ðí
;_typeshed.SupportsKeysAndGetItem[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object" _typeshed.SupportsKeysAndGetItem0:typing.overloadXŠ
__init__builtins.dict.__init__"
None*©
selfž
(builtins.dict[builtins.str,builtins._VT]
builtins.str"builtins.strE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict*ÇÄ
;_typeshed.SupportsKeysAndGetItem[builtins.str,builtins._VT]
builtins.str"builtins.strE
builtins._VT"
builtins.object"builtins.object"builtins.object" _typeshed.SupportsKeysAndGetItem*Q
kwargsE
builtins._VT"
builtins.object"builtins.object"builtins.object0:typing.overloadX•
__init__builtins.dict.__init__"
None*Ò
selfÇ
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict*üù
1typing.Iterable[Tuple[builtins._KT,builtins._VT]]²
 Tuple[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"typing.Iterable0:typing.overloadX–
__init__builtins.dict.__init__"
None*©
selfž
(builtins.dict[builtins.str,builtins._VT]
builtins.str"builtins.strE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict*ÓÐ
1typing.Iterable[Tuple[builtins.str,builtins._VT]]‰
 Tuple[builtins.str,builtins._VT]
builtins.str"builtins.strE
builtins._VT"
builtins.object"builtins.object"builtins.object"typing.Iterable*Q
kwargsE
builtins._VT"
builtins.object"builtins.object"builtins.object0:typing.overloadXÓ
__init__builtins.dict.__init__"
None*
selfu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict*Ž‹
,typing.Iterable[builtins.list[builtins.str]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"typing.Iterable0:typing.overloadX2ž
fromkeysbuiltins.dict.fromkeys‘
fromkeysbuiltins.dict.fromkeys"©
*builtins.dict[builtins._T,Union[Any,None]]D
builtins._T"
builtins.object"builtins.object"builtins.object&
Union[Any,None]
Any
None"builtins.dict*Œ
cls‚
.Type[builtins.dict[builtins._KT,builtins._VT]]Ç
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict"type*wu
typing.Iterable[builtins._T]D
builtins._T"
builtins.object"builtins.object"builtins.object"typing.Iterable*
None 0:builtins.classmethod:typing.overloadXpå
fromkeysbuiltins.dict.fromkeys"Ã
&builtins.dict[builtins._T,builtins._S]D
builtins._T"
builtins.object"builtins.object"builtins.objectD
builtins._S"
builtins.object"builtins.object"builtins.object"builtins.dict*Œ
cls‚
.Type[builtins.dict[builtins._KT,builtins._VT]]Ç
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict"type*wu
typing.Iterable[builtins._T]D
builtins._T"
builtins.object"builtins.object"builtins.object"typing.Iterable*FD
builtins._S"
builtins.object"builtins.object"builtins.object0:builtins.classmethod:typing.overloadXp2Œ	
getbuiltins.dict.getº
getbuiltins.dict.get"m
Union[builtins._VT,None]E
builtins._VT"
builtins.object"builtins.object"builtins.object
None*Ò
selfÇ
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict*GE
builtins._KT"
builtins.object"builtins.object"builtins.object0:typing.overloadX´
getbuiltins.dict.get"°
Union[builtins._VT,builtins._T]E
builtins._VT"
builtins.object"builtins.object"builtins.objectD
builtins._T"
builtins.object"builtins.object"builtins.object*Ò
selfÇ
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict*GE
builtins._KT"
builtins.object"builtins.object"builtins.object*³°
Union[builtins._VT,builtins._T]E
builtins._VT"
builtins.object"builtins.object"builtins.objectD
builtins._T"
builtins.object"builtins.object"builtins.object0:typing.overloadX2ä
popbuiltins.dict.pop’
popbuiltins.dict.pop"E
builtins._VT"
builtins.object"builtins.object"builtins.object*Ò
selfÇ
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict*GE
builtins._KT"
builtins.object"builtins.object"builtins.object0:typing.overloadX´
popbuiltins.dict.pop"°
Union[builtins._VT,builtins._T]E
builtins._VT"
builtins.object"builtins.object"builtins.objectD
builtins._T"
builtins.object"builtins.object"builtins.object*Ò
selfÇ
(builtins.dict[builtins._KT,builtins._VT]E
builtins._KT"
builtins.object"builtins.object"builtins.objectE
builtins._VT"
builtins.object"builtins.object"builtins.object"builtins.dict*GE
builtins._KT"
builtins.object"builtins.object"builtins.object*³°
Union[builtins._VT,builtins._T]E
builtins._VT"
builtins.object"builtins.object"builtins.objectD
builtins._T"
builtins.object"builtins.object"builtins.object0:typing.overloadXPr,
__hash__builtins.dict.__hash__
None 
excel	csv.excel"_csv.Dialect%
	excel_tabcsv.excel_tab"	csv.excel.
unix_dialectcsv.unix_dialect"_csv.DialectØ!

DictReadercsv.DictReader"typing.Iterator*Ð
__iter__csv.DictReader.__iter__"’
csv.DictReader.Selfi
csv.DictReader[csv._T]?
csv._T"
builtins.object"builtins.object"builtins.object"csv.DictReader"csv.DictReader*•’
csv.DictReader.Selfi
csv.DictReader[csv._T]?
csv._T"
builtins.object"builtins.object"builtins.object"csv.DictReader"csv.DictReader*‰
__next__csv.DictReader.__next__"î
8builtins.dict[Union[csv._T,Any],Union[builtins.str,Any]]_
Union[csv._T,Any]?
csv._T"
builtins.object"builtins.object"builtins.object
AnyB
Union[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*s
selfi
csv.DictReader[csv._T]?
csv._T"
builtins.object"builtins.object"builtins.object"csv.DictReader2ú
__init__csv.DictReader.__init__§

__init__csv.DictReader.__init__"
None*s
selfi
csv.DictReader[csv._T]?
csv._T"
builtins.object"builtins.object"builtins.object"csv.DictReader*U
fN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*{

fieldnamesk
typing.Sequence[csv._T]?
csv._T"
builtins.object"builtins.object"builtins.object"typing.Sequence*S
restkeyD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
restvalD
Union[builtins.str,None]
builtins.str"builtins.str
None *—
dialect‡
>TypeAlias[Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]]¯
3Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect:
Type[_csv.Dialect]
_csv.Dialect"_csv.Dialect"type"_csv._DialectLike *-
	delimiter
builtins.str"builtins.str *U
	quotecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *1
doublequote
builtins.bool"builtins.bool *6
skipinitialspace
builtins.bool"builtins.bool *2
lineterminator
builtins.str"builtins.str *+
quoting
builtins.int"builtins.int *,
strict
builtins.bool"builtins.bool 0:typing.overloadXª

__init__csv.DictReader.__init__"
None*V
selfL
csv.DictReader[builtins.str]
builtins.str"builtins.str"csv.DictReader*U
fN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*š

fieldnames‡
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *S
restkeyD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
restvalD
Union[builtins.str,None]
builtins.str"builtins.str
None *—
dialect‡
>TypeAlias[Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]]¯
3Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect:
Type[_csv.Dialect]
_csv.Dialect"_csv.Dialect"type"_csv._DialectLike *-
	delimiter
builtins.str"builtins.str *U
	quotecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *1
doublequote
builtins.bool"builtins.bool *6
skipinitialspace
builtins.bool"builtins.bool *2
lineterminator
builtins.str"builtins.str *+
quoting
builtins.int"builtins.int *,
strict
builtins.bool"builtins.bool 0:typing.overloadXPrÈ

fieldnamescsv.DictReader.fieldnamesž
#Union[typing.Sequence[csv._T],None]k
typing.Sequence[csv._T]?
csv._T"
builtins.object"builtins.object"builtins.object"typing.Sequence
Nonerg
restkeycsv.DictReader.restkeyD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerg
restvalcsv.DictReader.restvalD
Union[builtins.str,None]
builtins.str"builtins.str
Noner=
readercsv.DictReader.reader
_csv._reader"_csv._readerr«
dialectcsv.DictReader.dialect‡
>TypeAlias[Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]]¯
3Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect:
Type[_csv.Dialect]
_csv.Dialect"_csv.Dialect"type"_csv._DialectLikerA
line_numcsv.DictReader.line_num
builtins.int"builtins.intæ

DictWritercsv.DictWriter"builtins.object*ó

__init__csv.DictWriter.__init__"
None*s
selfi
csv.DictWriter[csv._T]?
csv._T"
builtins.object"builtins.object"builtins.object"csv.DictWriter*e
f^
%_typeshed.SupportsWrite[builtins.str]
builtins.str"builtins.str"_typeshed.SupportsWrite*

fieldnameso
typing.Collection[csv._T]?
csv._T"
builtins.object"builtins.object"builtins.object"typing.Collection*5
restval&
Union[Any,None]
Any
None *½
extrasaction¨
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *—
dialect‡
>TypeAlias[Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]]¯
3Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect:
Type[_csv.Dialect]
_csv.Dialect"_csv.Dialect"type"_csv._DialectLike *-
	delimiter
builtins.str"builtins.str *U
	quotecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *1
doublequote
builtins.bool"builtins.bool *6
skipinitialspace
builtins.bool"builtins.bool *2
lineterminator
builtins.str"builtins.str *+
quoting
builtins.int"builtins.int *,
strict
builtins.bool"builtins.bool *§
writeheadercsv.DictWriter.writeheader"
Any*s
selfi
csv.DictWriter[csv._T]?
csv._T"
builtins.object"builtins.object"builtins.object"csv.DictWriter*§
writerowcsv.DictWriter.writerow"
Any*s
selfi
csv.DictWriter[csv._T]?
csv._T"
builtins.object"builtins.object"builtins.object"csv.DictWriter*ƒ
rowdictv
typing.Mapping[csv._T,Any]?
csv._T"
builtins.object"builtins.object"builtins.object
Any"typing.Mapping*ì
	writerowscsv.DictWriter.writerows"
None*s
selfi
csv.DictWriter[csv._T]?
csv._T"
builtins.object"builtins.object"builtins.object"csv.DictWriter*Å
rowdicts¶
+typing.Iterable[typing.Mapping[csv._T,Any]]v
typing.Mapping[csv._T,Any]?
csv._T"
builtins.object"builtins.object"builtins.object
Any"typing.Mapping"typing.IterablePr˜

fieldnamescsv.DictWriter.fieldnameso
typing.Collection[csv._T]?
csv._T"
builtins.object"builtins.object"builtins.object"typing.CollectionrI
restvalcsv.DictWriter.restval&
Union[Any,None]
Any
NonerÖ
extrasactioncsv.DictWriter.extrasaction¨
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strr=
writercsv.DictWriter.writer
_csv._writer"_csv._writer¯
Sniffercsv.Sniffer"builtins.object*þ
sniffcsv.Sniffer.sniff":
Type[_csv.Dialect]
_csv.Dialect"_csv.Dialect"type*$
self
csv.Sniffer"csv.Sniffer*(
sample
builtins.str"builtins.str*V

delimitersD
Union[builtins.str,None]
builtins.str"builtins.str
None *”

has_headercsv.Sniffer.has_header"
builtins.bool"builtins.bool*$
self
csv.Sniffer"csv.Sniffer*(
sample
builtins.str"builtins.strrn
	preferredcsv.Sniffer.preferredJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listv
field_size_limit_csv.field_size_limit"
builtins.int"builtins.int*-
	new_limit
builtins.int"builtins.int e
get_dialect_csv.get_dialect"
_csv.Dialect"_csv.Dialect*&
name
builtins.str"builtins.stro
list_dialects_csv.list_dialects"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list‚
reader_csv.reader"
_csv._reader"_csv._reader*[
csvfileN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*—
dialect‡
>TypeAlias[Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]]¯
3Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect:
Type[_csv.Dialect]
_csv.Dialect"_csv.Dialect"type"_csv._DialectLike *-
	delimiter
builtins.str"builtins.str *U
	quotecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *1
doublequote
builtins.bool"builtins.bool *6
skipinitialspace
builtins.bool"builtins.bool *2
lineterminator
builtins.str"builtins.str *+
quoting
builtins.int"builtins.int *,
strict
builtins.bool"builtins.bool þ
register_dialect_csv.register_dialect"
None*&
name
builtins.str"builtins.str*I
dialect:
Type[_csv.Dialect]
_csv.Dialect"_csv.Dialect"type *-
	delimiter
builtins.str"builtins.str *U
	quotecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *1
doublequote
builtins.bool"builtins.bool *6
skipinitialspace
builtins.bool"builtins.bool *2
lineterminator
builtins.str"builtins.str *+
quoting
builtins.int"builtins.int *,
strict
builtins.bool"builtins.bool _
unregister_dialect_csv.unregister_dialect"
None*&
name
builtins.str"builtins.str’
writer_csv.writer"
_csv._writer"_csv._writer*k
csvfile^
%_typeshed.SupportsWrite[builtins.str]
builtins.str"builtins.str"_typeshed.SupportsWrite*—
dialect‡
>TypeAlias[Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]]¯
3Union[builtins.str,_csv.Dialect,Type[_csv.Dialect]]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect:
Type[_csv.Dialect]
_csv.Dialect"_csv.Dialect"type"_csv._DialectLike *-
	delimiter
builtins.str"builtins.str *U
	quotecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *1
doublequote
builtins.bool"builtins.bool *6
skipinitialspace
builtins.bool"builtins.bool *2
lineterminator
builtins.str"builtins.str *+
quoting
builtins.int"builtins.int *,
strict
builtins.bool"builtins.bool *
__annotations__csv.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*T
	QUOTE_ALL_csv.QUOTE_ALL7
Literal[builtins.int]	
builtins.int"builtins.int*\
QUOTE_MINIMAL_csv.QUOTE_MINIMAL7
Literal[builtins.int]	
builtins.int"builtins.int*V

QUOTE_NONE_csv.QUOTE_NONE7
Literal[builtins.int]	
builtins.int"builtins.int*b
QUOTE_NONNUMERIC_csv.QUOTE_NONNUMERIC7
Literal[builtins.int]	
builtins.int"builtins.int*=
__version___csv.__version__
builtins.str"builtins.str*b
__all__csv.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list