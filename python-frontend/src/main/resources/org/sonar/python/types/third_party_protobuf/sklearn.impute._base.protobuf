
sklearn.impute._baseäR
Countercollections.Counter"builtins.dict*ü
copycollections.Counter.copy"∑
collections.Counter.SelfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter"collections.Counter*¬
self∑
collections.Counter.SelfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter"collections.Counter*∂
elementscollections.Counter.elements"{
typing.Iterator[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"typing.Iterator*é
selfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*„
most_commoncollections.Counter.most_common"“
1builtins.list[Tuple[collections._T,builtins.int]]ç
"Tuple[collections._T,builtins.int]G
collections._T"
builtins.object"builtins.object"builtins.object
builtins.int"builtins.int"builtins.list*é
selfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*M
nD
Union[builtins.int,None]
builtins.int"builtins.int
None *¸
fromkeyscollections.Counter.fromkeys"
NoReturn
*√
clsπ
)Type[collections.Counter[collections._T]]É
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter"type*
iterable
Any*M
vD
Union[builtins.int,None]
builtins.int"builtins.int
None 0:builtins.classmethodp*Ø
__missing__collections.Counter.__missing__"
builtins.int"builtins.int*é
selfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*P
keyG
collections._T"
builtins.object"builtins.object"builtins.object*Á
__delitem__collections.Counter.__delitem__"
None*ÜÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*$"
builtins.object"builtins.object*»
__add__collections.Counter.__add__"ç
9collections.Counter[Union[collections._T,collections._S]]∫
$Union[collections._T,collections._S]G
collections._T"
builtins.object"builtins.object"builtins.objectG
collections._S"
builtins.object"builtins.object"builtins.object"collections.Counter*ÜÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*ÜÉ
#collections.Counter[collections._S]G
collections._S"
builtins.object"builtins.object"builtins.object"collections.Counter*æ
__sub__collections.Counter.__sub__"É
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*ÜÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*ÜÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*æ
__and__collections.Counter.__and__"É
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*ÜÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*ÜÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*∆
__or__collections.Counter.__or__"ç
9collections.Counter[Union[collections._T,collections._S]]∫
$Union[collections._T,collections._S]G
collections._T"
builtins.object"builtins.object"builtins.objectG
collections._S"
builtins.object"builtins.object"builtins.object"collections.Counter*ÜÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*ÜÉ
#collections.Counter[collections._S]G
collections._S"
builtins.object"builtins.object"builtins.object"collections.Counter*µ
__pos__collections.Counter.__pos__"É
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*ÜÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*µ
__neg__collections.Counter.__neg__"É
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*ÜÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*®
__iadd__collections.Counter.__iadd__"∑
collections.Counter.SelfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter"collections.Counter*∫∑
collections.Counter.SelfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter"collections.Counter*ÜÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*®
__isub__collections.Counter.__isub__"∑
collections.Counter.SelfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter"collections.Counter*∫∑
collections.Counter.SelfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter"collections.Counter*ÜÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*®
__iand__collections.Counter.__iand__"∑
collections.Counter.SelfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter"collections.Counter*∫∑
collections.Counter.SelfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter"collections.Counter*ÜÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*¶
__ior__collections.Counter.__ior__"∑
collections.Counter.SelfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter"collections.Counter*∫∑
collections.Counter.SelfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter"collections.Counter*ÜÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter2¯	
__init__collections.Counter.__init__Ê
__init__collections.Counter.__init__"
None*é
selfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*
None 0:typing.overloadX·
__init__collections.Counter.__init__"
None*`
selfV
!collections.Counter[builtins.str]
builtins.str"builtins.str"collections.Counter*
None *(
kwargs
builtins.int"builtins.int0:typing.overloadX¶
__init__collections.Counter.__init__"
None*é
selfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*À»
=_typeshed.SupportsKeysAndGetItem[collections._T,builtins.int]G
collections._T"
builtins.object"builtins.object"builtins.object
builtins.int"builtins.int" _typeshed.SupportsKeysAndGetItem0:typing.overloadX◊
__init__collections.Counter.__init__"
None*é
selfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*}{
typing.Iterable[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"typing.Iterable0:typing.overloadX2
subtractcollections.Counter.subtractÊ
subtractcollections.Counter.subtract"
None*é
selfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*
None 0:typing.overloadXÇ
subtractcollections.Counter.subtract"
None*é
selfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*ß§
+typing.Mapping[collections._T,builtins.int]G
collections._T"
builtins.object"builtins.object"builtins.object
builtins.int"builtins.int"typing.Mapping0:typing.overloadX◊
subtractcollections.Counter.subtract"
None*é
selfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*}{
typing.Iterable[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"typing.Iterable0:typing.overloadX2ﬁ
updatecollections.Counter.update®
updatecollections.Counter.update"
None*é
selfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*ß§
+typing.Mapping[collections._T,builtins.int]G
collections._T"
builtins.object"builtins.object"builtins.object
builtins.int"builtins.int"typing.Mapping*(
kwargs
builtins.int"builtins.int0:typing.overloadX˝
updatecollections.Counter.update"
None*é
selfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*}{
typing.Iterable[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"typing.Iterable*(
kwargs
builtins.int"builtins.int0:typing.overloadXå
updatecollections.Counter.update"
None*é
selfÉ
#collections.Counter[collections._T]G
collections._T"
builtins.object"builtins.object"builtins.object"collections.Counter*
None *(
kwargs
builtins.int"builtins.int0:typing.overloadXP∂
Hidden&sklearn.utils._param_validation.Hidden"builtins.object*Ú
__init__/sklearn.utils._param_validation.Hidden.__init__"
None*Z
selfP
&sklearn.utils._param_validation.Hidden"&sklearn.utils._param_validation.Hidden*Œ

constraintΩ
?Union[sklearn.utils._param_validation._Constraint,builtins.str]Z
+sklearn.utils._param_validation._Constraint"+sklearn.utils._param_validation._Constraint
builtins.str"builtins.str˚

StrOptions*sklearn.utils._param_validation.StrOptions"'sklearn.utils._param_validation.Options*ó
__init__3sklearn.utils._param_validation.StrOptions.__init__"
None*b
selfX
*sklearn.utils._param_validation.StrOptions"*sklearn.utils._param_validation.StrOptions*U
optionsH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.set*ê

deprecated~
&Union[builtins.set[builtins.str],None]H
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.set
None †
_BaseImputer!sklearn.impute._base._BaseImputer"sklearn.base.TransformerMixin"sklearn.base.BaseEstimator*°
__init__*sklearn.impute._base._BaseImputer.__init__"
None*P
selfF
!sklearn.impute._base._BaseImputer"!sklearn.impute._base._BaseImputer*
missing_values
Any *3
add_indicator
builtins.bool"builtins.bool *9
keep_empty_features
builtins.bool"builtins.bool rç
_parameter_constraints8sklearn.impute._base._BaseImputer._parameter_constraints9
builtins.dict[Any,Any]
Any
Any"builtins.dict¯<
SimpleImputer"sklearn.impute._base.SimpleImputer"!sklearn.impute._base._BaseImputer*ˇ
__init__+sklearn.impute._base.SimpleImputer.__init__"
None*R
selfH
"sklearn.impute._base.SimpleImputer""sklearn.impute._base.SimpleImputer*∑
missing_values†
4Union[builtins.float,None,builtins.str,builtins.int] 
builtins.float"builtins.float
None
builtins.str"builtins.str
builtins.int"builtins.int *,
strategy
builtins.str"builtins.str *≥

fill_value†
4Union[builtins.float,None,builtins.str,builtins.int] 
builtins.float"builtins.float
None
builtins.str"builtins.str
builtins.int"builtins.int *≠
verboseù
ÖUnion[builtins.str,TypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]]
builtins.str"builtins.strÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int **
copy
builtins.bool"builtins.bool *3
add_indicator
builtins.bool"builtins.bool *9
keep_empty_features
builtins.bool"builtins.bool *π
fit&sklearn.impute._base.SimpleImputer.fit"ô
'sklearn.impute._base.SimpleImputer_SelfH
"sklearn.impute._base.SimpleImputer""sklearn.impute._base.SimpleImputer""sklearn.impute._base.SimpleImputer*§
selfô
'sklearn.impute._base.SimpleImputer_SelfH
"sklearn.impute._base.SimpleImputer""sklearn.impute._base.SimpleImputer""sklearn.impute._base.SimpleImputer*¥
X¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike*
y
Any *Ø
	transform,sklearn.impute._base.SimpleImputer.transform"i
!Union[numpy.ndarray[Any,Any],Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray
Any*R
selfH
"sklearn.impute._base.SimpleImputer""sklearn.impute._base.SimpleImputer*¥
X¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike*è
inverse_transform4sklearn.impute._base.SimpleImputer.inverse_transform"9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*R
selfH
"sklearn.impute._base.SimpleImputer""sklearn.impute._base.SimpleImputer*¥
X¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike*ö
get_feature_names_out8sklearn.impute._base.SimpleImputer.get_feature_names_out"9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*R
selfH
"sklearn.impute._base.SimpleImputer""sklearn.impute._base.SimpleImputer*∑
input_features†
„Union[None,TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]]
None´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLike rÑ
feature_names_in_4sklearn.impute._base.SimpleImputer.feature_names_in_9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayra
n_features_in_1sklearn.impute._base.SimpleImputer.n_features_in_
builtins.int"builtins.intrã

indicator_-sklearn.impute._base.SimpleImputer.indicator_N
%sklearn.impute._base.MissingIndicator"%sklearn.impute._base.MissingIndicatorrx
statistics_.sklearn.impute._base.SimpleImputer.statistics_9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayré
_parameter_constraints9sklearn.impute._base.SimpleImputer._parameter_constraints9
builtins.dict[Any,Any]
Any
Any"builtins.dictós
MissingIndicator%sklearn.impute._base.MissingIndicator"sklearn.base.TransformerMixin"sklearn.base.BaseEstimator*ˇ
__init__.sklearn.impute._base.MissingIndicator.__init__"
None*X
selfN
%sklearn.impute._base.MissingIndicator"%sklearn.impute._base.MissingIndicator*∑
missing_values†
4Union[builtins.float,None,builtins.str,builtins.int] 
builtins.float"builtins.float
None
builtins.str"builtins.str
builtins.int"builtins.int *à
features˜
HUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *Â
sparse÷
@Union[Literal[builtins.str],Literal[builtins.str],builtins.bool]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
builtins.bool"builtins.bool *2
error_on_new
builtins.bool"builtins.bool *±
fit)sklearn.impute._base.MissingIndicator.fit"•
*sklearn.impute._base.MissingIndicator_SelfN
%sklearn.impute._base.MissingIndicator"%sklearn.impute._base.MissingIndicator"%sklearn.impute._base.MissingIndicator*∞
self•
*sklearn.impute._base.MissingIndicator_SelfN
%sklearn.impute._base.MissingIndicator"%sklearn.impute._base.MissingIndicator"%sklearn.impute._base.MissingIndicator*ë
Xâ
ßUnion[TypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]],TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]]¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLike*
y
Any *ï
	transform/sklearn.impute._base.MissingIndicator.transform"i
!Union[numpy.ndarray[Any,Any],Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray
Any*X
selfN
%sklearn.impute._base.MissingIndicator"%sklearn.impute._base.MissingIndicator*ë
Xâ
ßUnion[TypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]],TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]]¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLike*Ø
fit_transform3sklearn.impute._base.MissingIndicator.fit_transform"i
!Union[numpy.ndarray[Any,Any],Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray
Any*X
selfN
%sklearn.impute._base.MissingIndicator"%sklearn.impute._base.MissingIndicator*ë
Xâ
ßUnion[TypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]],TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]]¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLike*
y
Any *£
get_feature_names_out;sklearn.impute._base.MissingIndicator.get_feature_names_out"9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*X
selfN
%sklearn.impute._base.MissingIndicator"%sklearn.impute._base.MissingIndicator*∑
input_features†
„Union[None,TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]]
None´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLike rá
feature_names_in_7sklearn.impute._base.MissingIndicator.feature_names_in_9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayrd
n_features_in_4sklearn.impute._base.MissingIndicator.n_features_in_
builtins.int"builtins.intrw
	features_/sklearn.impute._base.MissingIndicator.features_9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayrë
_parameter_constraints<sklearn.impute._base.MissingIndicator._parameter_constraints9
builtins.dict[Any,Any]
Any
Any"builtins.dict\
is_scalar_nansklearn.utils.is_scalar_nan"
builtins.bool"builtins.bool*
x
Any≤
check_is_fitted(sklearn.utils.validation.check_is_fitted"
None*G
	estimator8
sklearn.base.BaseEstimator"sklearn.base.BaseEstimator*Ò

attributesﬁ
fUnion[builtins.tuple[builtins.str],None,typing.Sequence[Any],builtins.list[builtins.str],builtins.str]L
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple
None0
typing.Sequence[Any]
Any"typing.SequenceJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
builtins.str"builtins.str *O
msgD
Union[None,builtins.str]
None
builtins.str"builtins.str *]

all_or_anyK
CallableType[builtins.function]&
builtins.function"builtins.function *ê
__annotations__$sklearn.impute._base.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*&
spsklearn.impute._base.sp
Any*2
spmatrixsklearn.impute._base.spmatrix
Any*]
FLOAT_DTYPES%sklearn.utils.validation.FLOAT_DTYPES&
builtins.ellipsis"builtins.ellipsis*
npnumpy *
manumpy.ma 