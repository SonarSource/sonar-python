
click.parser«
CoreArgumentclick.core.Argument"click.core.Parameter*∂
__init__click.core.Argument.__init__"
None*4
self*
click.core.Argument"click.core.Argument*_
param_declsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*W
requiredG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *
attrs
Any*©
human_readable_name'click.core.Argument.human_readable_name"
builtins.str"builtins.str*4
self*
click.core.Argument"click.core.Argument0:builtins.property`*Ñ
make_metavar click.core.Argument.make_metavar"
builtins.str"builtins.str*4
self*
click.core.Argument"click.core.Argument*Ø
_parse_decls click.core.Argument._parse_decls"π
WTuple[Union[builtins.str,None],builtins.list[builtins.str],builtins.list[builtins.str]]D
Union[builtins.str,None]
builtins.str"builtins.str
NoneJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*4
self*
click.core.Argument"click.core.Argument*Y
declsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*0
expose_value
builtins.bool"builtins.bool*Ì
get_usage_pieces$click.core.Argument.get_usage_pieces"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*4
self*
click.core.Argument"click.core.Argument*1
ctx(
click.core.Context"click.core.Context*ª
get_error_hint"click.core.Argument.get_error_hint"
builtins.str"builtins.str*4
self*
click.core.Argument"click.core.Argument*1
ctx(
click.core.Context"click.core.Context*È
add_to_parser!click.core.Argument.add_to_parser"
None*4
self*
click.core.Argument"click.core.Argument*B
parser6
click.parser.OptionParser"click.parser.OptionParser*1
ctx(
click.core.Context"click.core.ContextrT
param_type_name#click.core.Argument.param_type_name
builtins.str"builtins.str◊/

CoreOptionclick.core.Option"click.core.Parameter*É
__init__click.core.Option.__init__"
None*0
self&
click.core.Option"click.core.Option*õ
param_declsá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *Ü
show_defaultr
&Union[builtins.bool,builtins.str,None]
builtins.bool"builtins.bool
builtins.str"builtins.str
None *q
promptc
!Union[builtins.bool,builtins.str]
builtins.bool"builtins.bool
builtins.str"builtins.str *~
confirmation_promptc
!Union[builtins.bool,builtins.str]
builtins.bool"builtins.bool
builtins.str"builtins.str *5
prompt_required
builtins.bool"builtins.bool *0

hide_input
builtins.bool"builtins.bool *V
is_flagG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *8

flag_value&
Union[Any,None]
Any
None *.
multiple
builtins.bool"builtins.bool *+
count
builtins.bool"builtins.bool *8
allow_from_autoenv
builtins.bool"builtins.bool *x
typel
%Union[click.types.ParamType,Any,None].
click.types.ParamType"click.types.ParamType
Any
None *P
helpD
Union[builtins.str,None]
builtins.str"builtins.str
None *,
hidden
builtins.bool"builtins.bool *2
show_choices
builtins.bool"builtins.bool *1
show_envvar
builtins.bool"builtins.bool *
attrs
Any*π
to_info_dictclick.core.Option.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*0
self&
click.core.Option"click.core.Option*©
_parse_declsclick.core.Option._parse_decls"π
WTuple[Union[builtins.str,None],builtins.list[builtins.str],builtins.list[builtins.str]]D
Union[builtins.str,None]
builtins.str"builtins.str
NoneJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*0
self&
click.core.Option"click.core.Option*Y
declsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*0
expose_value
builtins.bool"builtins.bool*„
add_to_parserclick.core.Option.add_to_parser"
None*0
self&
click.core.Option"click.core.Option*B
parser6
click.parser.OptionParser"click.parser.OptionParser*1
ctx(
click.core.Context"click.core.Context*∏
get_help_record!click.core.Option.get_help_record"ú
,Union[Tuple[builtins.str,builtins.str],None]`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
None*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context*§
prompt_for_value"click.core.Option.prompt_for_value"
Any*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context*È
resolve_envvar_value&click.core.Option.resolve_envvar_value"D
Union[builtins.str,None]
builtins.str"builtins.str
None*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context*≈
value_from_envvar#click.core.Option.value_from_envvar"&
Union[Any,None]
Any
None*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context*†
consume_valueclick.core.Option.consume_value"l
%Tuple[Any,click.core.ParameterSource]
Any8
click.core.ParameterSource"click.core.ParameterSource*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context*ö
optsè
1typing.Mapping[builtins.str,click.core.Parameter]
builtins.str"builtins.str,
click.core.Parameter"click.core.Parameter"typing.Mapping2∞
get_defaultclick.core.Option.get_defaultñ
get_defaultclick.core.Option.get_default"&
Union[Any,None]
Any
None*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context*F
call:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:typing.overloadXË
get_defaultclick.core.Option.get_default"ì
/Union[Any,CallableType[builtins.function],None]
AnyK
CallableType[builtins.function]&
builtins.function"builtins.function
None*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context**
call
builtins.bool"builtins.bool 0:typing.overloadXrR
param_type_name!click.core.Option.param_type_name
builtins.str"builtins.strrh
promptclick.core.Option.promptD
Union[builtins.str,None]
builtins.str"builtins.str
Noner°
confirmation_prompt%click.core.Option.confirmation_promptc
!Union[builtins.bool,builtins.str]
builtins.bool"builtins.bool
builtins.str"builtins.strrT
prompt_required!click.core.Option.prompt_required
builtins.bool"builtins.boolrJ

hide_inputclick.core.Option.hide_input
builtins.bool"builtins.boolrB
hiddenclick.core.Option.hidden
builtins.bool"builtins.boolrX
_flag_needs_value#click.core.Option._flag_needs_value
builtins.bool"builtins.boolr´
defaultclick.core.Option.defaultÑ
*Union[Any,CallableType[builtins.function]]
AnyK
CallableType[builtins.function]&
builtins.function"builtins.functionrD
is_flagclick.core.Option.is_flag
builtins.bool"builtins.boolrN
is_bool_flagclick.core.Option.is_bool_flag
builtins.bool"builtins.boolr3

flag_valueclick.core.Option.flag_value
Anyr@
countclick.core.Option.count
builtins.bool"builtins.boolrZ
allow_from_autoenv$click.core.Option.allow_from_autoenv
builtins.bool"builtins.boolrd
helpclick.core.Option.helpD
Union[builtins.str,None]
builtins.str"builtins.str
Noner¢
show_defaultclick.core.Option.show_defaultr
&Union[builtins.bool,builtins.str,None]
builtins.bool"builtins.bool
builtins.str"builtins.str
NonerN
show_choicesclick.core.Option.show_choices
builtins.bool"builtins.boolrL
show_envvarclick.core.Option.show_envvar
builtins.bool"builtins.boolÍA
CoreParameterclick.core.Parameter"builtins.object*ì
__init__click.core.Parameter.__init__"
None*6
self,
click.core.Parameter"click.core.Parameter*õ
param_declsá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *x
typel
%Union[click.types.ParamType,Any,None].
click.types.ParamType"click.types.ParamType
Any
None *.
required
builtins.bool"builtins.bool *£
defaultì
/Union[Any,CallableType[builtins.function],None]
AnyK
CallableType[builtins.function]&
builtins.function"builtins.function
None *ó
callbackÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *Q
nargsD
Union[builtins.int,None]
builtins.int"builtins.int
None *.
multiple
builtins.bool"builtins.bool *S
metavarD
Union[builtins.str,None]
builtins.str"builtins.str
None *2
expose_value
builtins.bool"builtins.bool *.
is_eager
builtins.bool"builtins.bool *¡
envvar≤
6Union[builtins.str,typing.Sequence[builtins.str],None]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *ù
shell_completeÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *¬
to_info_dict!click.core.Parameter.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*6
self,
click.core.Parameter"click.core.Parameter*w
__repr__click.core.Parameter.__repr__"
builtins.str"builtins.str*.,
click.core.Parameter"click.core.Parameter*≤
_parse_decls!click.core.Parameter._parse_decls"π
WTuple[Union[builtins.str,None],builtins.list[builtins.str],builtins.list[builtins.str]]D
Union[builtins.str,None]
builtins.str"builtins.str
NoneJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*6
self,
click.core.Parameter"click.core.Parameter*Y
declsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*0
expose_value
builtins.bool"builtins.bool*¨
human_readable_name(click.core.Parameter.human_readable_name"
builtins.str"builtins.str*6
self,
click.core.Parameter"click.core.Parameter0:builtins.property`*á
make_metavar!click.core.Parameter.make_metavar"
builtins.str"builtins.str*6
self,
click.core.Parameter"click.core.Parameter*Ï
add_to_parser"click.core.Parameter.add_to_parser"
None*6
self,
click.core.Parameter"click.core.Parameter*B
parser6
click.parser.OptionParser"click.parser.OptionParser*1
ctx(
click.core.Context"click.core.Context*Ò
consume_value"click.core.Parameter.consume_value"l
%Tuple[Any,click.core.ParameterSource]
Any8
click.core.ParameterSource"click.core.ParameterSource*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*c
optsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping*ø
type_cast_value$click.core.Parameter.type_cast_value"
Any*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*
value
Any*•
value_is_missing%click.core.Parameter.value_is_missing"
builtins.bool"builtins.bool*6
self,
click.core.Parameter"click.core.Parameter*
value
Any*ª
process_value"click.core.Parameter.process_value"
Any*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*
value
Any*Ú
resolve_envvar_value)click.core.Parameter.resolve_envvar_value"D
Union[builtins.str,None]
builtins.str"builtins.str
None*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*Œ
value_from_envvar&click.core.Parameter.value_from_envvar"&
Union[Any,None]
Any
None*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*Ê
handle_parse_result(click.core.Parameter.handle_parse_result"
&Tuple[Any,builtins.list[builtins.str]]
AnyJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*c
optsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*¡
get_help_record$click.core.Parameter.get_help_record"ú
,Union[Tuple[builtins.str,builtins.str],None]`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
None*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*
get_usage_pieces%click.core.Parameter.get_usage_pieces"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*æ
get_error_hint#click.core.Parameter.get_error_hint"
builtins.str"builtins.str*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*Ê
shell_complete#click.core.Parameter.shell_complete"ï
4builtins.list[click.shell_completion.CompletionItem]N
%click.shell_completion.CompletionItem"%click.shell_completion.CompletionItem"builtins.list*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*,

incomplete
builtins.str"builtins.str2≈
get_default click.core.Parameter.get_defaultü
get_default click.core.Parameter.get_default"&
Union[Any,None]
Any
None*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*F
call:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:typing.overloadXÒ
get_default click.core.Parameter.get_default"ì
/Union[Any,CallableType[builtins.function],None]
AnyK
CallableType[builtins.function]&
builtins.function"builtins.function
None*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context**
call
builtins.bool"builtins.bool 0:typing.overloadXrU
param_type_name$click.core.Parameter.param_type_name
builtins.str"builtins.strrg
nameclick.core.Parameter.nameD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerm
optsclick.core.Parameter.optsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrÅ
secondary_opts#click.core.Parameter.secondary_optsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrQ
typeclick.core.Parameter.type.
click.types.ParamType"click.types.ParamTyperI
requiredclick.core.Parameter.required
builtins.bool"builtins.boolr≤
callbackclick.core.Parameter.callbackÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
NonerA
nargsclick.core.Parameter.nargs
builtins.int"builtins.intrI
multipleclick.core.Parameter.multiple
builtins.bool"builtins.boolrQ
expose_value!click.core.Parameter.expose_value
builtins.bool"builtins.boolrΩ
defaultclick.core.Parameter.defaultì
/Union[Any,CallableType[builtins.function],None]
AnyK
CallableType[builtins.function]&
builtins.function"builtins.function
NonerI
is_eagerclick.core.Parameter.is_eager
builtins.bool"builtins.boolrm
metavarclick.core.Parameter.metavarD
Union[builtins.str,None]
builtins.str"builtins.str
Noner⁄
envvarclick.core.Parameter.envvar≤
6Union[builtins.str,typing.Sequence[builtins.str],None]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
NonerŒ
_custom_shell_complete+click.core.Parameter._custom_shell_completeÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
Noneá
Optionclick.parser.Option"builtins.object*˜
__init__click.parser.Option.__init__"
None*4
self*
click.parser.Option"click.parser.Option*/
obj&
click.core.Option"click.core.Option*X
optsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*N
destD
Union[builtins.str,None]
builtins.str"builtins.str
None*R
actionD
Union[builtins.str,None]
builtins.str"builtins.str
None *)
nargs
builtins.int"builtins.int *3
const&
Union[Any,None]
Any
None *õ
takes_valueclick.parser.Option.takes_value"
builtins.bool"builtins.bool*4
self*
click.parser.Option"click.parser.Option0:builtins.property`*“
processclick.parser.Option.process"
None*4
self*
click.parser.Option"click.parser.Option*'
value
builtins.str"builtins.str*A
state6
click.parser.ParsingState"click.parser.ParsingStaterz
_short_optsclick.parser.Option._short_optsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrx

_long_optsclick.parser.Option._long_optsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrr
prefixesclick.parser.Option.prefixesH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.setrf
destclick.parser.Option.destD
Union[builtins.str,None]
builtins.str"builtins.str
NonerB
actionclick.parser.Option.action
builtins.str"builtins.strr@
nargsclick.parser.Option.nargs
builtins.int"builtins.intrJ
constclick.parser.Option.const&
Union[Any,None]
Any
NonerF
objclick.parser.Option.obj&
click.core.Option"click.core.OptionÉ
Argumentclick.parser.Argument"builtins.object*û
__init__click.parser.Argument.__init__"
None*8
self.
click.parser.Argument"click.parser.Argument*3
obj*
click.core.Argument"click.core.Argument*N
destD
Union[builtins.str,None]
builtins.str"builtins.str
None*)
nargs
builtins.int"builtins.int *±
processclick.parser.Argument.process"
None*8
self.
click.parser.Argument"click.parser.Argument*ˇ
valueÛ
BUnion[builtins.str,None,typing.Sequence[Union[builtins.str,None]]]
builtins.str"builtins.str
NoneÇ
)typing.Sequence[Union[builtins.str,None]]D
Union[builtins.str,None]
builtins.str"builtins.str
None"typing.Sequence*A
state6
click.parser.ParsingState"click.parser.ParsingStaterh
destclick.parser.Argument.destD
Union[builtins.str,None]
builtins.str"builtins.str
NonerB
nargsclick.parser.Argument.nargs
builtins.int"builtins.intrL
objclick.parser.Argument.obj*
click.core.Argument"click.core.Argumentä
ParsingStateclick.parser.ParsingState"builtins.object*—
__init__"click.parser.ParsingState.__init__"
None*@
self6
click.parser.ParsingState"click.parser.ParsingState*U
rargsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listr
optsclick.parser.ParsingState.optsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrt
largsclick.parser.ParsingState.largsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrt
rargsclick.parser.ParsingState.rargsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrå
orderclick.parser.ParsingState.orderb
#builtins.list[click.core.Parameter],
click.core.Parameter"click.core.Parameter"builtins.list»!
OptionParserclick.parser.OptionParser"builtins.object*›
__init__"click.parser.OptionParser.__init__"
None*@
self6
click.parser.OptionParser"click.parser.OptionParser*a
ctxV
Union[click.core.Context,None](
click.core.Context"click.core.Context
None *ç

add_option$click.parser.OptionParser.add_option"
None*@
self6
click.parser.OptionParser"click.parser.OptionParser*/
obj&
click.core.Option"click.core.Option*X
optsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*N
destD
Union[builtins.str,None]
builtins.str"builtins.str
None*R
actionD
Union[builtins.str,None]
builtins.str"builtins.str
None *)
nargs
builtins.int"builtins.int *3
const&
Union[Any,None]
Any
None *≤
add_argument&click.parser.OptionParser.add_argument"
None*@
self6
click.parser.OptionParser"click.parser.OptionParser*3
obj*
click.core.Argument"click.core.Argument*N
destD
Union[builtins.str,None]
builtins.str"builtins.str
None*)
nargs
builtins.int"builtins.int *¿

parse_args$click.parser.OptionParser.parse_args"Û
fTuple[builtins.dict[builtins.str,Any],builtins.list[builtins.str],builtins.list[click.core.Parameter]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listb
#builtins.list[click.core.Parameter],
click.core.Parameter"click.core.Parameter"builtins.list*@
self6
click.parser.OptionParser"click.parser.OptionParser*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*Ÿ
_process_args_for_args0click.parser.OptionParser._process_args_for_args"
None*@
self6
click.parser.OptionParser"click.parser.OptionParser*A
state6
click.parser.ParsingState"click.parser.ParsingState*ﬂ
_process_args_for_options3click.parser.OptionParser._process_args_for_options"
None*@
self6
click.parser.OptionParser"click.parser.OptionParser*A
state6
click.parser.ParsingState"click.parser.ParsingState*Ã
_match_long_opt)click.parser.OptionParser._match_long_opt"
None*@
self6
click.parser.OptionParser"click.parser.OptionParser*%
opt
builtins.str"builtins.str*X
explicit_valueD
Union[builtins.str,None]
builtins.str"builtins.str
None*A
state6
click.parser.ParsingState"click.parser.ParsingState*Ù
_match_short_opt*click.parser.OptionParser._match_short_opt"
None*@
self6
click.parser.OptionParser"click.parser.OptionParser*%
arg
builtins.str"builtins.str*A
state6
click.parser.ParsingState"click.parser.ParsingState*Ω
_get_value_from_state/click.parser.OptionParser._get_value_from_state"
Any*@
self6
click.parser.OptionParser"click.parser.OptionParser*-
option_name
builtins.str"builtins.str*6
option*
click.parser.Option"click.parser.Option*A
state6
click.parser.ParsingState"click.parser.ParsingState*Ó
_process_opts'click.parser.OptionParser._process_opts"
None*@
self6
click.parser.OptionParser"click.parser.OptionParser*%
arg
builtins.str"builtins.str*A
state6
click.parser.ParsingState"click.parser.ParsingStater|
ctxclick.parser.OptionParser.ctxV
Union[click.core.Context,None](
click.core.Context"click.core.Context
Nonerl
allow_interspersed_args1click.parser.OptionParser.allow_interspersed_args
builtins.bool"builtins.boolrj
ignore_unknown_options0click.parser.OptionParser.ignore_unknown_options
builtins.bool"builtins.boolrø

_short_opt$click.parser.OptionParser._short_optä
/builtins.dict[builtins.str,click.parser.Option]
builtins.str"builtins.str*
click.parser.Option"click.parser.Option"builtins.dictrΩ
	_long_opt#click.parser.OptionParser._long_optä
/builtins.dict[builtins.str,click.parser.Option]
builtins.str"builtins.str*
click.parser.Option"click.parser.Option"builtins.dictrÇ
_opt_prefixes'click.parser.OptionParser._opt_prefixesH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.setrè
_argsclick.parser.OptionParser._argse
$builtins.list[click.parser.Argument].
click.parser.Argument"click.parser.Argument"builtins.list]
_gettext.gettext"
builtins.str"builtins.str*)
message
builtins.str"builtins.strã
_unpack_argsclick.parser._unpack_args"•
vTuple[typing.Sequence[Union[builtins.str,typing.Sequence[Union[builtins.str,None]],None]],builtins.list[builtins.str]]‹
Styping.Sequence[Union[builtins.str,typing.Sequence[Union[builtins.str,None]],None]]Û
BUnion[builtins.str,typing.Sequence[Union[builtins.str,None]],None]
builtins.str"builtins.strÇ
)typing.Sequence[Union[builtins.str,None]]D
Union[builtins.str,None]
builtins.str"builtins.str
None"typing.Sequence
None"typing.SequenceJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*X
argsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*^

nargs_specN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence¨
	split_optclick.parser.split_opt"`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str*%
opt
builtins.str"builtins.str—
normalize_optclick.parser.normalize_opt"
builtins.str"builtins.str*%
opt
builtins.str"builtins.str*_
ctxV
Union[click.core.Context,None](
click.core.Context"click.core.Context
Noneß
split_arg_stringclick.parser.split_arg_string"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*(
string
builtins.str"builtins.str*à
__annotations__click.parser.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
ttyping *
tetyping_extensions *W
_flag_needs_valueclick.parser._flag_needs_value"
builtins.object"builtins.object