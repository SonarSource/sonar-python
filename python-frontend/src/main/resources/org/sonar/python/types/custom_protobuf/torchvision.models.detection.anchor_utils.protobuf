
)torchvision.models.detection.anchor_utils¯
	ImageList1torchvision.models.detection.image_list.ImageList"*SonarPythonAnalyzerFakeStub.CustomStubBase*§
__init__:torchvision.models.detection.image_list.ImageList.__init__"
None*p
selff
1torchvision.models.detection.image_list.ImageList"1torchvision.models.detection.image_list.ImageList*)
tensors
torch.Tensor"torch.Tensor*¥
image_sizes¢
/builtins.list[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.list*æ
to4torchvision.models.detection.image_list.ImageList.to"f
1torchvision.models.detection.image_list.ImageList"1torchvision.models.detection.image_list.ImageList*p
selff
1torchvision.models.detection.image_list.ImageList"1torchvision.models.detection.image_list.ImageList*(
device
torch.device"torch.devicerM
tensors9torchvision.models.detection.image_list.ImageList.tensors
AnyrU
image_sizes=torchvision.models.detection.image_list.ImageList.image_sizes
Any¢
Tensortorch.Tensor"*SonarPythonAnalyzerFakeStub.CustomStubBase*›

new_tensortorch.Tensor.new_tensor"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
data
Any*N
dtypeA
Union[torch.dtype,None]
torch.dtype"torch.dtype
None *}
deviceo
%Union[builtins.str,torch.device,None]
builtins.str"builtins.str
torch.device"torch.device
None *\
requires_gradG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *0

pin_memory
builtins.bool"builtins.bool ›
AnchorGenerator9torchvision.models.detection.anchor_utils.AnchorGenerator"torch.nn.modules.module.Module*è
__init__Btorchvision.models.detection.anchor_utils.AnchorGenerator.__init__"
None*Ä
selfv
9torchvision.models.detection.anchor_utils.AnchorGenerator"9torchvision.models.detection.anchor_utils.AnchorGenerator*
sizes
Any *
aspect_ratios
Any *ë
generate_anchorsJtorchvision.models.detection.anchor_utils.AnchorGenerator.generate_anchors"
torch.Tensor"torch.Tensor*Ä
selfv
9torchvision.models.detection.anchor_utils.AnchorGenerator"9torchvision.models.detection.anchor_utils.AnchorGenerator*V
scalesJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*c
aspect_ratiosP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.list*'
dtype
torch.dtype"torch.dtype **
device
torch.device"torch.device *ª
set_cell_anchorsJtorchvision.models.detection.anchor_utils.AnchorGenerator.set_cell_anchors"
Any*Ä
selfv
9torchvision.models.detection.anchor_utils.AnchorGenerator"9torchvision.models.detection.anchor_utils.AnchorGenerator*%
dtype
torch.dtype"torch.dtype*(
device
torch.device"torch.device*Ω
num_anchors_per_locationRtorchvision.models.detection.anchor_utils.AnchorGenerator.num_anchors_per_location"J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*Ä
selfv
9torchvision.models.detection.anchor_utils.AnchorGenerator"9torchvision.models.detection.anchor_utils.AnchorGenerator*ÿ
grid_anchorsFtorchvision.models.detection.anchor_utils.AnchorGenerator.grid_anchors"J
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*Ä
selfv
9torchvision.models.detection.anchor_utils.AnchorGenerator"9torchvision.models.detection.anchor_utils.AnchorGenerator*ò

grid_sizesá
*builtins.list[builtins.list[builtins.int]]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list"builtins.list*ï
stridesá
*builtins.list[builtins.list[torch.Tensor]]J
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list"builtins.list*Ò
forwardAtorchvision.models.detection.anchor_utils.AnchorGenerator.forward"J
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*Ä
selfv
9torchvision.models.detection.anchor_utils.AnchorGenerator"9torchvision.models.detection.anchor_utils.AnchorGenerator*v

image_listf
1torchvision.models.detection.image_list.ImageList"1torchvision.models.detection.image_list.ImageList*\
feature_mapsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.listre
__annotations__Itorchvision.models.detection.anchor_utils.AnchorGenerator.__annotations__
AnyrQ
sizes?torchvision.models.detection.anchor_utils.AnchorGenerator.sizes
Anyra
aspect_ratiosGtorchvision.models.detection.anchor_utils.AnchorGenerator.aspect_ratios
Anyr_
cell_anchorsFtorchvision.models.detection.anchor_utils.AnchorGenerator.cell_anchors
AnyÛ
DefaultBoxGenerator=torchvision.models.detection.anchor_utils.DefaultBoxGenerator"torch.nn.modules.module.Module*ƒ
__init__Ftorchvision.models.detection.anchor_utils.DefaultBoxGenerator.__init__"
None*à
self~
=torchvision.models.detection.anchor_utils.DefaultBoxGenerator"=torchvision.models.detection.anchor_utils.DefaultBoxGenerator*õ
aspect_ratiosá
*builtins.list[builtins.list[builtins.int]]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list"builtins.list*1
	min_ratio 
builtins.float"builtins.float *1
	max_ratio 
builtins.float"builtins.float *ò
scalesâ
)Union[builtins.list[builtins.float],None]P
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.list
None *è
stepsÅ
'Union[builtins.list[builtins.int],None]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list
None **
clip
builtins.bool"builtins.bool *…
num_anchors_per_locationVtorchvision.models.detection.anchor_utils.DefaultBoxGenerator.num_anchors_per_location"J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*à
self~
=torchvision.models.detection.anchor_utils.DefaultBoxGenerator"=torchvision.models.detection.anchor_utils.DefaultBoxGenerator*˝
forwardEtorchvision.models.detection.anchor_utils.DefaultBoxGenerator.forward"J
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*à
self~
=torchvision.models.detection.anchor_utils.DefaultBoxGenerator"=torchvision.models.detection.anchor_utils.DefaultBoxGenerator*v

image_listf
1torchvision.models.detection.image_list.ImageList"1torchvision.models.detection.image_list.ImageList*\
feature_mapsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.listre
aspect_ratiosKtorchvision.models.detection.anchor_utils.DefaultBoxGenerator.aspect_ratios
AnyrU
stepsCtorchvision.models.detection.anchor_utils.DefaultBoxGenerator.steps
AnyrS
clipBtorchvision.models.detection.anchor_utils.DefaultBoxGenerator.clip
AnyrW
scalesDtorchvision.models.detection.anchor_utils.DefaultBoxGenerator.scales
Any*•
__annotations__9torchvision.models.detection.anchor_utils.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict