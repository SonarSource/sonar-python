
pandas.io.parsers.readers˚$
TextFileReader(pandas.io.parsers.readers.TextFileReader"typing.Iterator*÷
__init__1pandas.io.parsers.readers.TextFileReader.__init__"
None*^
selfT
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*±
f©
™Union[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadCsvBuffer[builtins.bytes],pandas._typing.ReadCsvBuffer[builtins.str],builtins.list[Any]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathn
,pandas._typing.ReadCsvBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadCsvBufferh
*pandas._typing.ReadCsvBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadCsvBuffer,
builtins.list[Any]
Any"builtins.list*Â
engine÷
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]–
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.CSVEngine
None *
kwds
Any*°
close.pandas.io.parsers.readers.TextFileReader.close"
None*^
selfT
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*§
read-pandas.io.parsers.readers.TextFileReader.read":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*^
selfT
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *≠
	get_chunk2pandas.io.parsers.readers.TextFileReader.get_chunk":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*^
selfT
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*P
sizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ÿ
__next__1pandas.io.parsers.readers.TextFileReader.__next__":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*^
selfT
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*™
	__enter__2pandas.io.parsers.readers.TextFileReader.__enter__"±
-pandas.io.parsers.readers.TextFileReader.SelfT
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*¥±
-pandas.io.parsers.readers.TextFileReader.SelfT
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*¯
__exit__1pandas.io.parsers.readers.TextFileReader.__exit__"
None*VT
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*ìê
(Union[Type[builtins.BaseException],None]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type
None*db
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*[Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
Nonerå
engine/pandas.io.parsers.readers.TextFileReader.engine–
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.CSVEnginer†
orig_options5pandas.io.parsers.readers.TextFileReader.orig_optionsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingrÖ
	chunksize2pandas.io.parsers.readers.TextFileReader.chunksizeD
Union[builtins.int,None]
builtins.int"builtins.int
Noner}
nrows.pandas.io.parsers.readers.TextFileReader.nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
Noner[
squeeze0pandas.io.parsers.readers.TextFileReader.squeeze
builtins.bool"builtins.boolrø
handles0pandas.io.parsers.readers.TextFileReader.handlesÅ
+Union[pandas.io.common.IOHandles[Any],None]F
pandas.io.common.IOHandles[Any]
Any"pandas.io.common.IOHandles
None"Ø 
read_csv"pandas.io.parsers.readers.read_csv∞n
read_csv"pandas.io.parsers.readers.read_csv"T
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*Å
filepath_or_bufferË
óUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadCsvBuffer[builtins.bytes],pandas._typing.ReadCsvBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathn
,pandas._typing.ReadCsvBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadCsvBufferh
*pandas._typing.ReadCsvBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadCsvBuffer*O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *U
	delimiterD
Union[builtins.str,None]
builtins.str"builtins.str
None *ê
headerÅ
LUnion[builtins.int,typing.Sequence[builtins.int],Literal[builtins.str],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *è
namesÅ
ùUnion[TypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]],None]“
ëTypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]]ò
ÜUnion[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]ù
0typing.MutableSequence[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSequence9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayç
(builtins.tuple[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.tuple 
builtins.range"builtins.range"pandas._typing.ListLikeHashable
None *Ø
	index_colù
nUnion[builtins.int,builtins.str,typing.Sequence[Union[builtins.str,builtins.int]],Literal[builtins.bool],None]
builtins.int"builtins.int
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"typing.Sequence:
Literal[builtins.bool]	
builtins.bool"builtins.bool
None *µ
usecols•
TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]é
ÂUnion[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]\
$typing.MutableSequence[builtins.str]
builtins.str"builtins.str"typing.MutableSequenceL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceD
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayK
CallableType[builtins.function]&
builtins.function"builtins.function
None"pandas._typing.UsecolsArgType *Ó
dtype‡
°Union[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],collections.defaultdict[Any,Any],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArgM
 collections.defaultdict[Any,Any]
Any
Any"collections.defaultdict
None *Â
engine÷
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]–
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.CSVEngine
None *Ñ

convertersÒ
÷Union[typing.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]],typing.Mapping[builtins.int,CallableType[builtins.function]],typing.Mapping[builtins.str,CallableType[builtins.function]],None]ë
Ptyping.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.int,CallableType[builtins.function]]
builtins.int"builtins.intK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mapping
None *]
true_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *^
false_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *6
skipinitialspace
builtins.bool"builtins.bool *°
skiprowsê
QUnion[builtins.int,typing.Sequence[builtins.int],CallableType[builtins.function]]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function *.

skipfooter
builtins.int"builtins.int *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ç
	na_values
_Union[typing.Sequence[builtins.str],typing.Mapping[builtins.str,typing.Sequence[builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence∫
:typing.Mapping[builtins.str,typing.Sequence[builtins.str]]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"typing.Mapping *5
keep_default_na
builtins.bool"builtins.bool */
	na_filter
builtins.bool"builtins.bool *-
verbose
builtins.bool"builtins.bool *6
skip_blank_lines
builtins.bool"builtins.bool *Ÿ
parse_dates≈
 Union[builtins.bool,builtins.list[builtins.int],builtins.list[builtins.str],typing.Sequence[typing.Sequence[builtins.int]],typing.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]]
builtins.bool"builtins.boolJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listë
.typing.Sequence[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"typing.Sequenceß
Ntyping.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"typing.Sequence"typing.Mapping *;
infer_datetime_format
builtins.bool"builtins.bool *3
keep_date_col
builtins.bool"builtins.bool *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *.
dayfirst
builtins.bool"builtins.bool *1
cache_dates
builtins.bool"builtins.bool *H
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool*U
	chunksizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *U
	thousandsD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
decimal
builtins.str"builtins.str *Z
lineterminatorD
Union[builtins.str,None]
builtins.str"builtins.str
None *-
	quotechar
builtins.str"builtins.str *·
quoting—
iTypeAlias[Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]]∆
^Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int"pandas._typing.CSVQuoting *1
doublequote
builtins.bool"builtins.bool *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
commentD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *[
encoding_errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *o
dialect`
 Union[builtins.str,_csv.Dialect]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect *˘
on_bad_lines‰
hUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *6
delim_whitespace
builtins.bool"builtins.bool *0

low_memory
builtins.bool"builtins.bool *0

memory_map
builtins.bool"builtins.bool *û
float_precisionÜ
MUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *Ÿ
storage_options¡
BUnion[TypeAlias[Union[builtins.dict[builtins.str,Any],None]],None]Ó
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions
None *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault 0:typing.overloadXÏm
read_csv"pandas.io.parsers.readers.read_csv"T
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*Å
filepath_or_bufferË
óUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadCsvBuffer[builtins.bytes],pandas._typing.ReadCsvBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathn
,pandas._typing.ReadCsvBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadCsvBufferh
*pandas._typing.ReadCsvBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadCsvBuffer*O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *U
	delimiterD
Union[builtins.str,None]
builtins.str"builtins.str
None *ê
headerÅ
LUnion[builtins.int,typing.Sequence[builtins.int],Literal[builtins.str],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *è
namesÅ
ùUnion[TypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]],None]“
ëTypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]]ò
ÜUnion[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]ù
0typing.MutableSequence[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSequence9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayç
(builtins.tuple[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.tuple 
builtins.range"builtins.range"pandas._typing.ListLikeHashable
None *Ø
	index_colù
nUnion[builtins.int,builtins.str,typing.Sequence[Union[builtins.str,builtins.int]],Literal[builtins.bool],None]
builtins.int"builtins.int
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"typing.Sequence:
Literal[builtins.bool]	
builtins.bool"builtins.bool
None *µ
usecols•
TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]é
ÂUnion[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]\
$typing.MutableSequence[builtins.str]
builtins.str"builtins.str"typing.MutableSequenceL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceD
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayK
CallableType[builtins.function]&
builtins.function"builtins.function
None"pandas._typing.UsecolsArgType *Ó
dtype‡
°Union[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],collections.defaultdict[Any,Any],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArgM
 collections.defaultdict[Any,Any]
Any
Any"collections.defaultdict
None *Â
engine÷
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]–
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.CSVEngine
None *Ñ

convertersÒ
÷Union[typing.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]],typing.Mapping[builtins.int,CallableType[builtins.function]],typing.Mapping[builtins.str,CallableType[builtins.function]],None]ë
Ptyping.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.int,CallableType[builtins.function]]
builtins.int"builtins.intK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mapping
None *]
true_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *^
false_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *6
skipinitialspace
builtins.bool"builtins.bool *°
skiprowsê
QUnion[builtins.int,typing.Sequence[builtins.int],CallableType[builtins.function]]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function *.

skipfooter
builtins.int"builtins.int *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ç
	na_values
_Union[typing.Sequence[builtins.str],typing.Mapping[builtins.str,typing.Sequence[builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence∫
:typing.Mapping[builtins.str,typing.Sequence[builtins.str]]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"typing.Mapping *5
keep_default_na
builtins.bool"builtins.bool */
	na_filter
builtins.bool"builtins.bool *-
verbose
builtins.bool"builtins.bool *6
skip_blank_lines
builtins.bool"builtins.bool *Ÿ
parse_dates≈
 Union[builtins.bool,builtins.list[builtins.int],builtins.list[builtins.str],typing.Sequence[typing.Sequence[builtins.int]],typing.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]]
builtins.bool"builtins.boolJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listë
.typing.Sequence[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"typing.Sequenceß
Ntyping.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"typing.Sequence"typing.Mapping *;
infer_datetime_format
builtins.bool"builtins.bool *3
keep_date_col
builtins.bool"builtins.bool *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *.
dayfirst
builtins.bool"builtins.bool *1
cache_dates
builtins.bool"builtins.bool *.
iterator
builtins.bool"builtins.bool *+
	chunksize
builtins.int"builtins.int*Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *U
	thousandsD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
decimal
builtins.str"builtins.str *Z
lineterminatorD
Union[builtins.str,None]
builtins.str"builtins.str
None *-
	quotechar
builtins.str"builtins.str *·
quoting—
iTypeAlias[Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]]∆
^Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int"pandas._typing.CSVQuoting *1
doublequote
builtins.bool"builtins.bool *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
commentD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *[
encoding_errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *o
dialect`
 Union[builtins.str,_csv.Dialect]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect *˘
on_bad_lines‰
hUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *6
delim_whitespace
builtins.bool"builtins.bool *0

low_memory
builtins.bool"builtins.bool *0

memory_map
builtins.bool"builtins.bool *û
float_precisionÜ
MUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *Ÿ
storage_options¡
BUnion[TypeAlias[Union[builtins.dict[builtins.str,Any],None]],None]Ó
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions
None *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault 0:typing.overloadX‹m
read_csv"pandas.io.parsers.readers.read_csv":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*Å
filepath_or_bufferË
óUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadCsvBuffer[builtins.bytes],pandas._typing.ReadCsvBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathn
,pandas._typing.ReadCsvBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadCsvBufferh
*pandas._typing.ReadCsvBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadCsvBuffer*O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *U
	delimiterD
Union[builtins.str,None]
builtins.str"builtins.str
None *ê
headerÅ
LUnion[builtins.int,typing.Sequence[builtins.int],Literal[builtins.str],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *è
namesÅ
ùUnion[TypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]],None]“
ëTypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]]ò
ÜUnion[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]ù
0typing.MutableSequence[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSequence9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayç
(builtins.tuple[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.tuple 
builtins.range"builtins.range"pandas._typing.ListLikeHashable
None *Ø
	index_colù
nUnion[builtins.int,builtins.str,typing.Sequence[Union[builtins.str,builtins.int]],Literal[builtins.bool],None]
builtins.int"builtins.int
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"typing.Sequence:
Literal[builtins.bool]	
builtins.bool"builtins.bool
None *µ
usecols•
TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]é
ÂUnion[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]\
$typing.MutableSequence[builtins.str]
builtins.str"builtins.str"typing.MutableSequenceL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceD
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayK
CallableType[builtins.function]&
builtins.function"builtins.function
None"pandas._typing.UsecolsArgType *Ó
dtype‡
°Union[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],collections.defaultdict[Any,Any],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArgM
 collections.defaultdict[Any,Any]
Any
Any"collections.defaultdict
None *Â
engine÷
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]–
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.CSVEngine
None *Ñ

convertersÒ
÷Union[typing.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]],typing.Mapping[builtins.int,CallableType[builtins.function]],typing.Mapping[builtins.str,CallableType[builtins.function]],None]ë
Ptyping.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.int,CallableType[builtins.function]]
builtins.int"builtins.intK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mapping
None *]
true_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *^
false_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *6
skipinitialspace
builtins.bool"builtins.bool *°
skiprowsê
QUnion[builtins.int,typing.Sequence[builtins.int],CallableType[builtins.function]]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function *.

skipfooter
builtins.int"builtins.int *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ç
	na_values
_Union[typing.Sequence[builtins.str],typing.Mapping[builtins.str,typing.Sequence[builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence∫
:typing.Mapping[builtins.str,typing.Sequence[builtins.str]]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"typing.Mapping *5
keep_default_na
builtins.bool"builtins.bool */
	na_filter
builtins.bool"builtins.bool *-
verbose
builtins.bool"builtins.bool *6
skip_blank_lines
builtins.bool"builtins.bool *Ÿ
parse_dates≈
 Union[builtins.bool,builtins.list[builtins.int],builtins.list[builtins.str],typing.Sequence[typing.Sequence[builtins.int]],typing.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]]
builtins.bool"builtins.boolJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listë
.typing.Sequence[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"typing.Sequenceß
Ntyping.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"typing.Sequence"typing.Mapping *;
infer_datetime_format
builtins.bool"builtins.bool *3
keep_date_col
builtins.bool"builtins.bool *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *.
dayfirst
builtins.bool"builtins.bool *1
cache_dates
builtins.bool"builtins.bool *J
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
	chunksize
None *Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *U
	thousandsD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
decimal
builtins.str"builtins.str *Z
lineterminatorD
Union[builtins.str,None]
builtins.str"builtins.str
None *-
	quotechar
builtins.str"builtins.str *·
quoting—
iTypeAlias[Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]]∆
^Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int"pandas._typing.CSVQuoting *1
doublequote
builtins.bool"builtins.bool *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
commentD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *[
encoding_errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *o
dialect`
 Union[builtins.str,_csv.Dialect]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect *˘
on_bad_lines‰
hUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *6
delim_whitespace
builtins.bool"builtins.bool *0

low_memory
builtins.bool"builtins.bool *0

memory_map
builtins.bool"builtins.bool *û
float_precisionÜ
MUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *Ÿ
storage_options¡
BUnion[TypeAlias[Union[builtins.dict[builtins.str,Any],None]],None]Ó
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions
None *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault 0:typing.overloadX"¿º

read_table$pandas.io.parsers.readers.read_tableﬂi

read_table$pandas.io.parsers.readers.read_table"T
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*Å
filepath_or_bufferË
óUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadCsvBuffer[builtins.bytes],pandas._typing.ReadCsvBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathn
,pandas._typing.ReadCsvBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadCsvBufferh
*pandas._typing.ReadCsvBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadCsvBuffer*O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *U
	delimiterD
Union[builtins.str,None]
builtins.str"builtins.str
None *ê
headerÅ
LUnion[builtins.int,typing.Sequence[builtins.int],Literal[builtins.str],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *è
namesÅ
ùUnion[TypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]],None]“
ëTypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]]ò
ÜUnion[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]ù
0typing.MutableSequence[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSequence9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayç
(builtins.tuple[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.tuple 
builtins.range"builtins.range"pandas._typing.ListLikeHashable
None *Ø
	index_colù
nUnion[builtins.int,builtins.str,typing.Sequence[Union[builtins.str,builtins.int]],Literal[builtins.bool],None]
builtins.int"builtins.int
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"typing.Sequence:
Literal[builtins.bool]	
builtins.bool"builtins.bool
None *µ
usecols•
TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]é
ÂUnion[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]\
$typing.MutableSequence[builtins.str]
builtins.str"builtins.str"typing.MutableSequenceL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceD
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayK
CallableType[builtins.function]&
builtins.function"builtins.function
None"pandas._typing.UsecolsArgType *Ó
dtype‡
°Union[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],collections.defaultdict[Any,Any],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArgM
 collections.defaultdict[Any,Any]
Any
Any"collections.defaultdict
None *Â
engine÷
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]–
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.CSVEngine
None *Ñ

convertersÒ
÷Union[typing.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]],typing.Mapping[builtins.int,CallableType[builtins.function]],typing.Mapping[builtins.str,CallableType[builtins.function]],None]ë
Ptyping.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.int,CallableType[builtins.function]]
builtins.int"builtins.intK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mapping
None *]
true_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *^
false_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *6
skipinitialspace
builtins.bool"builtins.bool *°
skiprowsê
QUnion[builtins.int,typing.Sequence[builtins.int],CallableType[builtins.function]]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function *.

skipfooter
builtins.int"builtins.int *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ç
	na_values
_Union[typing.Sequence[builtins.str],typing.Mapping[builtins.str,typing.Sequence[builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence∫
:typing.Mapping[builtins.str,typing.Sequence[builtins.str]]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"typing.Mapping *5
keep_default_na
builtins.bool"builtins.bool */
	na_filter
builtins.bool"builtins.bool *-
verbose
builtins.bool"builtins.bool *6
skip_blank_lines
builtins.bool"builtins.bool *Ÿ
parse_dates≈
 Union[builtins.bool,builtins.list[builtins.int],builtins.list[builtins.str],typing.Sequence[typing.Sequence[builtins.int]],typing.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]]
builtins.bool"builtins.boolJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listë
.typing.Sequence[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"typing.Sequenceß
Ntyping.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"typing.Sequence"typing.Mapping *;
infer_datetime_format
builtins.bool"builtins.bool *3
keep_date_col
builtins.bool"builtins.bool *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *.
dayfirst
builtins.bool"builtins.bool *1
cache_dates
builtins.bool"builtins.bool *H
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool*U
	chunksizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *U
	thousandsD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
decimal
builtins.str"builtins.str *Z
lineterminatorD
Union[builtins.str,None]
builtins.str"builtins.str
None *-
	quotechar
builtins.str"builtins.str *·
quoting—
iTypeAlias[Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]]∆
^Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int"pandas._typing.CSVQuoting *1
doublequote
builtins.bool"builtins.bool *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
commentD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *[
encoding_errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *o
dialect`
 Union[builtins.str,_csv.Dialect]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect *˘
on_bad_lines‰
hUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *6
delim_whitespace
builtins.bool"builtins.bool *0

low_memory
builtins.bool"builtins.bool *0

memory_map
builtins.bool"builtins.bool *û
float_precisionÜ
MUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *Ÿ
storage_options¡
BUnion[TypeAlias[Union[builtins.dict[builtins.str,Any],None]],None]Ó
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions
None 0:typing.overloadXõi

read_table$pandas.io.parsers.readers.read_table"T
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*Å
filepath_or_bufferË
óUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadCsvBuffer[builtins.bytes],pandas._typing.ReadCsvBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathn
,pandas._typing.ReadCsvBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadCsvBufferh
*pandas._typing.ReadCsvBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadCsvBuffer*O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *U
	delimiterD
Union[builtins.str,None]
builtins.str"builtins.str
None *ê
headerÅ
LUnion[builtins.int,typing.Sequence[builtins.int],Literal[builtins.str],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *è
namesÅ
ùUnion[TypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]],None]“
ëTypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]]ò
ÜUnion[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]ù
0typing.MutableSequence[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSequence9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayç
(builtins.tuple[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.tuple 
builtins.range"builtins.range"pandas._typing.ListLikeHashable
None *Ø
	index_colù
nUnion[builtins.int,builtins.str,typing.Sequence[Union[builtins.str,builtins.int]],Literal[builtins.bool],None]
builtins.int"builtins.int
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"typing.Sequence:
Literal[builtins.bool]	
builtins.bool"builtins.bool
None *µ
usecols•
TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]é
ÂUnion[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]\
$typing.MutableSequence[builtins.str]
builtins.str"builtins.str"typing.MutableSequenceL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceD
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayK
CallableType[builtins.function]&
builtins.function"builtins.function
None"pandas._typing.UsecolsArgType *Ó
dtype‡
°Union[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],collections.defaultdict[Any,Any],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArgM
 collections.defaultdict[Any,Any]
Any
Any"collections.defaultdict
None *Â
engine÷
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]–
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.CSVEngine
None *Ñ

convertersÒ
÷Union[typing.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]],typing.Mapping[builtins.int,CallableType[builtins.function]],typing.Mapping[builtins.str,CallableType[builtins.function]],None]ë
Ptyping.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.int,CallableType[builtins.function]]
builtins.int"builtins.intK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mapping
None *]
true_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *^
false_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *6
skipinitialspace
builtins.bool"builtins.bool *°
skiprowsê
QUnion[builtins.int,typing.Sequence[builtins.int],CallableType[builtins.function]]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function *.

skipfooter
builtins.int"builtins.int *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ç
	na_values
_Union[typing.Sequence[builtins.str],typing.Mapping[builtins.str,typing.Sequence[builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence∫
:typing.Mapping[builtins.str,typing.Sequence[builtins.str]]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"typing.Mapping *5
keep_default_na
builtins.bool"builtins.bool */
	na_filter
builtins.bool"builtins.bool *-
verbose
builtins.bool"builtins.bool *6
skip_blank_lines
builtins.bool"builtins.bool *Ÿ
parse_dates≈
 Union[builtins.bool,builtins.list[builtins.int],builtins.list[builtins.str],typing.Sequence[typing.Sequence[builtins.int]],typing.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]]
builtins.bool"builtins.boolJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listë
.typing.Sequence[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"typing.Sequenceß
Ntyping.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"typing.Sequence"typing.Mapping *;
infer_datetime_format
builtins.bool"builtins.bool *3
keep_date_col
builtins.bool"builtins.bool *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *.
dayfirst
builtins.bool"builtins.bool *1
cache_dates
builtins.bool"builtins.bool *.
iterator
builtins.bool"builtins.bool *+
	chunksize
builtins.int"builtins.int*Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *U
	thousandsD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
decimal
builtins.str"builtins.str *Z
lineterminatorD
Union[builtins.str,None]
builtins.str"builtins.str
None *-
	quotechar
builtins.str"builtins.str *·
quoting—
iTypeAlias[Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]]∆
^Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int"pandas._typing.CSVQuoting *1
doublequote
builtins.bool"builtins.bool *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
commentD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *[
encoding_errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *o
dialect`
 Union[builtins.str,_csv.Dialect]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect *˘
on_bad_lines‰
hUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *6
delim_whitespace
builtins.bool"builtins.bool *0

low_memory
builtins.bool"builtins.bool *0

memory_map
builtins.bool"builtins.bool *û
float_precisionÜ
MUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *Ÿ
storage_options¡
BUnion[TypeAlias[Union[builtins.dict[builtins.str,Any],None]],None]Ó
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions
None 0:typing.overloadXãi

read_table$pandas.io.parsers.readers.read_table":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*Å
filepath_or_bufferË
óUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadCsvBuffer[builtins.bytes],pandas._typing.ReadCsvBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathn
,pandas._typing.ReadCsvBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadCsvBufferh
*pandas._typing.ReadCsvBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadCsvBuffer*O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *U
	delimiterD
Union[builtins.str,None]
builtins.str"builtins.str
None *ê
headerÅ
LUnion[builtins.int,typing.Sequence[builtins.int],Literal[builtins.str],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *è
namesÅ
ùUnion[TypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]],None]“
ëTypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]]ò
ÜUnion[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]ù
0typing.MutableSequence[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSequence9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayç
(builtins.tuple[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.tuple 
builtins.range"builtins.range"pandas._typing.ListLikeHashable
None *Ø
	index_colù
nUnion[builtins.int,builtins.str,typing.Sequence[Union[builtins.str,builtins.int]],Literal[builtins.bool],None]
builtins.int"builtins.int
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"typing.Sequence:
Literal[builtins.bool]	
builtins.bool"builtins.bool
None *µ
usecols•
TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]é
ÂUnion[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]\
$typing.MutableSequence[builtins.str]
builtins.str"builtins.str"typing.MutableSequenceL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceD
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayK
CallableType[builtins.function]&
builtins.function"builtins.function
None"pandas._typing.UsecolsArgType *Ó
dtype‡
°Union[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],collections.defaultdict[Any,Any],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArgM
 collections.defaultdict[Any,Any]
Any
Any"collections.defaultdict
None *Â
engine÷
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]–
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.CSVEngine
None *Ñ

convertersÒ
÷Union[typing.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]],typing.Mapping[builtins.int,CallableType[builtins.function]],typing.Mapping[builtins.str,CallableType[builtins.function]],None]ë
Ptyping.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.int,CallableType[builtins.function]]
builtins.int"builtins.intK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mapping
None *]
true_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *^
false_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *6
skipinitialspace
builtins.bool"builtins.bool *°
skiprowsê
QUnion[builtins.int,typing.Sequence[builtins.int],CallableType[builtins.function]]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function *.

skipfooter
builtins.int"builtins.int *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ç
	na_values
_Union[typing.Sequence[builtins.str],typing.Mapping[builtins.str,typing.Sequence[builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence∫
:typing.Mapping[builtins.str,typing.Sequence[builtins.str]]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"typing.Mapping *5
keep_default_na
builtins.bool"builtins.bool */
	na_filter
builtins.bool"builtins.bool *-
verbose
builtins.bool"builtins.bool *6
skip_blank_lines
builtins.bool"builtins.bool *Ÿ
parse_dates≈
 Union[builtins.bool,builtins.list[builtins.int],builtins.list[builtins.str],typing.Sequence[typing.Sequence[builtins.int]],typing.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]]
builtins.bool"builtins.boolJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listë
.typing.Sequence[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"typing.Sequenceß
Ntyping.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"typing.Sequence"typing.Mapping *;
infer_datetime_format
builtins.bool"builtins.bool *3
keep_date_col
builtins.bool"builtins.bool *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *.
dayfirst
builtins.bool"builtins.bool *1
cache_dates
builtins.bool"builtins.bool *J
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
	chunksize
None *Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *U
	thousandsD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
decimal
builtins.str"builtins.str *Z
lineterminatorD
Union[builtins.str,None]
builtins.str"builtins.str
None *-
	quotechar
builtins.str"builtins.str *·
quoting—
iTypeAlias[Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]]∆
^Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int"pandas._typing.CSVQuoting *1
doublequote
builtins.bool"builtins.bool *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
commentD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *[
encoding_errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *o
dialect`
 Union[builtins.str,_csv.Dialect]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect *˘
on_bad_lines‰
hUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *6
delim_whitespace
builtins.bool"builtins.bool *0

low_memory
builtins.bool"builtins.bool *0

memory_map
builtins.bool"builtins.bool *û
float_precisionÜ
MUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *Ÿ
storage_options¡
BUnion[TypeAlias[Union[builtins.dict[builtins.str,Any],None]],None]Ó
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions
None 0:typing.overloadX"â7
read_fwf"pandas.io.parsers.readers.read_fwfŒ
read_fwf"pandas.io.parsers.readers.read_fwf"T
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*Å
filepath_or_bufferË
óUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadCsvBuffer[builtins.bytes],pandas._typing.ReadCsvBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathn
,pandas._typing.ReadCsvBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadCsvBufferh
*pandas._typing.ReadCsvBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadCsvBuffer*‘
colspecs√
SUnion[typing.Sequence[Tuple[builtins.int,builtins.int]],Literal[builtins.str],None]¶
1typing.Sequence[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *ñ
widthsá
)Union[typing.Sequence[builtins.int],None]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence
None */
infer_nrows
builtins.int"builtins.int *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *H
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool*U
	chunksizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *
kwds
Any0:typing.overloadXä
read_fwf"pandas.io.parsers.readers.read_fwf"T
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*Å
filepath_or_bufferË
óUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadCsvBuffer[builtins.bytes],pandas._typing.ReadCsvBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathn
,pandas._typing.ReadCsvBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadCsvBufferh
*pandas._typing.ReadCsvBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadCsvBuffer*‘
colspecs√
SUnion[typing.Sequence[Tuple[builtins.int,builtins.int]],Literal[builtins.str],None]¶
1typing.Sequence[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *ñ
widthsá
)Union[typing.Sequence[builtins.int],None]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence
None */
infer_nrows
builtins.int"builtins.int *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *.
iterator
builtins.bool"builtins.bool *+
	chunksize
builtins.int"builtins.int*
kwds
Any0:typing.overloadX˙
read_fwf"pandas.io.parsers.readers.read_fwf":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*Å
filepath_or_bufferË
óUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadCsvBuffer[builtins.bytes],pandas._typing.ReadCsvBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathn
,pandas._typing.ReadCsvBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadCsvBufferh
*pandas._typing.ReadCsvBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadCsvBuffer*‘
colspecs√
SUnion[typing.Sequence[Tuple[builtins.int,builtins.int]],Literal[builtins.str],None]¶
1typing.Sequence[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *ñ
widthsá
)Union[typing.Sequence[builtins.int],None]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence
None */
infer_nrows
builtins.int"builtins.int *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *J
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
	chunksize
None *
kwds
Any0:typing.overloadX*ï
__annotations__)pandas.io.parsers.readers.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict