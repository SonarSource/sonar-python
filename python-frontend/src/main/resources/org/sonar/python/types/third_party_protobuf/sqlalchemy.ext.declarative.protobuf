
sqlalchemy.ext.declarative²
DeclarativeMeta'sqlalchemy.orm.decl_api.DeclarativeMeta"builtins.type*×
__init__0sqlalchemy.orm.decl_api.DeclarativeMeta.__init__"
None*[
clsR
'sqlalchemy.orm.decl_api.DeclarativeMeta"'sqlalchemy.orm.decl_api.DeclarativeMeta*+
	classname
builtins.str"builtins.str*T
basesI
builtins.tuple[Type[Any]]
	Type[Any]
Any"type"builtins.tuple*b
dict_W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict**
kw"
builtins.object"builtins.objectz38z39z310z311z312z313z314*…
__setattr__3sqlalchemy.orm.decl_api.DeclarativeMeta.__setattr__"
None*[
clsR
'sqlalchemy.orm.decl_api.DeclarativeMeta"'sqlalchemy.orm.decl_api.DeclarativeMeta*%
key
builtins.str"builtins.str*
value
Anyz38z39z310z311z312z313z314*ã
__delattr__3sqlalchemy.orm.decl_api.DeclarativeMeta.__delattr__"
None*TR
'sqlalchemy.orm.decl_api.DeclarativeMeta"'sqlalchemy.orm.decl_api.DeclarativeMeta*
builtins.str"builtins.strz38z39z310z311z312z313z314j38j39j310j311j312j313j314§
declared_attr%sqlalchemy.orm.decl_api.declared_attr"$sqlalchemy.orm.base._MappedAttribute"builtins.property*ƒ
__init__.sqlalchemy.orm.decl_api.declared_attr.__init__"
None*X
selfN
%sqlalchemy.orm.decl_api.declared_attr"%sqlalchemy.orm.decl_api.declared_attr*
fget
Any*/
	cascading
builtins.bool"builtins.bool z38z39z310z311z312z313z314*w
__get__-sqlalchemy.orm.decl_api.declared_attr.__get__*
self*	
self_*
clsz38z39z310z311z312z313z314*•
	cascading/sqlalchemy.orm.decl_api.declared_attr.cascading*
self0:*sqlalchemy.util.langhelpers.hybridpropertyz38z39z310z311z312z313z314j38j39j310j311j312j313j314¼
AbstractConcreteBase:sqlalchemy.ext.declarative.extensions.AbstractConcreteBase"2sqlalchemy.ext.declarative.extensions.ConcreteBase*÷
__declare_first__Lsqlalchemy.ext.declarative.extensions.AbstractConcreteBase.__declare_first__"
None*Î
clsÄ
@Type[sqlalchemy.ext.declarative.extensions.AbstractConcreteBase]x
:sqlalchemy.ext.declarative.extensions.AbstractConcreteBase":sqlalchemy.ext.declarative.extensions.AbstractConcreteBase"type0:builtins.classmethodpz38z39z310z311z312z313z314j38j39j310j311j312j313j314r˜
__no_table__Gsqlalchemy.ext.declarative.extensions.AbstractConcreteBase.__no_table__
builtins.bool"builtins.bool*38*39*310*311*312*313*314Î
ConcreteBase2sqlalchemy.ext.declarative.extensions.ConcreteBase"builtins.object*×
__declare_first__Dsqlalchemy.ext.declarative.extensions.ConcreteBase.__declare_first__"
None*¶
cls¬
8Type[sqlalchemy.ext.declarative.extensions.ConcreteBase]h
2sqlalchemy.ext.declarative.extensions.ConcreteBase"2sqlalchemy.ext.declarative.extensions.ConcreteBase"type0:builtins.classmethodpz38z39z310z311z312z313z314j38j39j310j311j312j313j314ó
DeferredReflection8sqlalchemy.ext.declarative.extensions.DeferredReflection"builtins.object*ð
prepare@sqlalchemy.ext.declarative.extensions.DeferredReflection.prepare"
None*È
cls¾
>Type[sqlalchemy.ext.declarative.extensions.DeferredReflection]t
8sqlalchemy.ext.declarative.extensions.DeferredReflection"8sqlalchemy.ext.declarative.extensions.DeferredReflection"type*
engine
Any0:builtins.classmethodpz38z39z310z311z312z313z314j38j39j310j311j312j313j314ª
has_inherited_table+sqlalchemy.orm.decl_api.has_inherited_table"
builtins.bool"builtins.bool*%
cls
	Type[Any]
Any"typez38z39z310z311z312z313z314¡
synonym_for#sqlalchemy.orm.decl_api.synonym_for"
Any*
name
Any*0

map_column
builtins.bool"builtins.bool z38z39z310z311z312z313z314Å
instrument_declarative<sqlalchemy.ext.declarative.extensions.instrument_declarative"
None*
cls
Any*
cls_registry
Any*
metadata
Anyz38z39z310z311z312z313z314"©
as_declarative&sqlalchemy.orm.decl_api.as_declarative‡
as_declarative&sqlalchemy.orm.decl_api.as_declarative"K
CallableType[builtins.function]&
builtins.function"builtins.function*¥
bind˜
4Union[sqlalchemy.engine.interfaces.Connectable,None]T
(sqlalchemy.engine.interfaces.Connectable"(sqlalchemy.engine.interfaces.Connectable
None *Š
metadataz
*Union[sqlalchemy.sql.schema.MetaData,None]@
sqlalchemy.sql.schema.MetaData"sqlalchemy.sql.schema.MetaData
None *Ê
class_registry³
1Union[builtins.dict[builtins.str,Type[Any]],None]r
%builtins.dict[builtins.str,Type[Any]]
builtins.str"builtins.str
	Type[Any]
Any"type"builtins.dict
None *i
mapper[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None 0:typing.overloadXÃ
as_declarative&sqlalchemy.orm.decl_api.as_declarative"K
CallableType[builtins.function]&
builtins.function"builtins.function*¥
bind˜
4Union[sqlalchemy.engine.interfaces.Connectable,None]T
(sqlalchemy.engine.interfaces.Connectable"(sqlalchemy.engine.interfaces.Connectable
None *Š
metadataz
*Union[sqlalchemy.sql.schema.MetaData,None]@
sqlalchemy.sql.schema.MetaData"sqlalchemy.sql.schema.MetaData
None *Ê
class_registry³
1Union[builtins.dict[builtins.str,Type[Any]],None]r
%builtins.dict[builtins.str,Type[Any]]
builtins.str"builtins.str
	Type[Any]
Any"type"builtins.dict
None *i
mapper[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *¹
	metaclass©
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function",sqlalchemy.orm.decl_api._DeclarativeBaseMeta0:typing.overloadX"38"39"310"311"312"313"314"£
declarative_base(sqlalchemy.orm.decl_api.declarative_baseÿ
declarative_base(sqlalchemy.orm.decl_api.declarative_base"Ž
.Type[sqlalchemy.orm.decl_api._DeclarativeBase]T
(sqlalchemy.orm.decl_api._DeclarativeBase"(sqlalchemy.orm.decl_api._DeclarativeBase"type*¥
bind˜
4Union[sqlalchemy.engine.interfaces.Connectable,None]T
(sqlalchemy.engine.interfaces.Connectable"(sqlalchemy.engine.interfaces.Connectable
None *Š
metadataz
*Union[sqlalchemy.sql.schema.MetaData,None]@
sqlalchemy.sql.schema.MetaData"sqlalchemy.sql.schema.MetaData
None *i
mapper[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *£
cls—
*Union[Type[Any],builtins.tuple[Type[Any]]]
	Type[Any]
Any"typeI
builtins.tuple[Type[Any]]
	Type[Any]
Any"type"builtins.tuple *(
name
builtins.str"builtins.str *^
constructorK
CallableType[builtins.function]&
builtins.function"builtins.function *Ê
class_registry³
1Union[builtins.dict[builtins.str,Type[Any]],None]r
%builtins.dict[builtins.str,Type[Any]]
builtins.str"builtins.str
	Type[Any]
Any"type"builtins.dict
None 0:typing.overloadXæ

declarative_base(sqlalchemy.orm.decl_api.declarative_base"¹
sqlalchemy.orm.decl_api._DeclTŽ
.Type[sqlalchemy.orm.decl_api._DeclarativeBase]T
(sqlalchemy.orm.decl_api._DeclarativeBase"(sqlalchemy.orm.decl_api._DeclarativeBase"type"type*¥
bind˜
4Union[sqlalchemy.engine.interfaces.Connectable,None]T
(sqlalchemy.engine.interfaces.Connectable"(sqlalchemy.engine.interfaces.Connectable
None *Š
metadataz
*Union[sqlalchemy.sql.schema.MetaData,None]@
sqlalchemy.sql.schema.MetaData"sqlalchemy.sql.schema.MetaData
None *i
mapper[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *£
cls—
*Union[Type[Any],builtins.tuple[Type[Any]]]
	Type[Any]
Any"typeI
builtins.tuple[Type[Any]]
	Type[Any]
Any"type"builtins.tuple *(
name
builtins.str"builtins.str *^
constructorK
CallableType[builtins.function]&
builtins.function"builtins.function *Ê
class_registry³
1Union[builtins.dict[builtins.str,Type[Any]],None]r
%builtins.dict[builtins.str,Type[Any]]
builtins.str"builtins.str
	Type[Any]
Any"type"builtins.dict
None *¹
	metaclass©
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function",sqlalchemy.orm.decl_api._DeclarativeBaseMeta0:typing.overloadXØ

declarative_base(sqlalchemy.orm.decl_api.declarative_base"¹
sqlalchemy.orm.decl_api._DeclTŽ
.Type[sqlalchemy.orm.decl_api._DeclarativeBase]T
(sqlalchemy.orm.decl_api._DeclarativeBase"(sqlalchemy.orm.decl_api._DeclarativeBase"type"type*£
bind˜
4Union[sqlalchemy.engine.interfaces.Connectable,None]T
(sqlalchemy.engine.interfaces.Connectable"(sqlalchemy.engine.interfaces.Connectable
None*ˆ
metadataz
*Union[sqlalchemy.sql.schema.MetaData,None]@
sqlalchemy.sql.schema.MetaData"sqlalchemy.sql.schema.MetaData
None*g
mapper[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None*¡
cls—
*Union[Type[Any],builtins.tuple[Type[Any]]]
	Type[Any]
Any"typeI
builtins.tuple[Type[Any]]
	Type[Any]
Any"type"builtins.tuple*&
name
builtins.str"builtins.str*\
constructorK
CallableType[builtins.function]&
builtins.function"builtins.function*È
class_registry³
1Union[builtins.dict[builtins.str,Type[Any]],None]r
%builtins.dict[builtins.str,Type[Any]]
builtins.str"builtins.str
	Type[Any]
Any"type"builtins.dict
None*¹
	metaclass©
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function",sqlalchemy.orm.decl_api._DeclarativeBaseMeta0:typing.overloadX"38"39"310"311"312"313"314*œ
__path__#sqlalchemy.ext.declarative.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*38*39*310*311*312*313*314*·
__annotations__*sqlalchemy.ext.declarative.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313*314*š
__all__"sqlalchemy.ext.declarative.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*38*39*310*311*312*313*314