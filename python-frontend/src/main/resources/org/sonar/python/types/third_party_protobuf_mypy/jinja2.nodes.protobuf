
jinja2.nodes9

Impossiblejinja2.nodes.Impossible"builtins.Exception
NodeTypejinja2.nodes.NodeType"builtins.type*M
__new__jinja2.nodes.NodeType.__new__*
mcs*
name*	
bases*
dñ
EvalContextjinja2.nodes.EvalContext"builtins.object*•
__init__!jinja2.nodes.EvalContext.__init__"
None*>
self4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext*Q
environment@
jinja2.environment.Environment"jinja2.environment.Environment*Y
template_nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *¿
savejinja2.nodes.EvalContext.save"Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping*>
self4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext*◊
revertjinja2.nodes.EvalContext.revert"
None*>
self4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext*b
oldY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mappingru
environment$jinja2.nodes.EvalContext.environment@
jinja2.environment.Environment"jinja2.environment.EnvironmentrQ

autoescape#jinja2.nodes.EvalContext.autoescape
builtins.bool"builtins.boolrM
volatile!jinja2.nodes.EvalContext.volatile
builtins.bool"builtins.bool⁄
Nodejinja2.nodes.Node"builtins.object*ê
__init__jinja2.nodes.Node.__init__"
None*0
self&
jinja2.nodes.Node"jinja2.nodes.Node*
fields
Any*

attributes
Any*ñ
iter_fieldsjinja2.nodes.Node.iter_fields"
(typing.Iterator[Tuple[builtins.str,Any]]B
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Iterator*0
self&
jinja2.nodes.Node"jinja2.nodes.Node*ö
excludeä
*Union[typing.Container[builtins.str],None]P
typing.Container[builtins.str]
builtins.str"builtins.str"typing.Container
None *ó
onlyä
*Union[typing.Container[builtins.str],None]P
typing.Container[builtins.str]
builtins.str"builtins.str"typing.Container
None *˛
iter_child_nodes"jinja2.nodes.Node.iter_child_nodes"]
"typing.Iterator[jinja2.nodes.Node]&
jinja2.nodes.Node"jinja2.nodes.Node"typing.Iterator*0
self&
jinja2.nodes.Node"jinja2.nodes.Node*ö
excludeä
*Union[typing.Container[builtins.str],None]P
typing.Container[builtins.str]
builtins.str"builtins.str"typing.Container
None *ó
onlyä
*Union[typing.Container[builtins.str],None]P
typing.Container[builtins.str]
builtins.str"builtins.str"typing.Container
None *Ì
findjinja2.nodes.Node.find"â
#Union[jinja2.nodes._NodeBound,None]V
jinja2.nodes._NodeBound&
jinja2.nodes.Node"jinja2.nodes.Node"jinja2.nodes.Node
None*0
self&
jinja2.nodes.Node"jinja2.nodes.Node*é
	node_type
Type[jinja2.nodes._NodeBound]V
jinja2.nodes._NodeBound&
jinja2.nodes.Node"jinja2.nodes.Node"jinja2.nodes.Node"type*õ
find_alljinja2.nodes.Node.find_all"ì
(typing.Iterator[jinja2.nodes._NodeBound]V
jinja2.nodes._NodeBound&
jinja2.nodes.Node"jinja2.nodes.Node"jinja2.nodes.Node"typing.Iterator*0
self&
jinja2.nodes.Node"jinja2.nodes.Node*™
	node_typeö
RUnion[Type[jinja2.nodes._NodeBound],builtins.tuple[Type[jinja2.nodes._NodeBound]]]
Type[jinja2.nodes._NodeBound]V
jinja2.nodes._NodeBound&
jinja2.nodes.Node"jinja2.nodes.Node"jinja2.nodes.Node"type¿
-builtins.tuple[Type[jinja2.nodes._NodeBound]]
Type[jinja2.nodes._NodeBound]V
jinja2.nodes._NodeBound&
jinja2.nodes.Node"jinja2.nodes.Node"jinja2.nodes.Node"type"builtins.tuple*•
set_ctxjinja2.nodes.Node.set_ctx"&
jinja2.nodes.Node"jinja2.nodes.Node*0
self&
jinja2.nodes.Node"jinja2.nodes.Node*%
ctx
builtins.str"builtins.str*ﬁ

set_linenojinja2.nodes.Node.set_lineno"&
jinja2.nodes.Node"jinja2.nodes.Node*0
self&
jinja2.nodes.Node"jinja2.nodes.Node*(
lineno
builtins.int"builtins.int*.
override
builtins.bool"builtins.bool *·
set_environment!jinja2.nodes.Node.set_environment"&
jinja2.nodes.Node"jinja2.nodes.Node*0
self&
jinja2.nodes.Node"jinja2.nodes.Node*Q
environment@
jinja2.environment.Environment"jinja2.environment.Environment*w
__eq__jinja2.nodes.Node.__eq__"
builtins.bool"builtins.bool*(&
jinja2.nodes.Node"jinja2.nodes.Node*	
Any*n
__repr__jinja2.nodes.Node.__repr__"
builtins.str"builtins.str*(&
jinja2.nodes.Node"jinja2.nodes.Node*n
dumpjinja2.nodes.Node.dump"
builtins.str"builtins.str*0
self&
jinja2.nodes.Node"jinja2.nodes.Node@bjinja2.nodes.NodeTyperp
fieldsjinja2.nodes.Node.fieldsL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuplerx

attributesjinja2.nodes.Node.attributesL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuplerF
abstractjinja2.nodes.Node.abstract
builtins.bool"builtins.boolr@
linenojinja2.nodes.Node.lineno
builtins.int"builtins.intr®
environmentjinja2.nodes.Node.environmentz
*Union[jinja2.environment.Environment,None]@
jinja2.environment.Environment"jinja2.environment.Environment
Noners
__hash__jinja2.nodes.Node.__hash__K
CallableType[builtins.function]&
builtins.function"builtins.functiont
Stmtjinja2.nodes.Stmt"jinja2.nodes.NoderF
abstractjinja2.nodes.Stmt.abstract
builtins.bool"builtins.boolz
Helperjinja2.nodes.Helper"jinja2.nodes.NoderH
abstractjinja2.nodes.Helper.abstract
builtins.bool"builtins.boolí
Templatejinja2.nodes.Template"jinja2.nodes.Noder]
fieldsjinja2.nodes.Template.fields5
Tuple[builtins.str]
builtins.str"builtins.strr}
bodyjinja2.nodes.Template.bodyY
 builtins.list[jinja2.nodes.Node]&
jinja2.nodes.Node"jinja2.nodes.Node"builtins.listå
Outputjinja2.nodes.Output"jinja2.nodes.Stmtr[
fieldsjinja2.nodes.Output.fields5
Tuple[builtins.str]
builtins.str"builtins.strr}
nodesjinja2.nodes.Output.nodesY
 builtins.list[jinja2.nodes.Expr]&
jinja2.nodes.Expr"jinja2.nodes.Expr"builtins.list„
Extendsjinja2.nodes.Extends"jinja2.nodes.Stmtr\
fieldsjinja2.nodes.Extends.fields5
Tuple[builtins.str]
builtins.str"builtins.strrQ
templatejinja2.nodes.Extends.template&
jinja2.nodes.Expr"jinja2.nodes.Expr¢
Forjinja2.nodes.For"jinja2.nodes.Stmtr∞
fieldsjinja2.nodes.For.fieldså
TTuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrI
targetjinja2.nodes.For.target&
jinja2.nodes.Node"jinja2.nodes.NoderE
iterjinja2.nodes.For.iter&
jinja2.nodes.Node"jinja2.nodes.Noderx
bodyjinja2.nodes.For.bodyY
 builtins.list[jinja2.nodes.Node]&
jinja2.nodes.Node"jinja2.nodes.Node"builtins.listrz
else_jinja2.nodes.For.else_Y
 builtins.list[jinja2.nodes.Node]&
jinja2.nodes.Node"jinja2.nodes.Node"builtins.listrr
testjinja2.nodes.For.testS
Union[jinja2.nodes.Node,None]&
jinja2.nodes.Node"jinja2.nodes.Node
NonerG
	recursivejinja2.nodes.For.recursive
builtins.bool"builtins.bool≥
Ifjinja2.nodes.If"jinja2.nodes.StmtrŸ
fieldsjinja2.nodes.If.fields∂
:Tuple[builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrD
testjinja2.nodes.If.test&
jinja2.nodes.Node"jinja2.nodes.Noderw
bodyjinja2.nodes.If.bodyY
 builtins.list[jinja2.nodes.Node]&
jinja2.nodes.Node"jinja2.nodes.Node"builtins.listrs
elif_jinja2.nodes.If.elif_S
builtins.list[jinja2.nodes.If]"
jinja2.nodes.If"jinja2.nodes.If"builtins.listry
else_jinja2.nodes.If.else_Y
 builtins.list[jinja2.nodes.Node]&
jinja2.nodes.Node"jinja2.nodes.Node"builtins.list…
Macrojinja2.nodes.Macro"jinja2.nodes.Stmtr‹
fieldsjinja2.nodes.Macro.fields∂
:Tuple[builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strr=
namejinja2.nodes.Macro.name
builtins.str"builtins.strrz
argsjinja2.nodes.Macro.argsY
 builtins.list[jinja2.nodes.Name]&
jinja2.nodes.Name"jinja2.nodes.Name"builtins.listrÇ
defaultsjinja2.nodes.Macro.defaultsY
 builtins.list[jinja2.nodes.Expr]&
jinja2.nodes.Expr"jinja2.nodes.Expr"builtins.listrz
bodyjinja2.nodes.Macro.bodyY
 builtins.list[jinja2.nodes.Node]&
jinja2.nodes.Node"jinja2.nodes.Node"builtins.listÔ
	CallBlockjinja2.nodes.CallBlock"jinja2.nodes.Stmtr‡
fieldsjinja2.nodes.CallBlock.fields∂
:Tuple[builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrK
calljinja2.nodes.CallBlock.call&
jinja2.nodes.Call"jinja2.nodes.Callr~
argsjinja2.nodes.CallBlock.argsY
 builtins.list[jinja2.nodes.Name]&
jinja2.nodes.Name"jinja2.nodes.Name"builtins.listrÜ
defaultsjinja2.nodes.CallBlock.defaultsY
 builtins.list[jinja2.nodes.Expr]&
jinja2.nodes.Expr"jinja2.nodes.Expr"builtins.listr~
bodyjinja2.nodes.CallBlock.bodyY
 builtins.list[jinja2.nodes.Node]&
jinja2.nodes.Node"jinja2.nodes.Node"builtins.list¢
FilterBlockjinja2.nodes.FilterBlock"jinja2.nodes.Stmtrã
fieldsjinja2.nodes.FilterBlock.fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strrÄ
bodyjinja2.nodes.FilterBlock.bodyY
 builtins.list[jinja2.nodes.Node]&
jinja2.nodes.Node"jinja2.nodes.Node"builtins.listrU
filterjinja2.nodes.FilterBlock.filter*
jinja2.nodes.Filter"jinja2.nodes.Filter⁄
Withjinja2.nodes.With"jinja2.nodes.Stmtr∞
fieldsjinja2.nodes.With.fieldsã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strr
targetsjinja2.nodes.With.targetsY
 builtins.list[jinja2.nodes.Expr]&
jinja2.nodes.Expr"jinja2.nodes.Expr"builtins.listr}
valuesjinja2.nodes.With.valuesY
 builtins.list[jinja2.nodes.Expr]&
jinja2.nodes.Expr"jinja2.nodes.Expr"builtins.listry
bodyjinja2.nodes.With.bodyY
 builtins.list[jinja2.nodes.Node]&
jinja2.nodes.Node"jinja2.nodes.Node"builtins.list÷
Blockjinja2.nodes.Block"jinja2.nodes.Stmtr‹
fieldsjinja2.nodes.Block.fields∂
:Tuple[builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strr=
namejinja2.nodes.Block.name
builtins.str"builtins.strrz
bodyjinja2.nodes.Block.bodyY
 builtins.list[jinja2.nodes.Node]&
jinja2.nodes.Node"jinja2.nodes.Node"builtins.listrC
scopedjinja2.nodes.Block.scoped
builtins.bool"builtins.boolrG
requiredjinja2.nodes.Block.required
builtins.bool"builtins.boolÂ
Includejinja2.nodes.Include"jinja2.nodes.Stmtr≥
fieldsjinja2.nodes.Include.fieldsã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrQ
templatejinja2.nodes.Include.template&
jinja2.nodes.Expr"jinja2.nodes.ExprrQ
with_context!jinja2.nodes.Include.with_context
builtins.bool"builtins.boolrU
ignore_missing#jinja2.nodes.Include.ignore_missing
builtins.bool"builtins.boolÕ
Importjinja2.nodes.Import"jinja2.nodes.Stmtr≤
fieldsjinja2.nodes.Import.fieldsã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrP
templatejinja2.nodes.Import.template&
jinja2.nodes.Expr"jinja2.nodes.ExprrB
targetjinja2.nodes.Import.target
builtins.str"builtins.strrP
with_context jinja2.nodes.Import.with_context
builtins.bool"builtins.boolÿ

FromImportjinja2.nodes.FromImport"jinja2.nodes.Stmtr∂
fieldsjinja2.nodes.FromImport.fieldsã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrT
template jinja2.nodes.FromImport.template&
jinja2.nodes.Expr"jinja2.nodes.Exprr∏
namesjinja2.nodes.FromImport.namesè
Cbuiltins.list[Union[builtins.str,Tuple[builtins.str,builtins.str]]]∏
4Union[builtins.str,Tuple[builtins.str,builtins.str]]
builtins.str"builtins.str`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.listrT
with_context$jinja2.nodes.FromImport.with_context
builtins.bool"builtins.boolﬂ
ExprStmtjinja2.nodes.ExprStmt"jinja2.nodes.Stmtr]
fieldsjinja2.nodes.ExprStmt.fields5
Tuple[builtins.str]
builtins.str"builtins.strrJ
nodejinja2.nodes.ExprStmt.node&
jinja2.nodes.Node"jinja2.nodes.Node—
Assignjinja2.nodes.Assign"jinja2.nodes.StmtrÜ
fieldsjinja2.nodes.Assign.fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strrL
targetjinja2.nodes.Assign.target&
jinja2.nodes.Expr"jinja2.nodes.ExprrH
nodejinja2.nodes.Assign.node&
jinja2.nodes.Node"jinja2.nodes.Node—
AssignBlockjinja2.nodes.AssignBlock"jinja2.nodes.Stmtr∑
fieldsjinja2.nodes.AssignBlock.fieldsã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrQ
targetjinja2.nodes.AssignBlock.target&
jinja2.nodes.Expr"jinja2.nodes.ExprrÑ
filterjinja2.nodes.AssignBlock.filterY
Union[jinja2.nodes.Filter,None]*
jinja2.nodes.Filter"jinja2.nodes.Filter
NonerÄ
bodyjinja2.nodes.AssignBlock.bodyY
 builtins.list[jinja2.nodes.Node]&
jinja2.nodes.Node"jinja2.nodes.Node"builtins.list–
Exprjinja2.nodes.Expr"jinja2.nodes.Node*€
as_constjinja2.nodes.Expr.as_const"
Any*0
self&
jinja2.nodes.Expr"jinja2.nodes.Expr*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None *|

can_assignjinja2.nodes.Expr.can_assign"
builtins.bool"builtins.bool*0
self&
jinja2.nodes.Expr"jinja2.nodes.ExprrF
abstractjinja2.nodes.Expr.abstract
builtins.bool"builtins.boolœ
BinExprjinja2.nodes.BinExpr"jinja2.nodes.Expr*‰
as_constjinja2.nodes.BinExpr.as_const"
Any*6
self,
jinja2.nodes.BinExpr"jinja2.nodes.BinExpr*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None rá
fieldsjinja2.nodes.BinExpr.fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strrI
leftjinja2.nodes.BinExpr.left&
jinja2.nodes.Expr"jinja2.nodes.ExprrK
rightjinja2.nodes.BinExpr.right&
jinja2.nodes.Expr"jinja2.nodes.ExprrG
operatorjinja2.nodes.BinExpr.operator
builtins.str"builtins.strrI
abstractjinja2.nodes.BinExpr.abstract
builtins.bool"builtins.boolË
	UnaryExprjinja2.nodes.UnaryExpr"jinja2.nodes.Expr*Í
as_constjinja2.nodes.UnaryExpr.as_const"
Any*:
self0
jinja2.nodes.UnaryExpr"jinja2.nodes.UnaryExpr*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None r^
fieldsjinja2.nodes.UnaryExpr.fields5
Tuple[builtins.str]
builtins.str"builtins.strrK
nodejinja2.nodes.UnaryExpr.node&
jinja2.nodes.Expr"jinja2.nodes.ExprrI
operatorjinja2.nodes.UnaryExpr.operator
builtins.str"builtins.strrK
abstractjinja2.nodes.UnaryExpr.abstract
builtins.bool"builtins.bool´
Namejinja2.nodes.Name"jinja2.nodes.Expr*|

can_assignjinja2.nodes.Name.can_assign"
builtins.bool"builtins.bool*0
self&
jinja2.nodes.Name"jinja2.nodes.NamerÑ
fieldsjinja2.nodes.Name.fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strr<
namejinja2.nodes.Name.name
builtins.str"builtins.strr:
ctxjinja2.nodes.Name.ctx
builtins.str"builtins.strµ
NSRefjinja2.nodes.NSRef"jinja2.nodes.Expr*

can_assignjinja2.nodes.NSRef.can_assign"
builtins.bool"builtins.bool*2
self(
jinja2.nodes.NSRef"jinja2.nodes.NSRefrÖ
fieldsjinja2.nodes.NSRef.fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strr=
namejinja2.nodes.NSRef.name
builtins.str"builtins.strr=
attrjinja2.nodes.NSRef.attr
builtins.str"builtins.str}
Literaljinja2.nodes.Literal"jinja2.nodes.ExprrI
abstractjinja2.nodes.Literal.abstract
builtins.bool"builtins.bool„
Constjinja2.nodes.Const"jinja2.nodes.Literal*ﬁ
as_constjinja2.nodes.Const.as_const"
Any*2
self(
jinja2.nodes.Const"jinja2.nodes.Const*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None *∆
from_untrusted!jinja2.nodes.Const.from_untrusted"(
jinja2.nodes.Const"jinja2.nodes.Const*U
clsL
Type[jinja2.nodes.Const](
jinja2.nodes.Const"jinja2.nodes.Const"type*
value
Any*R
linenoD
Union[builtins.int,None]
builtins.int"builtins.int
None *ç
environmentz
*Union[jinja2.environment.Environment,None]@
jinja2.environment.Environment"jinja2.environment.Environment
None 0:builtins.classmethodprZ
fieldsjinja2.nodes.Const.fields5
Tuple[builtins.str]
builtins.str"builtins.strr*
valuejinja2.nodes.Const.value
AnyÛ
TemplateDatajinja2.nodes.TemplateData"jinja2.nodes.Literal*à
as_const"jinja2.nodes.TemplateData.as_const"
builtins.str"builtins.str*@
self6
jinja2.nodes.TemplateData"jinja2.nodes.TemplateData*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None ra
fields jinja2.nodes.TemplateData.fields5
Tuple[builtins.str]
builtins.str"builtins.strrD
datajinja2.nodes.TemplateData.data
builtins.str"builtins.str˝
Tuplejinja2.nodes.Tuple"jinja2.nodes.Literal*Ö
as_constjinja2.nodes.Tuple.as_const".
builtins.tuple[Any]
Any"builtins.tuple*2
self(
jinja2.nodes.Tuple"jinja2.nodes.Tuple*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None *

can_assignjinja2.nodes.Tuple.can_assign"
builtins.bool"builtins.bool*2
self(
jinja2.nodes.Tuple"jinja2.nodes.TuplerÖ
fieldsjinja2.nodes.Tuple.fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strr|
itemsjinja2.nodes.Tuple.itemsY
 builtins.list[jinja2.nodes.Expr]&
jinja2.nodes.Expr"jinja2.nodes.Expr"builtins.listr;
ctxjinja2.nodes.Tuple.ctx
builtins.str"builtins.strä
Listjinja2.nodes.List"jinja2.nodes.Literal*Ä
as_constjinja2.nodes.List.as_const",
builtins.list[Any]
Any"builtins.list*0
self&
jinja2.nodes.List"jinja2.nodes.List*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None rY
fieldsjinja2.nodes.List.fields5
Tuple[builtins.str]
builtins.str"builtins.strr{
itemsjinja2.nodes.List.itemsY
 builtins.list[jinja2.nodes.Expr]&
jinja2.nodes.Expr"jinja2.nodes.Expr"builtins.listó
Dictjinja2.nodes.Dict"jinja2.nodes.Literal*ç
as_constjinja2.nodes.Dict.as_const"9
builtins.dict[Any,Any]
Any
Any"builtins.dict*0
self&
jinja2.nodes.Dict"jinja2.nodes.Dict*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None rY
fieldsjinja2.nodes.Dict.fields5
Tuple[builtins.str]
builtins.str"builtins.strr{
itemsjinja2.nodes.Dict.itemsY
 builtins.list[jinja2.nodes.Pair]&
jinja2.nodes.Pair"jinja2.nodes.Pair"builtins.list¿
Pairjinja2.nodes.Pair"jinja2.nodes.Helper*¯
as_constjinja2.nodes.Pair.as_const"$
Tuple[Any,Any]
Any
Any*0
self&
jinja2.nodes.Pair"jinja2.nodes.Pair*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None rÑ
fieldsjinja2.nodes.Pair.fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strrD
keyjinja2.nodes.Pair.key&
jinja2.nodes.Expr"jinja2.nodes.ExprrH
valuejinja2.nodes.Pair.value&
jinja2.nodes.Expr"jinja2.nodes.ExprÏ
Keywordjinja2.nodes.Keyword"jinja2.nodes.Helper*ü
as_constjinja2.nodes.Keyword.as_const"B
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any*6
self,
jinja2.nodes.Keyword"jinja2.nodes.Keyword*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None rá
fieldsjinja2.nodes.Keyword.fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strr=
keyjinja2.nodes.Keyword.key
builtins.str"builtins.strrK
valuejinja2.nodes.Keyword.value&
jinja2.nodes.Expr"jinja2.nodes.ExprÍ
CondExprjinja2.nodes.CondExpr"jinja2.nodes.Expr*Á
as_constjinja2.nodes.CondExpr.as_const"
Any*8
self.
jinja2.nodes.CondExpr"jinja2.nodes.CondExpr*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None r¥
fieldsjinja2.nodes.CondExpr.fieldsã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrJ
testjinja2.nodes.CondExpr.test&
jinja2.nodes.Expr"jinja2.nodes.ExprrL
expr1jinja2.nodes.CondExpr.expr1&
jinja2.nodes.Expr"jinja2.nodes.Exprry
expr2jinja2.nodes.CondExpr.expr2S
Union[jinja2.nodes.Expr,None]&
jinja2.nodes.Expr"jinja2.nodes.Expr
Noneä
_FilterTestCommonjinja2.nodes._FilterTestCommon"jinja2.nodes.Expr*Ç
as_const'jinja2.nodes._FilterTestCommon.as_const"
Any*J
self@
jinja2.nodes._FilterTestCommon"jinja2.nodes._FilterTestCommon*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None ræ
fields%jinja2.nodes._FilterTestCommon.fieldså
TTuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrS
node#jinja2.nodes._FilterTestCommon.node&
jinja2.nodes.Expr"jinja2.nodes.ExprrI
name#jinja2.nodes._FilterTestCommon.name
builtins.str"builtins.strrÜ
args#jinja2.nodes._FilterTestCommon.argsY
 builtins.list[jinja2.nodes.Expr]&
jinja2.nodes.Expr"jinja2.nodes.Expr"builtins.listrä
kwargs%jinja2.nodes._FilterTestCommon.kwargsY
 builtins.list[jinja2.nodes.Pair]&
jinja2.nodes.Pair"jinja2.nodes.Pair"builtins.listrà
dyn_args'jinja2.nodes._FilterTestCommon.dyn_argsS
Union[jinja2.nodes.Expr,None]&
jinja2.nodes.Expr"jinja2.nodes.Expr
Nonerå

dyn_kwargs)jinja2.nodes._FilterTestCommon.dyn_kwargsS
Union[jinja2.nodes.Expr,None]&
jinja2.nodes.Expr"jinja2.nodes.Expr
NonerS
abstract'jinja2.nodes._FilterTestCommon.abstract
builtins.bool"builtins.boolrW

_is_filter)jinja2.nodes._FilterTestCommon._is_filter
builtins.bool"builtins.boolò
Filterjinja2.nodes.Filter"jinja2.nodes._FilterTestCommon*·
as_constjinja2.nodes.Filter.as_const"
Any*4
self*
jinja2.nodes.Filter"jinja2.nodes.Filter*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None ru
nodejinja2.nodes.Filter.nodeS
Union[jinja2.nodes.Expr,None]&
jinja2.nodes.Expr"jinja2.nodes.Expr
NoneÖ
Testjinja2.nodes.Test"jinja2.nodes._FilterTestCommonrJ

_is_filterjinja2.nodes.Test._is_filter
builtins.bool"builtins.boolˇ
Calljinja2.nodes.Call"jinja2.nodes.ExprrÜ
fieldsjinja2.nodes.Call.fields·
GTuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrF
nodejinja2.nodes.Call.node&
jinja2.nodes.Expr"jinja2.nodes.Exprry
argsjinja2.nodes.Call.argsY
 builtins.list[jinja2.nodes.Expr]&
jinja2.nodes.Expr"jinja2.nodes.Expr"builtins.listrÜ
kwargsjinja2.nodes.Call.kwargsb
#builtins.list[jinja2.nodes.Keyword],
jinja2.nodes.Keyword"jinja2.nodes.Keyword"builtins.listr{
dyn_argsjinja2.nodes.Call.dyn_argsS
Union[jinja2.nodes.Expr,None]&
jinja2.nodes.Expr"jinja2.nodes.Expr
Noner

dyn_kwargsjinja2.nodes.Call.dyn_kwargsS
Union[jinja2.nodes.Expr,None]&
jinja2.nodes.Expr"jinja2.nodes.Expr
None¢
Getitemjinja2.nodes.Getitem"jinja2.nodes.Expr*‰
as_constjinja2.nodes.Getitem.as_const"
Any*6
self,
jinja2.nodes.Getitem"jinja2.nodes.Getitem*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None r≥
fieldsjinja2.nodes.Getitem.fieldsã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrI
nodejinja2.nodes.Getitem.node&
jinja2.nodes.Expr"jinja2.nodes.ExprrG
argjinja2.nodes.Getitem.arg&
jinja2.nodes.Expr"jinja2.nodes.Exprr=
ctxjinja2.nodes.Getitem.ctx
builtins.str"builtins.strö
Getattrjinja2.nodes.Getattr"jinja2.nodes.Expr*‰
as_constjinja2.nodes.Getattr.as_const"
Any*6
self,
jinja2.nodes.Getattr"jinja2.nodes.Getattr*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None r≥
fieldsjinja2.nodes.Getattr.fieldsã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrI
nodejinja2.nodes.Getattr.node&
jinja2.nodes.Expr"jinja2.nodes.Exprr?
attrjinja2.nodes.Getattr.attr
builtins.str"builtins.strr=
ctxjinja2.nodes.Getattr.ctx
builtins.str"builtins.str¿
Slicejinja2.nodes.Slice"jinja2.nodes.Expr*˜
as_constjinja2.nodes.Slice.as_const" 
builtins.slice"builtins.slice*2
self(
jinja2.nodes.Slice"jinja2.nodes.Slice*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None r±
fieldsjinja2.nodes.Slice.fieldsã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrv
startjinja2.nodes.Slice.startS
Union[jinja2.nodes.Expr,None]&
jinja2.nodes.Expr"jinja2.nodes.Expr
Nonert
stopjinja2.nodes.Slice.stopS
Union[jinja2.nodes.Expr,None]&
jinja2.nodes.Expr"jinja2.nodes.Expr
Nonert
stepjinja2.nodes.Slice.stepS
Union[jinja2.nodes.Expr,None]&
jinja2.nodes.Expr"jinja2.nodes.Expr
NoneÖ
Concatjinja2.nodes.Concat"jinja2.nodes.Expr*ˆ
as_constjinja2.nodes.Concat.as_const"
builtins.str"builtins.str*4
self*
jinja2.nodes.Concat"jinja2.nodes.Concat*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None r[
fieldsjinja2.nodes.Concat.fields5
Tuple[builtins.str]
builtins.str"builtins.strr}
nodesjinja2.nodes.Concat.nodesY
 builtins.list[jinja2.nodes.Expr]&
jinja2.nodes.Expr"jinja2.nodes.Expr"builtins.listÙ
Comparejinja2.nodes.Compare"jinja2.nodes.Expr*‰
as_constjinja2.nodes.Compare.as_const"
Any*6
self,
jinja2.nodes.Compare"jinja2.nodes.Compare*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None rá
fieldsjinja2.nodes.Compare.fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strrI
exprjinja2.nodes.Compare.expr&
jinja2.nodes.Expr"jinja2.nodes.ExprrÉ
opsjinja2.nodes.Compare.opsb
#builtins.list[jinja2.nodes.Operand],
jinja2.nodes.Operand"jinja2.nodes.Operand"builtins.list∆
Operandjinja2.nodes.Operand"jinja2.nodes.Helperrá
fieldsjinja2.nodes.Operand.fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strr;
opjinja2.nodes.Operand.op
builtins.str"builtins.strrI
exprjinja2.nodes.Operand.expr&
jinja2.nodes.Expr"jinja2.nodes.Exprr
Muljinja2.nodes.Mul"jinja2.nodes.BinExprrC
operatorjinja2.nodes.Mul.operator
builtins.str"builtins.strr
Divjinja2.nodes.Div"jinja2.nodes.BinExprrC
operatorjinja2.nodes.Div.operator
builtins.str"builtins.strÅ
FloorDivjinja2.nodes.FloorDiv"jinja2.nodes.BinExprrH
operatorjinja2.nodes.FloorDiv.operator
builtins.str"builtins.strr
Addjinja2.nodes.Add"jinja2.nodes.BinExprrC
operatorjinja2.nodes.Add.operator
builtins.str"builtins.strr
Subjinja2.nodes.Sub"jinja2.nodes.BinExprrC
operatorjinja2.nodes.Sub.operator
builtins.str"builtins.strr
Modjinja2.nodes.Mod"jinja2.nodes.BinExprrC
operatorjinja2.nodes.Mod.operator
builtins.str"builtins.strr
Powjinja2.nodes.Pow"jinja2.nodes.BinExprrC
operatorjinja2.nodes.Pow.operator
builtins.str"builtins.strÕ
Andjinja2.nodes.And"jinja2.nodes.BinExpr*ÿ
as_constjinja2.nodes.And.as_const"
Any*.
self$
jinja2.nodes.And"jinja2.nodes.And*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None rC
operatorjinja2.nodes.And.operator
builtins.str"builtins.str«
Orjinja2.nodes.Or"jinja2.nodes.BinExpr*’
as_constjinja2.nodes.Or.as_const"
Any*,
self"
jinja2.nodes.Or"jinja2.nodes.Or*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None rB
operatorjinja2.nodes.Or.operator
builtins.str"builtins.strt
Notjinja2.nodes.Not"jinja2.nodes.UnaryExprrC
operatorjinja2.nodes.Not.operator
builtins.str"builtins.strt
Negjinja2.nodes.Neg"jinja2.nodes.UnaryExprrC
operatorjinja2.nodes.Neg.operator
builtins.str"builtins.strt
Posjinja2.nodes.Pos"jinja2.nodes.UnaryExprrC
operatorjinja2.nodes.Pos.operator
builtins.str"builtins.strÖ
EnvironmentAttribute!jinja2.nodes.EnvironmentAttribute"jinja2.nodes.Exprri
fields(jinja2.nodes.EnvironmentAttribute.fields5
Tuple[builtins.str]
builtins.str"builtins.strrL
name&jinja2.nodes.EnvironmentAttribute.name
builtins.str"builtins.strÅ
ExtensionAttributejinja2.nodes.ExtensionAttribute"jinja2.nodes.Exprrí
fields&jinja2.nodes.ExtensionAttribute.fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strrV

identifier*jinja2.nodes.ExtensionAttribute.identifier
builtins.str"builtins.strrJ
name$jinja2.nodes.ExtensionAttribute.name
builtins.str"builtins.strÒ
ImportedNamejinja2.nodes.ImportedName"jinja2.nodes.Exprra
fields jinja2.nodes.ImportedName.fields5
Tuple[builtins.str]
builtins.str"builtins.strrP

importname$jinja2.nodes.ImportedName.importname
builtins.str"builtins.str·
InternalNamejinja2.nodes.InternalName"jinja2.nodes.Expr*z
__init__"jinja2.nodes.InternalName.__init__"
None*@
self6
jinja2.nodes.InternalName"jinja2.nodes.InternalNamera
fields jinja2.nodes.InternalName.fields5
Tuple[builtins.str]
builtins.str"builtins.strrD
namejinja2.nodes.InternalName.name
builtins.str"builtins.strË
MarkSafejinja2.nodes.MarkSafe"jinja2.nodes.Expr*Ü
as_constjinja2.nodes.MarkSafe.as_const"&
markupsafe.Markup"markupsafe.Markup*8
self.
jinja2.nodes.MarkSafe"jinja2.nodes.MarkSafe*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None r]
fieldsjinja2.nodes.MarkSafe.fields5
Tuple[builtins.str]
builtins.str"builtins.strrJ
exprjinja2.nodes.MarkSafe.expr&
jinja2.nodes.Expr"jinja2.nodes.ExprÁ
MarkSafeIfAutoescape!jinja2.nodes.MarkSafeIfAutoescape"jinja2.nodes.Expr*’
as_const*jinja2.nodes.MarkSafeIfAutoescape.as_const"Q
Union[markupsafe.Markup,Any]&
markupsafe.Markup"markupsafe.Markup
Any*P
selfF
!jinja2.nodes.MarkSafeIfAutoescape"!jinja2.nodes.MarkSafeIfAutoescape*x
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None ri
fields(jinja2.nodes.MarkSafeIfAutoescape.fields5
Tuple[builtins.str]
builtins.str"builtins.strrV
expr&jinja2.nodes.MarkSafeIfAutoescape.expr&
jinja2.nodes.Expr"jinja2.nodes.ExprD
ContextReferencejinja2.nodes.ContextReference"jinja2.nodes.ExprR
DerivedContextReference$jinja2.nodes.DerivedContextReference"jinja2.nodes.Expr4
Continuejinja2.nodes.Continue"jinja2.nodes.Stmt.
Breakjinja2.nodes.Break"jinja2.nodes.StmtÜ
Scopejinja2.nodes.Scope"jinja2.nodes.StmtrZ
fieldsjinja2.nodes.Scope.fields5
Tuple[builtins.str]
builtins.str"builtins.strrz
bodyjinja2.nodes.Scope.bodyY
 builtins.list[jinja2.nodes.Node]&
jinja2.nodes.Node"jinja2.nodes.Node"builtins.list•
OverlayScopejinja2.nodes.OverlayScope"jinja2.nodes.Stmtrå
fields jinja2.nodes.OverlayScope.fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strrT
context!jinja2.nodes.OverlayScope.context&
jinja2.nodes.Expr"jinja2.nodes.ExprrÅ
bodyjinja2.nodes.OverlayScope.bodyY
 builtins.list[jinja2.nodes.Node]&
jinja2.nodes.Node"jinja2.nodes.Node"builtins.listŒ
EvalContextModifier jinja2.nodes.EvalContextModifier"jinja2.nodes.Stmtrh
fields'jinja2.nodes.EvalContextModifier.fields5
Tuple[builtins.str]
builtins.str"builtins.strró
options(jinja2.nodes.EvalContextModifier.optionsb
#builtins.list[jinja2.nodes.Keyword],
jinja2.nodes.Keyword"jinja2.nodes.Keyword"builtins.listÊ
ScopedEvalContextModifier&jinja2.nodes.ScopedEvalContextModifier" jinja2.nodes.EvalContextModifierrn
fields-jinja2.nodes.ScopedEvalContextModifier.fields5
Tuple[builtins.str]
builtins.str"builtins.strré
body+jinja2.nodes.ScopedEvalContextModifier.bodyY
 builtins.list[jinja2.nodes.Node]&
jinja2.nodes.Node"jinja2.nodes.Node"builtins.listå
get_eval_contextjinja2.nodes.get_eval_context"4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext*0
node&
jinja2.nodes.Node"jinja2.nodes.Node*q
ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
Noneˆ
args_as_constjinja2.nodes.args_as_const"ù
0Tuple[builtins.list[Any],builtins.dict[Any,Any]],
builtins.list[Any]
Any"builtins.list9
builtins.dict[Any,Any]
Any
Any"builtins.dict*∞
node•
7Union[jinja2.nodes._FilterTestCommon,jinja2.nodes.Call]@
jinja2.nodes._FilterTestCommon"jinja2.nodes._FilterTestCommon&
jinja2.nodes.Call"jinja2.nodes.Call*v
eval_ctxh
$Union[jinja2.nodes.EvalContext,None]4
jinja2.nodes.EvalContext"jinja2.nodes.EvalContext
None_
_failing_newjinja2.nodes._failing_new"
NoReturn
*
args
Any*
kwargs
Any*à
__annotations__jinja2.nodes.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
ttyping *
tetyping_extensions *Á
_binop_to_funcjinja2.nodes._binop_to_func∑
;builtins.dict[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict*Â
_uaop_to_funcjinja2.nodes._uaop_to_func∑
;builtins.dict[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict*Á
_cmpop_to_funcjinja2.nodes._cmpop_to_func∑
;builtins.dict[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict