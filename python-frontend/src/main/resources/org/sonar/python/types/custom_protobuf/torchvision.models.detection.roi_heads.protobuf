
&torchvision.models.detection.roi_headsæ
Tensortorch.Tensor"*SonarPythonAnalyzerFakeStub.CustomStubBase*Ý

new_tensortorch.Tensor.new_tensor"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
data
Any*N
dtypeA
Union[torch.dtype,None]
torch.dtype"torch.dtype
None *}
deviceo
%Union[builtins.str,torch.device,None]
builtins.str"builtins.str
torch.device"torch.device
None *\
requires_gradG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *0

pin_memory
builtins.bool"builtins.bool *Á
flattentorch.Tensor.flatten"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*-
	start_dim
builtins.int"builtins.int *+
end_dim
builtins.int"builtins.int Û=
RoIHeads/torchvision.models.detection.roi_heads.RoIHeads"torch.nn.modules.module.Module*í
__init__8torchvision.models.detection.roi_heads.RoIHeads.__init__"
None*l
selfb
/torchvision.models.detection.roi_heads.RoIHeads"/torchvision.models.detection.roi_heads.RoIHeads*
box_roi_pool
Any*
box_head
Any*
box_predictor
Any*
fg_iou_thresh
Any*
bg_iou_thresh
Any*!
batch_size_per_image
Any*
positive_fraction
Any*
bbox_reg_weights
Any*
score_thresh
Any*

nms_thresh
Any*
detections_per_img
Any*;
mask_roi_pool&
Union[Any,None]
Any
None *7
	mask_head&
Union[Any,None]
Any
None *<
mask_predictor&
Union[Any,None]
Any
None *?
keypoint_roi_pool&
Union[Any,None]
Any
None *;
keypoint_head&
Union[Any,None]
Any
None *@
keypoint_predictor&
Union[Any,None]
Any
None *N
has_mask8torchvision.models.detection.roi_heads.RoIHeads.has_mask*
self*V
has_keypoint<torchvision.models.detection.roi_heads.RoIHeads.has_keypoint*
self*Å
assign_targets_to_proposalsKtorchvision.models.detection.roi_heads.RoIHeads.assign_targets_to_proposals"Ú
>Tuple[builtins.list[torch.Tensor],builtins.list[torch.Tensor]]J
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.listJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*l
selfb
/torchvision.models.detection.roi_heads.RoIHeads"/torchvision.models.detection.roi_heads.RoIHeads*Y
	proposalsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*X
gt_boxesJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*Y
	gt_labelsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*Ø
	subsample9torchvision.models.detection.roi_heads.RoIHeads.subsample"J
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*l
selfb
/torchvision.models.detection.roi_heads.RoIHeads"/torchvision.models.detection.roi_heads.RoIHeads*V
labelsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*Ã
add_gt_proposals@torchvision.models.detection.roi_heads.RoIHeads.add_gt_proposals"J
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*l
selfb
/torchvision.models.detection.roi_heads.RoIHeads"/torchvision.models.detection.roi_heads.RoIHeads*Y
	proposalsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*X
gt_boxesJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*ê
check_targets=torchvision.models.detection.roi_heads.RoIHeads.check_targets"
None*l
selfb
/torchvision.models.detection.roi_heads.RoIHeads"/torchvision.models.detection.roi_heads.RoIHeads*¡
targets“
CUnion[builtins.list[builtins.dict[builtins.str,torch.Tensor]],None]¿
7builtins.list[builtins.dict[builtins.str,torch.Tensor]]u
(builtins.dict[builtins.str,torch.Tensor]
builtins.str"builtins.str
torch.Tensor"torch.Tensor"builtins.dict"builtins.list
None*ü
select_training_samplesGtorchvision.models.detection.roi_heads.RoIHeads.select_training_samples"ª
vTuple[builtins.list[torch.Tensor],builtins.list[torch.Tensor],builtins.list[torch.Tensor],builtins.list[torch.Tensor]]J
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.listJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.listJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.listJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*l
selfb
/torchvision.models.detection.roi_heads.RoIHeads"/torchvision.models.detection.roi_heads.RoIHeads*Y
	proposalsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*¡
targets“
CUnion[builtins.list[builtins.dict[builtins.str,torch.Tensor]],None]¿
7builtins.list[builtins.dict[builtins.str,torch.Tensor]]u
(builtins.dict[builtins.str,torch.Tensor]
builtins.str"builtins.str
torch.Tensor"torch.Tensor"builtins.dict"builtins.list
None*ˆ
postprocess_detectionsFtorchvision.models.detection.roi_heads.RoIHeads.postprocess_detections"Â
ZTuple[builtins.list[torch.Tensor],builtins.list[torch.Tensor],builtins.list[torch.Tensor]]J
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.listJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.listJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*l
selfb
/torchvision.models.detection.roi_heads.RoIHeads"/torchvision.models.detection.roi_heads.RoIHeads*.
class_logits
torch.Tensor"torch.Tensor*0
box_regression
torch.Tensor"torch.Tensor*Y
	proposalsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*µ
image_shapes¢
/builtins.list[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.list*–

forward7torchvision.models.detection.roi_heads.RoIHeads.forward"¤
gTuple[builtins.list[builtins.dict[builtins.str,torch.Tensor]],builtins.dict[builtins.str,torch.Tensor]]¿
7builtins.list[builtins.dict[builtins.str,torch.Tensor]]u
(builtins.dict[builtins.str,torch.Tensor]
builtins.str"builtins.str
torch.Tensor"torch.Tensor"builtins.dict"builtins.listu
(builtins.dict[builtins.str,torch.Tensor]
builtins.str"builtins.str
torch.Tensor"torch.Tensor"builtins.dict*l
selfb
/torchvision.models.detection.roi_heads.RoIHeads"/torchvision.models.detection.roi_heads.RoIHeads*ƒ
featuresu
(builtins.dict[builtins.str,torch.Tensor]
builtins.str"builtins.str
torch.Tensor"torch.Tensor"builtins.dict*Y
	proposalsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*µ
image_shapes¢
/builtins.list[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.list*£
targets“
CUnion[builtins.list[builtins.dict[builtins.str,torch.Tensor]],None]¿
7builtins.list[builtins.dict[builtins.str,torch.Tensor]]u
(builtins.dict[builtins.str,torch.Tensor]
builtins.str"builtins.str
torch.Tensor"torch.Tensor"builtins.dict"builtins.list
None r[
__annotations__?torchvision.models.detection.roi_heads.RoIHeads.__annotations__
AnyrY
box_similarity>torchvision.models.detection.roi_heads.RoIHeads.box_similarity
Anyr]
proposal_matcher@torchvision.models.detection.roi_heads.RoIHeads.proposal_matcher
AnyrW
fg_bg_sampler=torchvision.models.detection.roi_heads.RoIHeads.fg_bg_sampler
AnyrO
	box_coder9torchvision.models.detection.roi_heads.RoIHeads.box_coder
AnyrU
box_roi_pool<torchvision.models.detection.roi_heads.RoIHeads.box_roi_pool
AnyrM
box_head8torchvision.models.detection.roi_heads.RoIHeads.box_head
AnyrW
box_predictor=torchvision.models.detection.roi_heads.RoIHeads.box_predictor
AnyrU
score_thresh<torchvision.models.detection.roi_heads.RoIHeads.score_thresh
AnyrQ

nms_thresh:torchvision.models.detection.roi_heads.RoIHeads.nms_thresh
Anyra
detections_per_imgBtorchvision.models.detection.roi_heads.RoIHeads.detections_per_img
AnyrW
mask_roi_pool=torchvision.models.detection.roi_heads.RoIHeads.mask_roi_pool
AnyrO
	mask_head9torchvision.models.detection.roi_heads.RoIHeads.mask_head
AnyrY
mask_predictor>torchvision.models.detection.roi_heads.RoIHeads.mask_predictor
Anyr_
keypoint_roi_poolAtorchvision.models.detection.roi_heads.RoIHeads.keypoint_roi_pool
AnyrW
keypoint_head=torchvision.models.detection.roi_heads.RoIHeads.keypoint_head
Anyra
keypoint_predictorBtorchvision.models.detection.roi_heads.RoIHeads.keypoint_predictor
AnyÅ
fastrcnn_loss4torchvision.models.detection.roi_heads.fastrcnn_loss"`
 Tuple[torch.Tensor,torch.Tensor]
torch.Tensor"torch.Tensor
torch.Tensor"torch.Tensor*.
class_logits
torch.Tensor"torch.Tensor*0
box_regression
torch.Tensor"torch.Tensor*V
labelsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*b
regression_targetsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list˜
maskrcnn_inference9torchvision.models.detection.roi_heads.maskrcnn_inference"J
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*#
x
torch.Tensor"torch.Tensor*V
labelsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.listŸ
project_masks_on_boxes=torchvision.models.detection.roi_heads.project_masks_on_boxes"
torch.Tensor"torch.Tensor**
gt_masks
torch.Tensor"torch.Tensor*'
boxes
torch.Tensor"torch.Tensor*.
matched_idxs
torch.Tensor"torch.Tensor*#
M
builtins.int"builtins.int…
maskrcnn_loss4torchvision.models.detection.roi_heads.maskrcnn_loss"
torch.Tensor"torch.Tensor*-
mask_logits
torch.Tensor"torch.Tensor*Y
	proposalsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*X
gt_masksJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*Y
	gt_labelsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*a
mask_matched_idxsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.listº
keypoints_to_heatmap;torchvision.models.detection.roi_heads.keypoints_to_heatmap"`
 Tuple[torch.Tensor,torch.Tensor]
torch.Tensor"torch.Tensor
torch.Tensor"torch.Tensor*+
	keypoints
torch.Tensor"torch.Tensor*&
rois
torch.Tensor"torch.Tensor*.
heatmap_size
builtins.int"builtins.inti
heatmaps_to_keypoints<torchvision.models.detection.roi_heads.heatmaps_to_keypoints*
maps*
rois¾
keypointrcnn_loss8torchvision.models.detection.roi_heads.keypointrcnn_loss"
torch.Tensor"torch.Tensor*1
keypoint_logits
torch.Tensor"torch.Tensor*Y
	proposalsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*\
gt_keypointsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*e
keypoint_matched_idxsJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list°
keypointrcnn_inference=torchvision.models.detection.roi_heads.keypointrcnn_inference"Ú
>Tuple[builtins.list[torch.Tensor],builtins.list[torch.Tensor]]J
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.listJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list*#
x
torch.Tensor"torch.Tensor*U
boxesJ
builtins.list[torch.Tensor]
torch.Tensor"torch.Tensor"builtins.list·
expand_boxes3torchvision.models.detection.roi_heads.expand_boxes"
torch.Tensor"torch.Tensor*'
boxes
torch.Tensor"torch.Tensor*+
scale 
builtins.float"builtins.floatÑ
expand_masks_tracing_scaleAtorchvision.models.detection.roi_heads.expand_masks_tracing_scale" 
builtins.float"builtins.float*#
M
builtins.int"builtins.int*)
padding
builtins.int"builtins.intþ
expand_masks3torchvision.models.detection.roi_heads.expand_masks"f
"Tuple[torch.Tensor,builtins.float]
torch.Tensor"torch.Tensor 
builtins.float"builtins.float*&
mask
torch.Tensor"torch.Tensor*)
padding
builtins.int"builtins.intŽ
paste_mask_in_image:torchvision.models.detection.roi_heads.paste_mask_in_image"
torch.Tensor"torch.Tensor*&
mask
torch.Tensor"torch.Tensor*%
box
torch.Tensor"torch.Tensor*&
im_h
builtins.int"builtins.int*&
im_w
builtins.int"builtins.intá
paste_masks_in_image;torchvision.models.detection.roi_heads.paste_masks_in_image"
torch.Tensor"torch.Tensor*'
masks
torch.Tensor"torch.Tensor*'
boxes
torch.Tensor"torch.Tensor*o
	img_shape`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*+
padding
builtins.int"builtins.int *¢
__annotations__6torchvision.models.detection.roi_heads.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*F
	roi_align0torchvision.models.detection.roi_heads.roi_align
Any