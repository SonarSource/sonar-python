
OpenSSL.crypto∂
_EllipticCurveOpenSSL.crypto._EllipticCurve"builtins.object*◊
__init__&OpenSSL.crypto._EllipticCurve.__init__"
None*H
self>
OpenSSL.crypto._EllipticCurve"OpenSSL.crypto._EllipticCurve*d
lib[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None*%
nid
builtins.int"builtins.int*&
name
builtins.str"builtins.strz38z39z310z311z312z313j38j39j310j311j312j313M
ErrorOpenSSL.crypto.Error"builtins.Exceptionj38j39j310j311j312j313ò
PKeyOpenSSL.crypto.PKey"builtins.object*Ñ
__init__OpenSSL.crypto.PKey.__init__"
None*4
self*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKeyz38z39z310z311z312z313*ê
bitsOpenSSL.crypto.PKey.bits"
builtins.int"builtins.int*4
self*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKeyz38z39z310z311z312z313*î
checkOpenSSL.crypto.PKey.check"
builtins.bool"builtins.bool*4
self*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKeyz38z39z310z311z312z313*ì

from_cryptography_key)OpenSSL.crypto.PKey.from_cryptography_key"*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKey*X
clsO
Type[OpenSSL.crypto.PKey]*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKey"type*í

crypto_keyÅ
ˇTypeAlias[Union[cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey,cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey,cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey,cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey]]Â
ÙUnion[cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey,cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey,cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey,cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey]z
;cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey";cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKeyx
:cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey":cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKeyz
;cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey";cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKeyx
:cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey":cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey"OpenSSL.crypto._Key0:builtins.classmethodpz38z39z310z311z312z313*‹
generate_key OpenSSL.crypto.PKey.generate_key"
None*4
self*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKey*&
type
builtins.int"builtins.int*&
bits
builtins.int"builtins.intz38z39z310z311z312z313*î	
to_cryptography_key'OpenSSL.crypto.PKey.to_cryptography_key"Å
ˇTypeAlias[Union[cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey,cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey,cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey,cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey]]Â
ÙUnion[cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey,cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey,cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey,cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey]z
;cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey";cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKeyx
:cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey":cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKeyz
;cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey";cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKeyx
:cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey":cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey"OpenSSL.crypto._Key*4
self*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKeyz38z39z310z311z312z313*ê
typeOpenSSL.crypto.PKey.type"
builtins.int"builtins.int*4
self*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKeyz38z39z310z311z312z313j38j39j310j311j312j313Ç
X509NameOpenSSL.crypto.X509Name"builtins.object*Œ
__init__ OpenSSL.crypto.X509Name.__init__"
None*<
self2
OpenSSL.crypto.X509Name"OpenSSL.crypto.X509Name*<
name2
OpenSSL.crypto.X509Name"OpenSSL.crypto.X509Namez38z39z310z311z312z313*û
derOpenSSL.crypto.X509Name.der" 
builtins.bytes"builtins.bytes*<
self2
OpenSSL.crypto.X509Name"OpenSSL.crypto.X509Namez38z39z310z311z312z313*«
get_components&OpenSSL.crypto.X509Name.get_components"≤
3builtins.list[Tuple[builtins.bytes,builtins.bytes]]l
$Tuple[builtins.bytes,builtins.bytes] 
builtins.bytes"builtins.bytes 
builtins.bytes"builtins.bytes"builtins.list*<
self2
OpenSSL.crypto.X509Name"OpenSSL.crypto.X509Namez38z39z310z311z312z313*ú
hashOpenSSL.crypto.X509Name.hash"
builtins.int"builtins.int*<
self2
OpenSSL.crypto.X509Name"OpenSSL.crypto.X509Namez38z39z310z311z312z313j38j39j310j311j312j313rl
countryName#OpenSSL.crypto.X509Name.countryName
builtins.str"builtins.str*38*39*310*311*312*313rX
COpenSSL.crypto.X509Name.C
builtins.str"builtins.str*38*39*310*311*312*313r|
stateOrProvinceName+OpenSSL.crypto.X509Name.stateOrProvinceName
builtins.str"builtins.str*38*39*310*311*312*313rZ
STOpenSSL.crypto.X509Name.ST
builtins.str"builtins.str*38*39*310*311*312*313rn
localityName$OpenSSL.crypto.X509Name.localityName
builtins.str"builtins.str*38*39*310*311*312*313rX
LOpenSSL.crypto.X509Name.L
builtins.str"builtins.str*38*39*310*311*312*313rv
organizationName(OpenSSL.crypto.X509Name.organizationName
builtins.str"builtins.str*38*39*310*311*312*313rX
OOpenSSL.crypto.X509Name.O
builtins.str"builtins.str*38*39*310*311*312*313rÇ
organizationalUnitName.OpenSSL.crypto.X509Name.organizationalUnitName
builtins.str"builtins.str*38*39*310*311*312*313rZ
OUOpenSSL.crypto.X509Name.OU
builtins.str"builtins.str*38*39*310*311*312*313rj

commonName"OpenSSL.crypto.X509Name.commonName
builtins.str"builtins.str*38*39*310*311*312*313rZ
CNOpenSSL.crypto.X509Name.CN
builtins.str"builtins.str*38*39*310*311*312*313rn
emailAddress$OpenSSL.crypto.X509Name.emailAddress
builtins.str"builtins.str*38*39*310*311*312*313›*
X509OpenSSL.crypto.X509"builtins.object*Ñ
__init__OpenSSL.crypto.X509.__init__"
None*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509z38z39z310z311z312z313*°
add_extensions"OpenSSL.crypto.X509.add_extensions"
None*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509*é

extensions~
-typing.Iterable[OpenSSL.crypto.X509Extension]<
OpenSSL.crypto.X509Extension"OpenSSL.crypto.X509Extension"typing.Iterablez38z39z310z311z312z313*«
digestOpenSSL.crypto.X509.digest" 
builtins.bytes"builtins.bytes*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509*-
digest_name
builtins.str"builtins.strz38z39z310z311z312z313*—
from_cryptography%OpenSSL.crypto.X509.from_cryptography"*
OpenSSL.crypto.X509"OpenSSL.crypto.X509*X
clsO
Type[OpenSSL.crypto.X509]*
OpenSSL.crypto.X509"OpenSSL.crypto.X509"type*Y
crypto_certH
"cryptography.x509.base.Certificate""cryptography.x509.base.Certificate0:builtins.classmethodpz38z39z310z311z312z313*Î
get_extension!OpenSSL.crypto.X509.get_extension"<
OpenSSL.crypto.X509Extension"OpenSSL.crypto.X509Extension*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509*'
index
builtins.int"builtins.intz38z39z310z311z312z313*Æ
get_extension_count'OpenSSL.crypto.X509.get_extension_count"
builtins.int"builtins.int*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509z38z39z310z311z312z313*≤

get_issuerOpenSSL.crypto.X509.get_issuer"2
OpenSSL.crypto.X509Name"OpenSSL.crypto.X509Name*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509z38z39z310z311z312z313*Œ
get_notAfter OpenSSL.crypto.X509.get_notAfter"J
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509z38z39z310z311z312z313*–
get_notBefore!OpenSSL.crypto.X509.get_notBefore"J
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509z38z39z310z311z312z313*™

get_pubkeyOpenSSL.crypto.X509.get_pubkey"*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKey*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509z38z39z310z311z312z313*™
get_serial_number%OpenSSL.crypto.X509.get_serial_number"
builtins.int"builtins.int*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509z38z39z310z311z312z313*∫
get_signature_algorithm+OpenSSL.crypto.X509.get_signature_algorithm" 
builtins.bytes"builtins.bytes*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509z38z39z310z311z312z313*¥
get_subjectOpenSSL.crypto.X509.get_subject"2
OpenSSL.crypto.X509Name"OpenSSL.crypto.X509Name*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509z38z39z310z311z312z313*û
get_versionOpenSSL.crypto.X509.get_version"
builtins.int"builtins.int*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509z38z39z310z311z312z313*ƒ
gmtime_adj_notAfter'OpenSSL.crypto.X509.gmtime_adj_notAfter"
None*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509*(
amount
builtins.int"builtins.intz38z39z310z311z312z313*∆
gmtime_adj_notBefore(OpenSSL.crypto.X509.gmtime_adj_notBefore"
None*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509*(
amount
builtins.int"builtins.intz38z39z310z311z312z313*†
has_expiredOpenSSL.crypto.X509.has_expired"
builtins.bool"builtins.bool*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509z38z39z310z311z312z313*»

set_issuerOpenSSL.crypto.X509.set_issuer"
None*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509*>
issuer2
OpenSSL.crypto.X509Name"OpenSSL.crypto.X509Namez38z39z310z311z312z313*∏
set_notAfter OpenSSL.crypto.X509.set_notAfter"
None*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509**
when 
builtins.bytes"builtins.bytesz38z39z310z311z312z313*∫
set_notBefore!OpenSSL.crypto.X509.set_notBefore"
None*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509**
when 
builtins.bytes"builtins.bytesz38z39z310z311z312z313*æ

set_pubkeyOpenSSL.crypto.X509.set_pubkey"
None*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509*4
pkey*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKeyz38z39z310z311z312z313*¿
set_serial_number%OpenSSL.crypto.X509.set_serial_number"
None*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509*(
serial
builtins.int"builtins.intz38z39z310z311z312z313*À
set_subjectOpenSSL.crypto.X509.set_subject"
None*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509*?
subject2
OpenSSL.crypto.X509Name"OpenSSL.crypto.X509Namez38z39z310z311z312z313*µ
set_versionOpenSSL.crypto.X509.set_version"
None*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509*)
version
builtins.int"builtins.intz38z39z310z311z312z313*‹
signOpenSSL.crypto.X509.sign"
None*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509*4
pkey*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKey*(
digest
builtins.str"builtins.strz38z39z310z311z312z313*Æ
subject_name_hash%OpenSSL.crypto.X509.subject_name_hash" 
builtins.bytes"builtins.bytes*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509z38z39z310z311z312z313*“
to_cryptography#OpenSSL.crypto.X509.to_cryptography"H
"cryptography.x509.base.Certificate""cryptography.x509.base.Certificate*4
self*
OpenSSL.crypto.X509"OpenSSL.crypto.X509z38z39z310z311z312z313j38j39j310j311j312j313ˇ
X509ReqOpenSSL.crypto.X509Req"builtins.object*ç
__init__OpenSSL.crypto.X509Req.__init__"
None*:
self0
OpenSSL.crypto.X509Req"OpenSSL.crypto.X509Reqz38z39z310z311z312z313*™
add_extensions%OpenSSL.crypto.X509Req.add_extensions"
None*:
self0
OpenSSL.crypto.X509Req"OpenSSL.crypto.X509Req*é

extensions~
-typing.Iterable[OpenSSL.crypto.X509Extension]<
OpenSSL.crypto.X509Extension"OpenSSL.crypto.X509Extension"typing.Iterablez38z39z310z311z312z313*˛
from_cryptography(OpenSSL.crypto.X509Req.from_cryptography"0
OpenSSL.crypto.X509Req"OpenSSL.crypto.X509Req*a
clsX
Type[OpenSSL.crypto.X509Req]0
OpenSSL.crypto.X509Req"OpenSSL.crypto.X509Req"type*t

crypto_reqd
0cryptography.x509.base.CertificateSigningRequest"0cryptography.x509.base.CertificateSigningRequest0:builtins.classmethodpz38z39z310z311z312z313*ã
get_extensions%OpenSSL.crypto.X509Req.get_extensions"z
+builtins.list[OpenSSL.crypto.X509Extension]<
OpenSSL.crypto.X509Extension"OpenSSL.crypto.X509Extension"builtins.list*:
self0
OpenSSL.crypto.X509Req"OpenSSL.crypto.X509Reqz38z39z310z311z312z313*≥

get_pubkey!OpenSSL.crypto.X509Req.get_pubkey"*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKey*:
self0
OpenSSL.crypto.X509Req"OpenSSL.crypto.X509Reqz38z39z310z311z312z313*Ω
get_subject"OpenSSL.crypto.X509Req.get_subject"2
OpenSSL.crypto.X509Name"OpenSSL.crypto.X509Name*:
self0
OpenSSL.crypto.X509Req"OpenSSL.crypto.X509Reqz38z39z310z311z312z313*ß
get_version"OpenSSL.crypto.X509Req.get_version"
builtins.int"builtins.int*:
self0
OpenSSL.crypto.X509Req"OpenSSL.crypto.X509Reqz38z39z310z311z312z313*«

set_pubkey!OpenSSL.crypto.X509Req.set_pubkey"
None*:
self0
OpenSSL.crypto.X509Req"OpenSSL.crypto.X509Req*4
pkey*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKeyz38z39z310z311z312z313*æ
set_version"OpenSSL.crypto.X509Req.set_version"
None*:
self0
OpenSSL.crypto.X509Req"OpenSSL.crypto.X509Req*)
version
builtins.int"builtins.intz38z39z310z311z312z313*Â
signOpenSSL.crypto.X509Req.sign"
None*:
self0
OpenSSL.crypto.X509Req"OpenSSL.crypto.X509Req*4
pkey*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKey*(
digest
builtins.str"builtins.strz38z39z310z311z312z313*˜
to_cryptography&OpenSSL.crypto.X509Req.to_cryptography"d
0cryptography.x509.base.CertificateSigningRequest"0cryptography.x509.base.CertificateSigningRequest*:
self0
OpenSSL.crypto.X509Req"OpenSSL.crypto.X509Reqz38z39z310z311z312z313*’
verifyOpenSSL.crypto.X509Req.verify"
builtins.bool"builtins.bool*:
self0
OpenSSL.crypto.X509Req"OpenSSL.crypto.X509Req*4
pkey*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKeyz38z39z310z311z312z313j38j39j310j311j312j313õ	
X509ExtensionOpenSSL.crypto.X509Extension"builtins.object*˛
__init__%OpenSSL.crypto.X509Extension.__init__"
None*F
self<
OpenSSL.crypto.X509Extension"OpenSSL.crypto.X509Extension*/
	type_name 
builtins.bytes"builtins.bytes*,
critical
builtins.bool"builtins.bool*+
value 
builtins.bytes"builtins.bytes*h
subjectY
Union[OpenSSL.crypto.X509,None]*
OpenSSL.crypto.X509"OpenSSL.crypto.X509
None *g
issuerY
Union[OpenSSL.crypto.X509,None]*
OpenSSL.crypto.X509"OpenSSL.crypto.X509
None z38z39z310z311z312z313*Ω
get_critical)OpenSSL.crypto.X509Extension.get_critical"
builtins.bool"builtins.bool*F
self<
OpenSSL.crypto.X509Extension"OpenSSL.crypto.X509Extensionz38z39z310z311z312z313*∑
get_data%OpenSSL.crypto.X509Extension.get_data" 
builtins.bytes"builtins.bytes*F
self<
OpenSSL.crypto.X509Extension"OpenSSL.crypto.X509Extensionz38z39z310z311z312z313*√
get_short_name+OpenSSL.crypto.X509Extension.get_short_name" 
builtins.bytes"builtins.bytes*F
self<
OpenSSL.crypto.X509Extension"OpenSSL.crypto.X509Extensionz38z39z310z311z312z313j38j39j310j311j312j313·
RevokedOpenSSL.crypto.Revoked"builtins.object*ç
__init__OpenSSL.crypto.Revoked.__init__"
None*:
self0
OpenSSL.crypto.Revoked"OpenSSL.crypto.Revokedz38z39z310z311z312z313*€
all_reasons"OpenSSL.crypto.Revoked.all_reasons"P
builtins.list[builtins.bytes] 
builtins.bytes"builtins.bytes"builtins.list*:
self0
OpenSSL.crypto.Revoked"OpenSSL.crypto.Revokedz38z39z310z311z312z313*”

get_reason!OpenSSL.crypto.Revoked.get_reason"J
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None*:
self0
OpenSSL.crypto.Revoked"OpenSSL.crypto.Revokedz38z39z310z311z312z313*≠
get_rev_date#OpenSSL.crypto.Revoked.get_rev_date" 
builtins.bytes"builtins.bytes*:
self0
OpenSSL.crypto.Revoked"OpenSSL.crypto.Revokedz38z39z310z311z312z313*©

get_serial!OpenSSL.crypto.Revoked.get_serial" 
builtins.bytes"builtins.bytes*:
self0
OpenSSL.crypto.Revoked"OpenSSL.crypto.Revokedz38z39z310z311z312z313*È

set_reason!OpenSSL.crypto.Revoked.set_reason"
None*:
self0
OpenSSL.crypto.Revoked"OpenSSL.crypto.Revoked*V
reasonJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
Nonez38z39z310z311z312z313*¡
set_rev_date#OpenSSL.crypto.Revoked.set_rev_date"
None*:
self0
OpenSSL.crypto.Revoked"OpenSSL.crypto.Revoked**
when 
builtins.bytes"builtins.bytesz38z39z310z311z312z313*¿

set_serial!OpenSSL.crypto.Revoked.set_serial"
None*:
self0
OpenSSL.crypto.Revoked"OpenSSL.crypto.Revoked*-
hex_str 
builtins.bytes"builtins.bytesz38z39z310z311z312z313j38j39j310j311j312j313ﬂ
CRLOpenSSL.crypto.CRL"builtins.object*Å
__init__OpenSSL.crypto.CRL.__init__"
None*2
self(
OpenSSL.crypto.CRL"OpenSSL.crypto.CRLz38z39z310z311z312z313*∆
add_revokedOpenSSL.crypto.CRL.add_revoked"
None*2
self(
OpenSSL.crypto.CRL"OpenSSL.crypto.CRL*=
revoked0
OpenSSL.crypto.Revoked"OpenSSL.crypto.Revokedz38z39z310z311z312z313*Ñ
exportOpenSSL.crypto.CRL.export" 
builtins.bytes"builtins.bytes*2
self(
OpenSSL.crypto.CRL"OpenSSL.crypto.CRL*4
cert*
OpenSSL.crypto.X509"OpenSSL.crypto.X509*3
key*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKey*(
type
builtins.int"builtins.int *(
days
builtins.int"builtins.int *.
digest 
builtins.bytes"builtins.bytes z38z39z310z311z312z313*Ê
from_cryptography$OpenSSL.crypto.CRL.from_cryptography"(
OpenSSL.crypto.CRL"OpenSSL.crypto.CRL*U
clsL
Type[OpenSSL.crypto.CRL](
OpenSSL.crypto.CRL"OpenSSL.crypto.CRL"type*t

crypto_crld
0cryptography.x509.base.CertificateRevocationList"0cryptography.x509.base.CertificateRevocationList0:builtins.classmethodpz38z39z310z311z312z313*Ø

get_issuerOpenSSL.crypto.CRL.get_issuer"2
OpenSSL.crypto.X509Name"OpenSSL.crypto.X509Name*2
self(
OpenSSL.crypto.CRL"OpenSSL.crypto.CRLz38z39z310z311z312z313*È
get_revokedOpenSSL.crypto.CRL.get_revoked"j
&builtins.tuple[OpenSSL.crypto.Revoked]0
OpenSSL.crypto.Revoked"OpenSSL.crypto.Revoked"builtins.tuple*2
self(
OpenSSL.crypto.CRL"OpenSSL.crypto.CRLz38z39z310z311z312z313*π
set_lastUpdate!OpenSSL.crypto.CRL.set_lastUpdate"
None*2
self(
OpenSSL.crypto.CRL"OpenSSL.crypto.CRL**
when 
builtins.bytes"builtins.bytesz38z39z310z311z312z313*π
set_nextUpdate!OpenSSL.crypto.CRL.set_nextUpdate"
None*2
self(
OpenSSL.crypto.CRL"OpenSSL.crypto.CRL**
when 
builtins.bytes"builtins.bytesz38z39z310z311z312z313*≤
set_versionOpenSSL.crypto.CRL.set_version"
None*2
self(
OpenSSL.crypto.CRL"OpenSSL.crypto.CRL*)
version
builtins.int"builtins.intz38z39z310z311z312z313*†
signOpenSSL.crypto.CRL.sign"
None*2
self(
OpenSSL.crypto.CRL"OpenSSL.crypto.CRL*;
issuer_cert*
OpenSSL.crypto.X509"OpenSSL.crypto.X509*:

issuer_key*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKey*,
digest 
builtins.bytes"builtins.bytesz38z39z310z311z312z313*Î
to_cryptography"OpenSSL.crypto.CRL.to_cryptography"d
0cryptography.x509.base.CertificateRevocationList"0cryptography.x509.base.CertificateRevocationList*2
self(
OpenSSL.crypto.CRL"OpenSSL.crypto.CRLz38z39z310z311z312z313j38j39j310j311j312j313∏
	X509StoreOpenSSL.crypto.X509Store"builtins.object*ì
__init__!OpenSSL.crypto.X509Store.__init__"
None*>
self4
OpenSSL.crypto.X509Store"OpenSSL.crypto.X509Storez38z39z310z311z312z313*…
add_cert!OpenSSL.crypto.X509Store.add_cert"
None*>
self4
OpenSSL.crypto.X509Store"OpenSSL.crypto.X509Store*4
cert*
OpenSSL.crypto.X509"OpenSSL.crypto.X509z38z39z310z311z312z313*ƒ
add_crl OpenSSL.crypto.X509Store.add_crl"
None*>
self4
OpenSSL.crypto.X509Store"OpenSSL.crypto.X509Store*1
crl(
OpenSSL.crypto.CRL"OpenSSL.crypto.CRLz38z39z310z311z312z313*≠	
load_locations'OpenSSL.crypto.X509Store.load_locations"
None*>
self4
OpenSSL.crypto.X509Store"OpenSSL.crypto.X509Store*√
cafile∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath*≈
capath∂
oUnion[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],None]∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath
None z38z39z310z311z312z313*æ
	set_flags"OpenSSL.crypto.X509Store.set_flags"
None*>
self4
OpenSSL.crypto.X509Store"OpenSSL.crypto.X509Store*'
flags
builtins.int"builtins.intz38z39z310z311z312z313*…
set_time!OpenSSL.crypto.X509Store.set_time"
None*>
self4
OpenSSL.crypto.X509Store"OpenSSL.crypto.X509Store*4
vfy_time&
datetime.datetime"datetime.datetimez38z39z310z311z312z313j38j39j310j311j312j313Ä

X509StoreContextOpenSSL.crypto.X509StoreContext"builtins.object*⁄
__init__(OpenSSL.crypto.X509StoreContext.__init__"
None*L
selfB
OpenSSL.crypto.X509StoreContext"OpenSSL.crypto.X509StoreContext*?
store4
OpenSSL.crypto.X509Store"OpenSSL.crypto.X509Store*;
certificate*
OpenSSL.crypto.X509"OpenSSL.crypto.X509*±
chain£
0Union[typing.Sequence[OpenSSL.crypto.X509],None]c
$typing.Sequence[OpenSSL.crypto.X509]*
OpenSSL.crypto.X509"OpenSSL.crypto.X509"typing.Sequence
None z38z39z310z311z312z313*ì
get_verified_chain2OpenSSL.crypto.X509StoreContext.get_verified_chain"_
"builtins.list[OpenSSL.crypto.X509]*
OpenSSL.crypto.X509"OpenSSL.crypto.X509"builtins.list*L
selfB
OpenSSL.crypto.X509StoreContext"OpenSSL.crypto.X509StoreContextz38z39z310z311z312z313*Î
	set_store)OpenSSL.crypto.X509StoreContext.set_store"
None*L
selfB
OpenSSL.crypto.X509StoreContext"OpenSSL.crypto.X509StoreContext*?
store4
OpenSSL.crypto.X509Store"OpenSSL.crypto.X509Storez38z39z310z311z312z313*º
verify_certificate2OpenSSL.crypto.X509StoreContext.verify_certificate"
None*L
selfB
OpenSSL.crypto.X509StoreContext"OpenSSL.crypto.X509StoreContextz38z39z310z311z312z313j38j39j310j311j312j313‘
X509StoreContextError$OpenSSL.crypto.X509StoreContextError"builtins.Exception*Ÿ
__init__-OpenSSL.crypto.X509StoreContextError.__init__"
None*V
selfL
$OpenSSL.crypto.X509StoreContextError"$OpenSSL.crypto.X509StoreContextError*)
message
builtins.str"builtins.str*8
errors,
builtins.list[Any]
Any"builtins.list*;
certificate*
OpenSSL.crypto.X509"OpenSSL.crypto.X509z38z39z310z311z312z313j38j39j310j311j312j313r
errors+OpenSSL.crypto.X509StoreContextError.errors,
builtins.list[Any]
Any"builtins.list*38*39*310*311*312*313rá
certificate0OpenSSL.crypto.X509StoreContextError.certificate*
OpenSSL.crypto.X509"OpenSSL.crypto.X509*38*39*310*311*312*313â
X509StoreFlagsOpenSSL.crypto.X509StoreFlags"builtins.objectj38j39j310j311j312j313rn
	CRL_CHECK'OpenSSL.crypto.X509StoreFlags.CRL_CHECK
builtins.int"builtins.int*38*39*310*311*312*313rv
CRL_CHECK_ALL+OpenSSL.crypto.X509StoreFlags.CRL_CHECK_ALL
builtins.int"builtins.int*38*39*310*311*312*313rz
IGNORE_CRITICAL-OpenSSL.crypto.X509StoreFlags.IGNORE_CRITICAL
builtins.int"builtins.int*38*39*310*311*312*313rr
X509_STRICT)OpenSSL.crypto.X509StoreFlags.X509_STRICT
builtins.int"builtins.int*38*39*310*311*312*313r~
ALLOW_PROXY_CERTS/OpenSSL.crypto.X509StoreFlags.ALLOW_PROXY_CERTS
builtins.int"builtins.int*38*39*310*311*312*313rt
POLICY_CHECK*OpenSSL.crypto.X509StoreFlags.POLICY_CHECK
builtins.int"builtins.int*38*39*310*311*312*313rz
EXPLICIT_POLICY-OpenSSL.crypto.X509StoreFlags.EXPLICIT_POLICY
builtins.int"builtins.int*38*39*310*311*312*313rr
INHIBIT_MAP)OpenSSL.crypto.X509StoreFlags.INHIBIT_MAP
builtins.int"builtins.int*38*39*310*311*312*313rv
NOTIFY_POLICY+OpenSSL.crypto.X509StoreFlags.NOTIFY_POLICY
builtins.int"builtins.int*38*39*310*311*312*313rÄ
CHECK_SS_SIGNATURE0OpenSSL.crypto.X509StoreFlags.CHECK_SS_SIGNATURE
builtins.int"builtins.int*38*39*310*311*312*313rz
CB_ISSUER_CHECK-OpenSSL.crypto.X509StoreFlags.CB_ISSUER_CHECK
builtins.int"builtins.int*38*39*310*311*312*313rv
PARTIAL_CHAIN+OpenSSL.crypto.X509StoreFlags.PARTIAL_CHAIN
builtins.int"builtins.int*38*39*310*311*312*313º
PKCS7OpenSSL.crypto.PKCS7"builtins.object*•
get_type_name"OpenSSL.crypto.PKCS7.get_type_name"
builtins.str"builtins.str*6
self,
OpenSSL.crypto.PKCS7"OpenSSL.crypto.PKCS7z38z39z310z311z312z313*•
type_is_data!OpenSSL.crypto.PKCS7.type_is_data"
builtins.bool"builtins.bool*6
self,
OpenSSL.crypto.PKCS7"OpenSSL.crypto.PKCS7z38z39z310z311z312z313*Ø
type_is_enveloped&OpenSSL.crypto.PKCS7.type_is_enveloped"
builtins.bool"builtins.bool*6
self,
OpenSSL.crypto.PKCS7"OpenSSL.crypto.PKCS7z38z39z310z311z312z313*©
type_is_signed#OpenSSL.crypto.PKCS7.type_is_signed"
builtins.bool"builtins.bool*6
self,
OpenSSL.crypto.PKCS7"OpenSSL.crypto.PKCS7z38z39z310z311z312z313*¡
type_is_signedAndEnveloped/OpenSSL.crypto.PKCS7.type_is_signedAndEnveloped"
builtins.bool"builtins.bool*6
self,
OpenSSL.crypto.PKCS7"OpenSSL.crypto.PKCS7z38z39z310z311z312z313j38j39j310j311j312j313Ï
PKCS12OpenSSL.crypto.PKCS12"builtins.object*ä
__init__OpenSSL.crypto.PKCS12.__init__"
None*8
self.
OpenSSL.crypto.PKCS12"OpenSSL.crypto.PKCS12z38z39z310z311z312z313*”
exportOpenSSL.crypto.PKCS12.export" 
builtins.bytes"builtins.bytes*8
self.
OpenSSL.crypto.PKCS12"OpenSSL.crypto.PKCS12*\

passphraseJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None *(
iter
builtins.int"builtins.int *+
maciter
builtins.int"builtins.int z38z39z310z311z312z313*˘
get_ca_certificates)OpenSSL.crypto.PKCS12.get_ca_certificates"a
#builtins.tuple[OpenSSL.crypto.X509]*
OpenSSL.crypto.X509"OpenSSL.crypto.X509"builtins.tuple*8
self.
OpenSSL.crypto.PKCS12"OpenSSL.crypto.PKCS12z38z39z310z311z312z313*∫
get_certificate%OpenSSL.crypto.PKCS12.get_certificate"*
OpenSSL.crypto.X509"OpenSSL.crypto.X509*8
self.
OpenSSL.crypto.PKCS12"OpenSSL.crypto.PKCS12z38z39z310z311z312z313*‹
get_friendlyname&OpenSSL.crypto.PKCS12.get_friendlyname"J
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None*8
self.
OpenSSL.crypto.PKCS12"OpenSSL.crypto.PKCS12z38z39z310z311z312z313*∏
get_privatekey$OpenSSL.crypto.PKCS12.get_privatekey"*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKey*8
self.
OpenSSL.crypto.PKCS12"OpenSSL.crypto.PKCS12z38z39z310z311z312z313*‘
set_ca_certificates)OpenSSL.crypto.PKCS12.set_ca_certificates"
None*8
self.
OpenSSL.crypto.PKCS12"OpenSSL.crypto.PKCS12*±
cacerts£
0Union[typing.Iterable[OpenSSL.crypto.X509],None]c
$typing.Iterable[OpenSSL.crypto.X509]*
OpenSSL.crypto.X509"OpenSSL.crypto.X509"typing.Iterable
Nonez38z39z310z311z312z313*Œ
set_certificate%OpenSSL.crypto.PKCS12.set_certificate"
None*8
self.
OpenSSL.crypto.PKCS12"OpenSSL.crypto.PKCS12*4
cert*
OpenSSL.crypto.X509"OpenSSL.crypto.X509z38z39z310z311z312z313*
set_friendlyname&OpenSSL.crypto.PKCS12.set_friendlyname"
None*8
self.
OpenSSL.crypto.PKCS12"OpenSSL.crypto.PKCS12*T
nameJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
Nonez38z39z310z311z312z313*Ã
set_privatekey$OpenSSL.crypto.PKCS12.set_privatekey"
None*8
self.
OpenSSL.crypto.PKCS12"OpenSSL.crypto.PKCS12*4
pkey*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKeyz38z39z310z311z312z313j38j39j310j311j312j313≠

NetscapeSPKIOpenSSL.crypto.NetscapeSPKI"builtins.object*ú
__init__$OpenSSL.crypto.NetscapeSPKI.__init__"
None*D
self:
OpenSSL.crypto.NetscapeSPKI"OpenSSL.crypto.NetscapeSPKIz38z39z310z311z312z313*∏

b64_encode&OpenSSL.crypto.NetscapeSPKI.b64_encode" 
builtins.bytes"builtins.bytes*D
self:
OpenSSL.crypto.NetscapeSPKI"OpenSSL.crypto.NetscapeSPKIz38z39z310z311z312z313*¬

get_pubkey&OpenSSL.crypto.NetscapeSPKI.get_pubkey"*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKey*D
self:
OpenSSL.crypto.NetscapeSPKI"OpenSSL.crypto.NetscapeSPKIz38z39z310z311z312z313*÷

set_pubkey&OpenSSL.crypto.NetscapeSPKI.set_pubkey"
None*D
self:
OpenSSL.crypto.NetscapeSPKI"OpenSSL.crypto.NetscapeSPKI*4
pkey*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKeyz38z39z310z311z312z313*Ù
sign OpenSSL.crypto.NetscapeSPKI.sign"
None*D
self:
OpenSSL.crypto.NetscapeSPKI"OpenSSL.crypto.NetscapeSPKI*4
pkey*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKey*(
digest
builtins.str"builtins.strz38z39z310z311z312z313*„
verify"OpenSSL.crypto.NetscapeSPKI.verify"
builtins.bool"builtins.bool*D
self:
OpenSSL.crypto.NetscapeSPKI"OpenSSL.crypto.NetscapeSPKI*3
key*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKeyz38z39z310z311z312z313j38j39j310j311j312j313“
get_elliptic_curves"OpenSSL.crypto.get_elliptic_curves"{
+builtins.set[OpenSSL.crypto._EllipticCurve]>
OpenSSL.crypto._EllipticCurve"OpenSSL.crypto._EllipticCurve"builtins.setz38z39z310z311z312z313ª
get_elliptic_curve!OpenSSL.crypto.get_elliptic_curve">
OpenSSL.crypto._EllipticCurve"OpenSSL.crypto._EllipticCurve*&
name
builtins.str"builtins.strz38z39z310z311z312z313œ
dump_certificateOpenSSL.crypto.dump_certificate" 
builtins.bytes"builtins.bytes*&
type
builtins.int"builtins.int*4
cert*
OpenSSL.crypto.X509"OpenSSL.crypto.X509z38z39z310z311z312z313—
load_certificateOpenSSL.crypto.load_certificate"*
OpenSSL.crypto.X509"OpenSSL.crypto.X509*&
type
builtins.int"builtins.int*,
buffer 
builtins.bytes"builtins.bytesz38z39z310z311z312z313‰
dump_certificate_request'OpenSSL.crypto.dump_certificate_request" 
builtins.bytes"builtins.bytes*&
type
builtins.int"builtins.int*9
req0
OpenSSL.crypto.X509Req"OpenSSL.crypto.X509Reqz38z39z310z311z312z313Á
load_certificate_request'OpenSSL.crypto.load_certificate_request"0
OpenSSL.crypto.X509Req"OpenSSL.crypto.X509Req*&
type
builtins.int"builtins.int*,
buffer 
builtins.bytes"builtins.bytesz38z39z310z311z312z313Ó
dump_privatekeyOpenSSL.crypto.dump_privatekey" 
builtins.bytes"builtins.bytes*&
type
builtins.int"builtins.int*4
pkey*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKey*R
cipherD
Union[builtins.str,None]
builtins.str"builtins.str
None * 

passphrase∑
:Union[builtins.bytes,CallableType[builtins.function],None] 
builtins.bytes"builtins.bytesK
CallableType[builtins.function]&
builtins.function"builtins.function
None z38z39z310z311z312z313‚
load_privatekeyOpenSSL.crypto.load_privatekey"*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKey*&
type
builtins.int"builtins.int*r
bufferf
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes* 

passphrase∑
:Union[builtins.bytes,CallableType[builtins.function],None] 
builtins.bytes"builtins.bytesK
CallableType[builtins.function]&
builtins.function"builtins.function
None z38z39z310z311z312z313À
dump_publickeyOpenSSL.crypto.dump_publickey" 
builtins.bytes"builtins.bytes*&
type
builtins.int"builtins.int*4
pkey*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKeyz38z39z310z311z312z313ì
load_publickeyOpenSSL.crypto.load_publickey"*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKey*&
type
builtins.int"builtins.int*r
bufferf
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesz38z39z310z311z312z313º
dump_crlOpenSSL.crypto.dump_crl" 
builtins.bytes"builtins.bytes*&
type
builtins.int"builtins.int*1
crl(
OpenSSL.crypto.CRL"OpenSSL.crypto.CRLz38z39z310z311z312z313Ö
load_crlOpenSSL.crypto.load_crl"(
OpenSSL.crypto.CRL"OpenSSL.crypto.CRL*&
type
builtins.int"builtins.int*r
bufferf
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesz38z39z310z311z312z313ó
load_pkcs7_dataOpenSSL.crypto.load_pkcs7_data",
OpenSSL.crypto.PKCS7"OpenSSL.crypto.PKCS7*&
type
builtins.int"builtins.int*r
bufferf
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesz38z39z310z311z312z313«
load_pkcs12OpenSSL.crypto.load_pkcs12".
OpenSSL.crypto.PKCS12"OpenSSL.crypto.PKCS12*r
bufferf
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes*\

passphraseJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None z38z39z310z311z312z313´
signOpenSSL.crypto.sign" 
builtins.bytes"builtins.bytes*4
pkey*
OpenSSL.crypto.PKey"OpenSSL.crypto.PKey*p
dataf
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes*(
digest
builtins.str"builtins.strz38z39z310z311z312z313»
verifyOpenSSL.crypto.verify"
None*4
cert*
OpenSSL.crypto.X509"OpenSSL.crypto.X509*/
	signature 
builtins.bytes"builtins.bytes*p
dataf
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes*(
digest
builtins.str"builtins.strz38z39z310z311z312z313*¶
__annotations__OpenSSL.crypto.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313*e
FILETYPE_PEMOpenSSL.crypto.FILETYPE_PEM
builtins.int"builtins.int*38*39*310*311*312*313*g
FILETYPE_ASN1OpenSSL.crypto.FILETYPE_ASN1
builtins.int"builtins.int*38*39*310*311*312*313*g
FILETYPE_TEXTOpenSSL.crypto.FILETYPE_TEXT
builtins.int"builtins.int*38*39*310*311*312*313*]
TYPE_RSAOpenSSL.crypto.TYPE_RSA
builtins.int"builtins.int*38*39*310*311*312*313*]
TYPE_DSAOpenSSL.crypto.TYPE_DSA
builtins.int"builtins.int*38*39*310*311*312*313