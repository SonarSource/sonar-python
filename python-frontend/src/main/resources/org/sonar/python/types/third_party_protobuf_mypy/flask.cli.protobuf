
	flask.cliG
NoAppExceptionflask.cli.NoAppException"click.exceptions.UsageErrorÅ	

ScriptInfoflask.cli.ScriptInfo"builtins.object*š
__init__flask.cli.ScriptInfo.__init__"
None*6
self,
flask.cli.ScriptInfo"flask.cli.ScriptInfo*[
app_import_pathD
Union[builtins.str,None]
builtins.str"builtins.str
None *™

create_app†
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *4
set_debug_flag
builtins.bool"builtins.bool *…
load_appflask.cli.ScriptInfo.load_app""
flask.app.Flask"flask.app.Flask*6
self,
flask.cli.ScriptInfo"flask.cli.ScriptInfor}
app_import_path$flask.cli.ScriptInfo.app_import_pathD
Union[builtins.str,None]
builtins.str"builtins.str
Noner¶

create_appflask.cli.ScriptInfo.create_app†
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
Noner\
dataflask.cli.ScriptInfo.data9
builtins.dict[Any,Any]
Any
Any"builtins.dictrU
set_debug_flag#flask.cli.ScriptInfo.set_debug_flag
builtins.bool"builtins.boolr~
_loaded_app flask.cli.ScriptInfo._loaded_appM
Union[flask.app.Flask,None]"
flask.app.Flask"flask.app.Flask
Noneº
AppGroupflask.cli.AppGroup"click.core.Group*E
commandflask.cli.AppGroup.command*
self*
args*

kwargs*A
groupflask.cli.AppGroup.group*
self*
args*

kwargsÚ

FlaskGroupflask.cli.FlaskGroup"flask.cli.AppGroup*ú
__init__flask.cli.FlaskGroup.__init__"
None*6
self,
flask.cli.FlaskGroup"flask.cli.FlaskGroup*:
add_default_commands
builtins.bool"builtins.bool *™

create_app†
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *8
add_version_option
builtins.bool"builtins.bool *1
load_dotenv
builtins.bool"builtins.bool *4
set_debug_flag
builtins.bool"builtins.bool *
extra
Any*M
_load_plugin_commands*flask.cli.FlaskGroup._load_plugin_commands*
self*L
get_command flask.cli.FlaskGroup.get_command*
self*
ctx*
name*F
list_commands"flask.cli.FlaskGroup.list_commands*
self*
ctx*¸
make_context!flask.cli.FlaskGroup.make_context"(
click.core.Context"click.core.Context*6
self,
flask.cli.FlaskGroup"flask.cli.FlaskGroup*S
	info_nameD
Union[builtins.str,None]
builtins.str"builtins.str
None*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*d
parentV
Union[click.core.Context,None](
click.core.Context"click.core.Context
None *
extra
Any*º

parse_argsflask.cli.FlaskGroup.parse_args"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*6
self,
flask.cli.FlaskGroup"flask.cli.FlaskGroup*1
ctx(
click.core.Context"click.core.Context*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listr¶

create_appflask.cli.FlaskGroup.create_app†
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
NonerO
load_dotenv flask.cli.FlaskGroup.load_dotenv
builtins.bool"builtins.boolrU
set_debug_flag#flask.cli.FlaskGroup.set_debug_flag
builtins.bool"builtins.boolrg
_loaded_plugin_commands,flask.cli.FlaskGroup._loaded_plugin_commands
builtins.bool"builtins.boolÉ
CertParamTypeflask.cli.CertParamType"click.types.ParamType*6
__init__ flask.cli.CertParamType.__init__*
self*S
convertflask.cli.CertParamType.convert*
self*	
value*	
param*
ctxrB
nameflask.cli.CertParamType.name
builtins.str"builtins.strr7
	path_type!flask.cli.CertParamType.path_type
Any›
SeparatedPathTypeflask.cli.SeparatedPathType"click.types.Path*W
convert#flask.cli.SeparatedPathType.convert*
self*	
value*	
param*
ctx4
find_best_appflask.cli.find_best_app*

moduleC
_called_with_wrong_args!flask.cli._called_with_wrong_args*
fL
find_app_by_stringflask.cli.find_app_by_string*

module*
app_name4
prepare_importflask.cli.prepare_import*
path[

locate_appflask.cli.locate_app*
module_name*
app_name*
raise_if_not_found C
get_versionflask.cli.get_version*
ctx*	
param*	
value3
with_appcontextflask.cli.with_appcontext*
f›
_set_appflask.cli._set_app"D
Union[builtins.str,None]
builtins.str"builtins.str
None*1
ctx(
click.core.Context"click.core.Context*1
param&
click.core.Option"click.core.Option*O
valueD
Union[builtins.str,None]
builtins.str"builtins.str
Noneü

_set_debugflask.cli._set_debug"G
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*1
ctx(
click.core.Context"click.core.Context*1
param&
click.core.Option"click.core.Option*)
value
builtins.bool"builtins.bool¯
_env_file_callbackflask.cli._env_file_callback"D
Union[builtins.str,None]
builtins.str"builtins.str
None*1
ctx(
click.core.Context"click.core.Context*1
param&
click.core.Option"click.core.Option*O
valueD
Union[builtins.str,None]
builtins.str"builtins.str
NoneE
_path_is_ancestorflask.cli._path_is_ancestor*
path*	
otherÒ
load_dotenvflask.cli.load_dotenv"
builtins.bool"builtins.bool*‹
path
)Union[builtins.str,os.PathLike[Any],None]
builtins.str"builtins.str(
os.PathLike[Any]
Any"os.PathLike
None R
show_server_bannerflask.cli.show_server_banner*	
debug*
app_import_pathG
_validate_keyflask.cli._validate_key*
ctx*	
param*	
value½
run_commandflask.cli.run_command*
info*
host*
port*

reload*
debugger*
with_threads*
cert*
extra_files*
exclude_patterns0:flask.cli.pass_script_infoO
shell_commandflask.cli.shell_command"
None0:flask.cli.with_appcontextª
routes_commandflask.cli.routes_command"
None*&
sort
builtins.str"builtins.str*/
all_methods
builtins.bool"builtins.bool0:flask.cli.with_appcontext 
mainflask.cli.main"
None*…
__annotations__flask.cli.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
ttyping *R
version_optionflask.cli.version_option&
click.core.Option"click.core.Option*{
pass_script_infoflask.cli.pass_script_infoK
CallableType[builtins.function]&
builtins.function"builtins.function*L
_app_optionflask.cli._app_option&
click.core.Option"click.core.Option*P
_debug_optionflask.cli._debug_option&
click.core.Option"click.core.Option*V
_env_file_optionflask.cli._env_file_option&
click.core.Option"click.core.Option*B
cliflask.cli.cli,
flask.cli.FlaskGroup"flask.cli.FlaskGroup