
sklearn.utils._param_validationÂ
Iterabletyping.Iterable"builtins.object*∞
__iter__typing.Iterable.__iter__"w
typing.Iterator[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.Iterator*yw
typing.Iterable[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.Iterable0:abc.abstractmethod@8PXw
InvalidParameterError5sklearn.utils._param_validation.InvalidParameterError"builtins.ValueError"builtins.TypeErrorÃ
_Constraint+sklearn.utils._param_validation._Constraint"abc.ABC*∞
__init__4sklearn.utils._param_validation._Constraint.__init__"
None*d
selfZ
+sklearn.utils._param_validation._Constraint"+sklearn.utils._param_validation._Constraint*˛
is_satisfied_by;sklearn.utils._param_validation._Constraint.is_satisfied_by"
builtins.bool"builtins.bool*d
selfZ
+sklearn.utils._param_validation._Constraint"+sklearn.utils._param_validation._Constraint*
val
Any0:abc.abstractmethod@*“
__str__3sklearn.utils._param_validation._Constraint.__str__"
builtins.str"builtins.str*\Z
+sklearn.utils._param_validation._Constraint"+sklearn.utils._param_validation._Constraint0:abc.abstractmethod@ﬁ
_InstancesOf,sklearn.utils._param_validation._InstancesOf"+sklearn.utils._param_validation._Constraint*∆
__init__5sklearn.utils._param_validation._InstancesOf.__init__"
None*f
self\
,sklearn.utils._param_validation._InstancesOf",sklearn.utils._param_validation._InstancesOf*
type
Any*È
is_satisfied_by<sklearn.utils._param_validation._InstancesOf.is_satisfied_by"
builtins.bool"builtins.bool*f
self\
,sklearn.utils._param_validation._InstancesOf",sklearn.utils._param_validation._InstancesOf*
val
Any*Ω
__str__4sklearn.utils._param_validation._InstancesOf.__str__"
builtins.str"builtins.str*^\
,sklearn.utils._param_validation._InstancesOf",sklearn.utils._param_validation._InstancesOf≠
_NoneConstraint/sklearn.utils._param_validation._NoneConstraint"+sklearn.utils._param_validation._Constraint*Ú
is_satisfied_by?sklearn.utils._param_validation._NoneConstraint.is_satisfied_by"
builtins.bool"builtins.bool*l
selfb
/sklearn.utils._param_validation._NoneConstraint"/sklearn.utils._param_validation._NoneConstraint*
val
Any*∆
__str__7sklearn.utils._param_validation._NoneConstraint.__str__"
builtins.str"builtins.str*db
/sklearn.utils._param_validation._NoneConstraint"/sklearn.utils._param_validation._NoneConstraint•
_NanConstraint.sklearn.utils._param_validation._NanConstraint"+sklearn.utils._param_validation._Constraint*Ô
is_satisfied_by>sklearn.utils._param_validation._NanConstraint.is_satisfied_by"
builtins.bool"builtins.bool*j
self`
.sklearn.utils._param_validation._NanConstraint".sklearn.utils._param_validation._NanConstraint*
val
Any*√
__str__6sklearn.utils._param_validation._NanConstraint.__str__"
builtins.str"builtins.str*b`
.sklearn.utils._param_validation._NanConstraint".sklearn.utils._param_validation._NanConstraintÕ
_PandasNAConstraint3sklearn.utils._param_validation._PandasNAConstraint"+sklearn.utils._param_validation._Constraint*˛
is_satisfied_byCsklearn.utils._param_validation._PandasNAConstraint.is_satisfied_by"
builtins.bool"builtins.bool*t
selfj
3sklearn.utils._param_validation._PandasNAConstraint"3sklearn.utils._param_validation._PandasNAConstraint*
val
Any*“
__str__;sklearn.utils._param_validation._PandasNAConstraint.__str__"
builtins.str"builtins.str*lj
3sklearn.utils._param_validation._PandasNAConstraint"3sklearn.utils._param_validation._PandasNAConstraintµ
Options'sklearn.utils._param_validation.Options"+sklearn.utils._param_validation._Constraint*≈
__init__0sklearn.utils._param_validation.Options.__init__"
None*\
selfR
'sklearn.utils._param_validation.Options"'sklearn.utils._param_validation.Options*Ü
type˚
@Union[Type[builtins.str],Type[builtins.type],Type[numbers.Real]]:
Type[builtins.str]
builtins.str"builtins.str"type=
Type[builtins.type]
builtins.type"builtins.type"type:
Type[numbers.Real]
numbers.Real"numbers.Real"type*™
optionsú
ëUnion[builtins.set[Any],builtins.set[builtins.float],builtins.set[builtins.str],builtins.set[Union[Type[builtins.float],Type[numpy.floating[numpy._typing._16Bit]],Type[numpy.floating[numpy._typing._32Bit]],Type[numpy.floating[numpy._typing._64Bit]],Type[builtins.float],Type[numpy.floating[numpy._typing._16Bit]],Type[numpy.floating[numpy._typing._32Bit]],Type[numpy.floating[numpy._typing._64Bit]]]]]*
builtins.set[Any]
Any"builtins.setN
builtins.set[builtins.float] 
builtins.float"builtins.float"builtins.setH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.setΩ
¿builtins.set[Union[Type[builtins.float],Type[numpy.floating[numpy._typing._16Bit]],Type[numpy.floating[numpy._typing._32Bit]],Type[numpy.floating[numpy._typing._64Bit]],Type[builtins.float],Type[numpy.floating[numpy._typing._16Bit]],Type[numpy.floating[numpy._typing._32Bit]],Type[numpy.floating[numpy._typing._64Bit]]]]È

≤Union[Type[builtins.float],Type[numpy.floating[numpy._typing._16Bit]],Type[numpy.floating[numpy._typing._32Bit]],Type[numpy.floating[numpy._typing._64Bit]],Type[builtins.float],Type[numpy.floating[numpy._typing._16Bit]],Type[numpy.floating[numpy._typing._32Bit]],Type[numpy.floating[numpy._typing._64Bit]]]@
Type[builtins.float] 
builtins.float"builtins.float"typeö
*Type[numpy.floating[numpy._typing._16Bit]]d
$numpy.floating[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.floating"typeö
*Type[numpy.floating[numpy._typing._32Bit]]d
$numpy.floating[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.floating"typeö
*Type[numpy.floating[numpy._typing._64Bit]]d
$numpy.floating[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.floating"type@
Type[builtins.float] 
builtins.float"builtins.float"typeö
*Type[numpy.floating[numpy._typing._16Bit]]d
$numpy.floating[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.floating"typeö
*Type[numpy.floating[numpy._typing._32Bit]]d
$numpy.floating[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.floating"typeö
*Type[numpy.floating[numpy._typing._64Bit]]d
$numpy.floating[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.floating"type"builtins.set*i

deprecatedW
Union[builtins.set[Any],None]*
builtins.set[Any]
Any"builtins.set
None *⁄
is_satisfied_by7sklearn.utils._param_validation.Options.is_satisfied_by"
builtins.bool"builtins.bool*\
selfR
'sklearn.utils._param_validation.Options"'sklearn.utils._param_validation.Options*
val
Any*Æ
__str__/sklearn.utils._param_validation.Options.__str__"
builtins.str"builtins.str*TR
'sklearn.utils._param_validation.Options"'sklearn.utils._param_validation.Options˚

StrOptions*sklearn.utils._param_validation.StrOptions"'sklearn.utils._param_validation.Options*ó
__init__3sklearn.utils._param_validation.StrOptions.__init__"
None*b
selfX
*sklearn.utils._param_validation.StrOptions"*sklearn.utils._param_validation.StrOptions*U
optionsH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.set*ê

deprecated~
&Union[builtins.set[builtins.str],None]H
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.set
None 
Interval(sklearn.utils._param_validation.Interval"+sklearn.utils._param_validation._Constraint*©
__init__1sklearn.utils._param_validation.Interval.__init__"
None*^
selfT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.Interval*•
typeö
NUnion[numbers.Real,Type[numbers.Integral],Type[numbers.Real],numbers.Integral]
numbers.Real"numbers.RealF
Type[numbers.Integral]$
numbers.Integral"numbers.Integral"type:
Type[numbers.Real]
numbers.Real"numbers.Real"type$
numbers.Integral"numbers.Integral*
leftu
'Union[builtins.float,None,builtins.int] 
builtins.float"builtins.float
None
builtins.int"builtins.int*Ä
rightu
'Union[builtins.float,None,builtins.int] 
builtins.float"builtins.float
None
builtins.int"builtins.int*”
closed∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*Ã

__contains__5sklearn.utils._param_validation.Interval.__contains__"
builtins.bool"builtins.bool*VT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.Interval*å	â	
≈Union[builtins.bool,TypeAlias[Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]]]]
builtins.bool"builtins.boolú
∞TypeAlias[Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]]]Õ
•Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]] 
builtins.float"builtins.float®
/TypeAlias[numpy.floating[numpy._typing._16Bit]]d
$numpy.floating[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.floating"numpy.float16®
/TypeAlias[numpy.floating[numpy._typing._32Bit]]d
$numpy.floating[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.floating"numpy.float32®
/TypeAlias[numpy.floating[numpy._typing._64Bit]]d
$numpy.floating[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.floating"numpy.float64"sklearn._typing.Float*›
is_satisfied_by8sklearn.utils._param_validation.Interval.is_satisfied_by"
builtins.bool"builtins.bool*^
selfT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.Interval*
val
Any*±
__str__0sklearn.utils._param_validation.Interval.__str__"
builtins.str"builtins.str*VT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.Intervalç
_ArrayLikes+sklearn.utils._param_validation._ArrayLikes"+sklearn.utils._param_validation._Constraint*Ê
is_satisfied_by;sklearn.utils._param_validation._ArrayLikes.is_satisfied_by"
builtins.bool"builtins.bool*d
selfZ
+sklearn.utils._param_validation._ArrayLikes"+sklearn.utils._param_validation._ArrayLikes*
val
Any*∫
__str__3sklearn.utils._param_validation._ArrayLikes.__str__"
builtins.str"builtins.str*\Z
+sklearn.utils._param_validation._ArrayLikes"+sklearn.utils._param_validation._ArrayLikes≠
_SparseMatrices/sklearn.utils._param_validation._SparseMatrices"+sklearn.utils._param_validation._Constraint*Ú
is_satisfied_by?sklearn.utils._param_validation._SparseMatrices.is_satisfied_by"
builtins.bool"builtins.bool*l
selfb
/sklearn.utils._param_validation._SparseMatrices"/sklearn.utils._param_validation._SparseMatrices*
val
Any*∆
__str__7sklearn.utils._param_validation._SparseMatrices.__str__"
builtins.str"builtins.str*db
/sklearn.utils._param_validation._SparseMatrices"/sklearn.utils._param_validation._SparseMatricesÖ

_Callables*sklearn.utils._param_validation._Callables"+sklearn.utils._param_validation._Constraint*„
is_satisfied_by:sklearn.utils._param_validation._Callables.is_satisfied_by"
builtins.bool"builtins.bool*b
selfX
*sklearn.utils._param_validation._Callables"*sklearn.utils._param_validation._Callables*
val
Any*∑
__str__2sklearn.utils._param_validation._Callables.__str__"
builtins.str"builtins.str*ZX
*sklearn.utils._param_validation._Callables"*sklearn.utils._param_validation._Callables÷
_RandomStates-sklearn.utils._param_validation._RandomStates"+sklearn.utils._param_validation._Constraint*∂
__init__6sklearn.utils._param_validation._RandomStates.__init__"
None*h
self^
-sklearn.utils._param_validation._RandomStates"-sklearn.utils._param_validation._RandomStates*Ï
is_satisfied_by=sklearn.utils._param_validation._RandomStates.is_satisfied_by"
builtins.bool"builtins.bool*h
self^
-sklearn.utils._param_validation._RandomStates"-sklearn.utils._param_validation._RandomStates*
val
Any*¿
__str__5sklearn.utils._param_validation._RandomStates.__str__"
builtins.str"builtins.str*`^
-sklearn.utils._param_validation._RandomStates"-sklearn.utils._param_validation._RandomStates™
	_Booleans)sklearn.utils._param_validation._Booleans"+sklearn.utils._param_validation._Constraint*™
__init__2sklearn.utils._param_validation._Booleans.__init__"
None*`
selfV
)sklearn.utils._param_validation._Booleans")sklearn.utils._param_validation._Booleans*‡
is_satisfied_by9sklearn.utils._param_validation._Booleans.is_satisfied_by"
builtins.bool"builtins.bool*`
selfV
)sklearn.utils._param_validation._Booleans")sklearn.utils._param_validation._Booleans*
val
Any*¥
__str__1sklearn.utils._param_validation._Booleans.__str__"
builtins.str"builtins.str*XV
)sklearn.utils._param_validation._Booleans")sklearn.utils._param_validation._Booleans·
_VerboseHelper.sklearn.utils._param_validation._VerboseHelper"+sklearn.utils._param_validation._Constraint*π
__init__7sklearn.utils._param_validation._VerboseHelper.__init__"
None*j
self`
.sklearn.utils._param_validation._VerboseHelper".sklearn.utils._param_validation._VerboseHelper*Ô
is_satisfied_by>sklearn.utils._param_validation._VerboseHelper.is_satisfied_by"
builtins.bool"builtins.bool*j
self`
.sklearn.utils._param_validation._VerboseHelper".sklearn.utils._param_validation._VerboseHelper*
val
Any*√
__str__6sklearn.utils._param_validation._VerboseHelper.__str__"
builtins.str"builtins.str*b`
.sklearn.utils._param_validation._VerboseHelper".sklearn.utils._param_validation._VerboseHelper·
_MissingValues.sklearn.utils._param_validation._MissingValues"+sklearn.utils._param_validation._Constraint*π
__init__7sklearn.utils._param_validation._MissingValues.__init__"
None*j
self`
.sklearn.utils._param_validation._MissingValues".sklearn.utils._param_validation._MissingValues*Ô
is_satisfied_by>sklearn.utils._param_validation._MissingValues.is_satisfied_by"
builtins.bool"builtins.bool*j
self`
.sklearn.utils._param_validation._MissingValues".sklearn.utils._param_validation._MissingValues*
val
Any*√
__str__6sklearn.utils._param_validation._MissingValues.__str__"
builtins.str"builtins.str*b`
.sklearn.utils._param_validation._MissingValues".sklearn.utils._param_validation._MissingValues—

HasMethods*sklearn.utils._param_validation.HasMethods"+sklearn.utils._param_validation._Constraint*…
__init__3sklearn.utils._param_validation.HasMethods.__init__"
None*b
selfX
*sklearn.utils._param_validation.HasMethods"*sklearn.utils._param_validation.HasMethods*ô
methodsã
MUnion[builtins.list[builtins.str],builtins.str,typing.Sequence[builtins.str]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*„
is_satisfied_by:sklearn.utils._param_validation.HasMethods.is_satisfied_by"
builtins.bool"builtins.bool*b
selfX
*sklearn.utils._param_validation.HasMethods"*sklearn.utils._param_validation.HasMethods*
val
Any*∑
__str__2sklearn.utils._param_validation.HasMethods.__str__"
builtins.str"builtins.str*ZX
*sklearn.utils._param_validation.HasMethods"*sklearn.utils._param_validation.HasMethodsÕ
_IterablesNotString3sklearn.utils._param_validation._IterablesNotString"+sklearn.utils._param_validation._Constraint*˛
is_satisfied_byCsklearn.utils._param_validation._IterablesNotString.is_satisfied_by"
builtins.bool"builtins.bool*t
selfj
3sklearn.utils._param_validation._IterablesNotString"3sklearn.utils._param_validation._IterablesNotString*
val
Any*“
__str__;sklearn.utils._param_validation._IterablesNotString.__str__"
builtins.str"builtins.str*lj
3sklearn.utils._param_validation._IterablesNotString"3sklearn.utils._param_validation._IterablesNotStringµ

_CVObjects*sklearn.utils._param_validation._CVObjects"+sklearn.utils._param_validation._Constraint*≠
__init__3sklearn.utils._param_validation._CVObjects.__init__"
None*b
selfX
*sklearn.utils._param_validation._CVObjects"*sklearn.utils._param_validation._CVObjects*„
is_satisfied_by:sklearn.utils._param_validation._CVObjects.is_satisfied_by"
builtins.bool"builtins.bool*b
selfX
*sklearn.utils._param_validation._CVObjects"*sklearn.utils._param_validation._CVObjects*
val
Any*∑
__str__2sklearn.utils._param_validation._CVObjects.__str__"
builtins.str"builtins.str*ZX
*sklearn.utils._param_validation._CVObjects"*sklearn.utils._param_validation._CVObjects∂
Hidden&sklearn.utils._param_validation.Hidden"builtins.object*Ú
__init__/sklearn.utils._param_validation.Hidden.__init__"
None*Z
selfP
&sklearn.utils._param_validation.Hidden"&sklearn.utils._param_validation.Hidden*Œ

constraintΩ
?Union[sklearn.utils._param_validation._Constraint,builtins.str]Z
+sklearn.utils._param_validation._Constraint"+sklearn.utils._param_validation._Constraint
builtins.str"builtins.str•
	signatureinspect.signature"&
inspect.Signature"inspect.Signature*¶
objú
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"inspect._IntrospectableCallable*4
follow_wrapped
builtins.bool"builtins.bool â
validate_parameter_constraints>sklearn.utils._param_validation.validate_parameter_constraints"
None*¶
parameter_constraintsä
+Union[typing.Mapping[Any,Any],builtins.str];
typing.Mapping[Any,Any]
Any
Any"typing.Mapping
builtins.str"builtins.str*E
params9
builtins.dict[Any,Any]
Any
Any"builtins.dict*-
caller_name
builtins.str"builtins.str∑
make_constraint/sklearn.utils._param_validation.make_constraint"Z
+sklearn.utils._param_validation._Constraint"+sklearn.utils._param_validation._Constraint*

constraint
AnyÂ
validate_params/sklearn.utils._param_validation.validate_params"K
CallableType[builtins.function]&
builtins.function"builtins.function*T
parameter_constraints9
builtins.dict[Any,Any]
Any
Any"builtins.dict‚
generate_invalid_param_val:sklearn.utils._param_validation.generate_invalid_param_val"
Any*j

constraintZ
+sklearn.utils._param_validation._Constraint"+sklearn.utils._param_validation._Constraint*í
constraints˛
FUnion[None,builtins.list[sklearn.utils._param_validation._Constraint]]
Noneß
:builtins.list[sklearn.utils._param_validation._Constraint]Z
+sklearn.utils._param_validation._Constraint"+sklearn.utils._param_validation._Constraint"builtins.list ¡
generate_valid_param4sklearn.utils._param_validation.generate_valid_param"
Any*j

constraintZ
+sklearn.utils._param_validation._Constraint"+sklearn.utils._param_validation._Constraint*õ
__annotations__/sklearn.utils._param_validation.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
npnumpy *A

csr_matrix*sklearn.utils._param_validation.csr_matrix
Any*=
issparse(sklearn.utils._param_validation.issparse
Any