
chardet™
UniversalDetector+chardet.universaldetector.UniversalDetector"builtins.object*Ç
__init__4chardet.universaldetector.UniversalDetector.__init__"
None*d
selfZ
+chardet.universaldetector.UniversalDetector"+chardet.universaldetector.UniversalDetector*/
lang_filter
builtins.int"builtins.int z38z39z310z311z312z313z314*À
reset1chardet.universaldetector.UniversalDetector.reset"
None*d
selfZ
+chardet.universaldetector.UniversalDetector"+chardet.universaldetector.UniversalDetectorz38z39z310z311z312z313z314*“
feed0chardet.universaldetector.UniversalDetector.feed"
None*d
selfZ
+chardet.universaldetector.UniversalDetector"+chardet.universaldetector.UniversalDetector*Ü
byte_strx
(Union[builtins.bytes,builtins.bytearray] 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearrayz38z39z310z311z312z313z314*ñ
close1chardet.universaldetector.UniversalDetector.close"S
TypeAlias[TypedDict]
	TypedDict"*chardet.universaldetector._FinalResultType*d
selfZ
+chardet.universaldetector.UniversalDetector"+chardet.universaldetector.UniversalDetectorz38z39z310z311z312z313z314j38j39j310j311j312j313j314rï
MINIMUM_THRESHOLD=chardet.universaldetector.UniversalDetector.MINIMUM_THRESHOLD 
builtins.float"builtins.float*38*39*310*311*312*313*314r¡
HIGH_BYTE_DETECTOR>chardet.universaldetector.UniversalDetector.HIGH_BYTE_DETECTORJ
re.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"
re.Pattern*38*39*310*311*312*313*314rµ
ESC_DETECTOR8chardet.universaldetector.UniversalDetector.ESC_DETECTORJ
re.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"
re.Pattern*38*39*310*311*312*313*314rø
WIN_BYTE_DETECTOR=chardet.universaldetector.UniversalDetector.WIN_BYTE_DETECTORJ
re.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"
re.Pattern*38*39*310*311*312*313*314rﬁ
ISO_WIN_MAP7chardet.universaldetector.UniversalDetector.ISO_WIN_MAPu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict*38*39*310*311*312*313*314rπ
result2chardet.universaldetector.UniversalDetector.resultZ
TypeAlias[TypedDict]
	TypedDict"1chardet.universaldetector._IntermediateResultType*38*39*310*311*312*313*314ry
done0chardet.universaldetector.UniversalDetector.done
builtins.bool"builtins.bool*38*39*310*311*312*313*314rÖ
lang_filter7chardet.universaldetector.UniversalDetector.lang_filter
builtins.int"builtins.int*38*39*310*311*312*313*314r
logger2chardet.universaldetector.UniversalDetector.logger 
logging.Logger"logging.Logger*38*39*310*311*312*313*314r
_FinalResultType*chardet.universaldetector._FinalResultType"typing._TypedDictj38j39j310j311j312j313j314Ä
_IntermediateResultType1chardet.universaldetector._IntermediateResultType"typing._TypedDictj38j39j310j311j312j313j314\
_LangModelTypechardet._LangModelType"typing._TypedDictj38j39j310j311j312j313j314ó
detectchardet.detect"S
TypeAlias[TypedDict]
	TypedDict"*chardet.universaldetector._FinalResultType*Ü
byte_strx
(Union[builtins.bytes,builtins.bytearray] 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearrayz38z39z310z311z312z313z314ï

detect_allchardet.detect_all"ê
#builtins.list[TypeAlias[TypedDict]]Z
TypeAlias[TypedDict]
	TypedDict"1chardet.universaldetector._IntermediateResultType"builtins.list*Ü
byte_strx
(Union[builtins.bytes,builtins.bytearray] 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearray*6
ignore_threshold
builtins.bool"builtins.bool z38z39z310z311z312z313z314*â
__path__chardet.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*38*39*310*311*312*313*314*§
__annotations__chardet.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313*314*è
VERSIONchardet.version.VERSIONJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*38*39*310*311*312*313*314*i
__version__chardet.version.__version__
builtins.str"builtins.str*38*39*310*311*312*313*314