
openpyxl.cell.text◊)
PhoneticProperties%openpyxl.cell.text.PhoneticProperties".openpyxl.descriptors.serialisable.Serialisable*È
__init__.openpyxl.cell.text.PhoneticProperties.__init__"
None*X
selfN
%openpyxl.cell.text.PhoneticProperties"%openpyxl.cell.text.PhoneticProperties*ç
fontIdÄ
çTypeAlias[Union[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]]æ

ÇUnion[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]
builtins.int"builtins.int
builtins.str"builtins.str÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer(
typing.SupportsInt"typing.SupportsIntB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex2
_typeshed.SupportsTrunc"_typeshed.SupportsTrunc"+openpyxl.descriptors.base._ConvertibleToInt*≈
type∏
ãUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],Literal[builtins.str],None]‚
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"*openpyxl.cell.text._PhoneticPropertiesType7
Literal[builtins.str]	
builtins.str"builtins.str
None *œ
	alignmentΩ
ãUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],Literal[builtins.str],None]Á
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"/openpyxl.cell.text._PhoneticPropertiesAlignment7
Literal[builtins.str]	
builtins.str"builtins.str
None z38z39z310z311z312z313z314j38j39j310j311j312j313j314rw
tagname-openpyxl.cell.text.PhoneticProperties.tagname
builtins.str"builtins.str*38*39*310*311*312*313*314rÙ
fontId,openpyxl.cell.text.PhoneticProperties.fontIdö
9openpyxl.descriptors.base.Integer[Literal[builtins.bool]]:
Literal[builtins.bool]	
builtins.bool"builtins.bool"!openpyxl.descriptors.base.Integer*38*39*310*311*312*313*314rÌ
type*openpyxl.cell.text.PhoneticProperties.typeó
åopenpyxl.descriptors.base.NoneSet[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]]‚
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"*openpyxl.cell.text._PhoneticPropertiesType"!openpyxl.descriptors.base.NoneSet*38*39*310*311*312*313*314r¸
	alignment/openpyxl.cell.text.PhoneticProperties.alignmentú
åopenpyxl.descriptors.base.NoneSet[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]]Á
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"/openpyxl.cell.text._PhoneticPropertiesAlignment"!openpyxl.descriptors.base.NoneSet*38*39*310*311*312*313*314É$
PhoneticTextopenpyxl.cell.text.PhoneticText".openpyxl.descriptors.serialisable.Serialisable*´
__init__(openpyxl.cell.text.PhoneticText.__init__"
None*L
selfB
openpyxl.cell.text.PhoneticText"openpyxl.cell.text.PhoneticText*â
sbÄ
çTypeAlias[Union[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]]æ

ÇUnion[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]
builtins.int"builtins.int
builtins.str"builtins.str÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer(
typing.SupportsInt"typing.SupportsIntB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex2
_typeshed.SupportsTrunc"_typeshed.SupportsTrunc"+openpyxl.descriptors.base._ConvertibleToInt*â
ebÄ
çTypeAlias[Union[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]]æ

ÇUnion[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]
builtins.int"builtins.int
builtins.str"builtins.str÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer(
typing.SupportsInt"typing.SupportsIntB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex2
_typeshed.SupportsTrunc"_typeshed.SupportsTrunc"+openpyxl.descriptors.base._ConvertibleToInt*d
t[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z38z39z310z311z312z313z314j38j39j310j311j312j313j314rq
tagname'openpyxl.cell.text.PhoneticText.tagname
builtins.str"builtins.str*38*39*310*311*312*313*314rÊ
sb"openpyxl.cell.text.PhoneticText.sbö
9openpyxl.descriptors.base.Integer[Literal[builtins.bool]]:
Literal[builtins.bool]	
builtins.bool"builtins.bool"!openpyxl.descriptors.base.Integer*38*39*310*311*312*313*314rÊ
eb"openpyxl.cell.text.PhoneticText.ebö
9openpyxl.descriptors.base.Integer[Literal[builtins.bool]]:
Literal[builtins.bool]	
builtins.bool"builtins.bool"!openpyxl.descriptors.base.Integer*38*39*310*311*312*313*314rz
t!openpyxl.cell.text.PhoneticText.t1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rë
text$openpyxl.cell.text.PhoneticText.textB
openpyxl.descriptors.base.Alias"openpyxl.descriptors.base.Alias*38*39*310*311*312*313*314ë 

InlineFontopenpyxl.cell.text.InlineFont"openpyxl.styles.fonts.Font*ﬁ
__init__&openpyxl.cell.text.InlineFont.__init__"
None*H
self>
openpyxl.cell.text.InlineFont"openpyxl.cell.text.InlineFont*h
rFont[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *j
charset[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *i
family[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *d
b[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *d
i[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *i
strike[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *j
outline[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *i
shadow[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *k
condense[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *i
extend[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *h
color[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *e
sz[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *d
u[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *l
	vertAlign[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *i
scheme[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z38z39z310z311z312z313z314j38j39j310j311j312j313j314ro
tagname%openpyxl.cell.text.InlineFont.tagname
builtins.str"builtins.str*38*39*310*311*312*313*314rÄ
rFont#openpyxl.cell.text.InlineFont.rFont1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rÑ
charset%openpyxl.cell.text.InlineFont.charset1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rÇ
family$openpyxl.cell.text.InlineFont.family1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rx
bopenpyxl.cell.text.InlineFont.b1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rx
iopenpyxl.cell.text.InlineFont.i1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rÇ
strike$openpyxl.cell.text.InlineFont.strike1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rÑ
outline%openpyxl.cell.text.InlineFont.outline1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rÇ
shadow$openpyxl.cell.text.InlineFont.shadow1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rÜ
condense&openpyxl.cell.text.InlineFont.condense1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rÇ
extend$openpyxl.cell.text.InlineFont.extend1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rÄ
color#openpyxl.cell.text.InlineFont.color1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rz
sz openpyxl.cell.text.InlineFont.sz1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rx
uopenpyxl.cell.text.InlineFont.u1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rà
	vertAlign'openpyxl.cell.text.InlineFont.vertAlign1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rÇ
scheme$openpyxl.cell.text.InlineFont.scheme1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314r©
__elements__*openpyxl.cell.text.InlineFont.__elements__L
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple*38*39*310*311*312*313*314˘
RichTextopenpyxl.cell.text.RichText".openpyxl.descriptors.serialisable.Serialisable*å
__init__$openpyxl.cell.text.RichText.__init__"
None*D
self:
openpyxl.cell.text.RichText"openpyxl.cell.text.RichText*Ç
rPrw
)Union[openpyxl.cell.text.InlineFont,None]>
openpyxl.cell.text.InlineFont"openpyxl.cell.text.InlineFont
None *d
t[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z38z39z310z311z312z313z314j38j39j310j311j312j313j314rm
tagname#openpyxl.cell.text.RichText.tagname
builtins.str"builtins.str*38*39*310*311*312*313*314ræ
rPropenpyxl.cell.text.RichText.rPrÙ
Uopenpyxl.descriptors.base.Typed[openpyxl.cell.text.InlineFont,Literal[builtins.bool]]>
openpyxl.cell.text.InlineFont"openpyxl.cell.text.InlineFont:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Typed*38*39*310*311*312*313*314rç
font openpyxl.cell.text.RichText.fontB
openpyxl.descriptors.base.Alias"openpyxl.descriptors.base.Alias*38*39*310*311*312*313*314rv
topenpyxl.cell.text.RichText.t1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rç
text openpyxl.cell.text.RichText.textB
openpyxl.descriptors.base.Alias"openpyxl.descriptors.base.Alias*38*39*310*311*312*313*314rß
__elements__(openpyxl.cell.text.RichText.__elements__L
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple*38*39*310*311*312*313*314€
Textopenpyxl.cell.text.Text".openpyxl.descriptors.serialisable.Serialisable*∆
__init__ openpyxl.cell.text.Text.__init__"
None*<
self2
openpyxl.cell.text.Text"openpyxl.cell.text.Text*d
t[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
r
Any *
rPh
Any *¢

phoneticPrè
1Union[openpyxl.cell.text.PhoneticProperties,None]N
%openpyxl.cell.text.PhoneticProperties"%openpyxl.cell.text.PhoneticProperties
None z38z39z310z311z312z313z314*l
contentopenpyxl.cell.text.Text.content*
self0:builtins.property`z38z39z310z311z312z313z314j38j39j310j311j312j313j314ri
tagnameopenpyxl.cell.text.Text.tagname
builtins.str"builtins.str*38*39*310*311*312*313*314rr
topenpyxl.cell.text.Text.t1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rã
plainopenpyxl.cell.text.Text.plainB
openpyxl.descriptors.base.Alias"openpyxl.descriptors.base.Alias*38*39*310*311*312*313*314rr
ropenpyxl.cell.text.Text.r1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rì
	formatted!openpyxl.cell.text.Text.formattedB
openpyxl.descriptors.base.Alias"openpyxl.descriptors.base.Alias*38*39*310*311*312*313*314rv
rPhopenpyxl.cell.text.Text.rPh1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rë
phonetic openpyxl.cell.text.Text.phoneticB
openpyxl.descriptors.base.Alias"openpyxl.descriptors.base.Alias*38*39*310*311*312*313*314r‡

phoneticPr"openpyxl.cell.text.Text.phoneticPrå
]openpyxl.descriptors.base.Typed[openpyxl.cell.text.PhoneticProperties,Literal[builtins.bool]]N
%openpyxl.cell.text.PhoneticProperties"%openpyxl.cell.text.PhoneticProperties:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Typed*38*39*310*311*312*313*314r•
PhoneticProperties*openpyxl.cell.text.Text.PhoneticPropertiesB
openpyxl.descriptors.base.Alias"openpyxl.descriptors.base.Alias*38*39*310*311*312*313*314r£
__elements__$openpyxl.cell.text.Text.__elements__L
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple*38*39*310*311*312*313*314*Ø
__annotations__"openpyxl.cell.text.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313*314