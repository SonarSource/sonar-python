
click.testingØ
EchoingStdinclick.testing.EchoingStdin"builtins.object*‹
__init__#click.testing.EchoingStdin.__init__"
None*B
self8
click.testing.EchoingStdin"click.testing.EchoingStdin*-
input"
typing.BinaryIO"typing.BinaryIO*.
output"
typing.BinaryIO"typing.BinaryIO*ö
__getattr__&click.testing.EchoingStdin.__getattr__"
Any*:8
click.testing.EchoingStdin"click.testing.EchoingStdin*
builtins.str"builtins.str*π
_echo click.testing.EchoingStdin._echo" 
builtins.bytes"builtins.bytes*B
self8
click.testing.EchoingStdin"click.testing.EchoingStdin*(
rv 
builtins.bytes"builtins.bytes*¥
readclick.testing.EchoingStdin.read" 
builtins.bytes"builtins.bytes*B
self8
click.testing.EchoingStdin"click.testing.EchoingStdin*%
n
builtins.int"builtins.int *∂
read1 click.testing.EchoingStdin.read1" 
builtins.bytes"builtins.bytes*B
self8
click.testing.EchoingStdin"click.testing.EchoingStdin*%
n
builtins.int"builtins.int *º
readline#click.testing.EchoingStdin.readline" 
builtins.bytes"builtins.bytes*B
self8
click.testing.EchoingStdin"click.testing.EchoingStdin*%
n
builtins.int"builtins.int *«
	readlines$click.testing.EchoingStdin.readlines"P
builtins.list[builtins.bytes] 
builtins.bytes"builtins.bytes"builtins.list*B
self8
click.testing.EchoingStdin"click.testing.EchoingStdin*¡
__iter__#click.testing.EchoingStdin.__iter__"T
typing.Iterator[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Iterator*:8
click.testing.EchoingStdin"click.testing.EchoingStdin*â
__repr__#click.testing.EchoingStdin.__repr__"
builtins.str"builtins.str*:8
click.testing.EchoingStdin"click.testing.EchoingStdinrO
_input!click.testing.EchoingStdin._input"
typing.BinaryIO"typing.BinaryIOrQ
_output"click.testing.EchoingStdin._output"
typing.BinaryIO"typing.BinaryIOrM
_paused"click.testing.EchoingStdin._paused
builtins.bool"builtins.boolÑ
_NamedTextIOWrapper!click.testing._NamedTextIOWrapper"io.TextIOWrapper*ß
__init__*click.testing._NamedTextIOWrapper.__init__"
None*P
selfF
!click.testing._NamedTextIOWrapper"!click.testing._NamedTextIOWrapper*.
buffer"
typing.BinaryIO"typing.BinaryIO*&
name
builtins.str"builtins.str*&
mode
builtins.str"builtins.str*
kwargs
Any*µ
name&click.testing._NamedTextIOWrapper.name"
builtins.str"builtins.str*P
selfF
!click.testing._NamedTextIOWrapper"!click.testing._NamedTextIOWrapper0:builtins.property`*µ
mode&click.testing._NamedTextIOWrapper.mode"
builtins.str"builtins.str*P
selfF
!click.testing._NamedTextIOWrapper"!click.testing._NamedTextIOWrapper0:builtins.property`rN
_name'click.testing._NamedTextIOWrapper._name
builtins.str"builtins.strrN
_mode'click.testing._NamedTextIOWrapper._mode
builtins.str"builtins.str◊
Resultclick.testing.Result"builtins.object*Å
__init__click.testing.Result.__init__"
None*6
self,
click.testing.Result"click.testing.Result*>
runner2
click.testing.CliRunner"click.testing.CliRunner*2
stdout_bytes 
builtins.bytes"builtins.bytes*\
stderr_bytesJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
None*
return_value
Any*+
	exit_code
builtins.int"builtins.int*q
	exceptionb
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*Ü
exc_infoı
ZUnion[Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType],None]ä
NTuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type0
builtins.BaseException"builtins.BaseException*
types.TracebackType"types.TracebackType
None *í
outputclick.testing.Result.output"
builtins.str"builtins.str*6
self,
click.testing.Result"click.testing.Result0:builtins.property`*í
stdoutclick.testing.Result.stdout"
builtins.str"builtins.str*6
self,
click.testing.Result"click.testing.Result0:builtins.property`*í
stderrclick.testing.Result.stderr"
builtins.str"builtins.str*6
self,
click.testing.Result"click.testing.Result0:builtins.property`*w
__repr__click.testing.Result.__repr__"
builtins.str"builtins.str*.,
click.testing.Result"click.testing.ResultrY
runnerclick.testing.Result.runner2
click.testing.CliRunner"click.testing.CliRunnerrS
stdout_bytes!click.testing.Result.stdout_bytes 
builtins.bytes"builtins.bytesr}
stderr_bytes!click.testing.Result.stderr_bytesJ
Union[builtins.bytes,None] 
builtins.bytes"builtins.bytes
Noner:
return_value!click.testing.Result.return_value
AnyrI
	exit_codeclick.testing.Result.exit_code
builtins.int"builtins.intrè
	exceptionclick.testing.Result.exceptionb
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
Noner°
exc_infoclick.testing.Result.exc_infoı
ZUnion[Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType],None]ä
NTuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type0
builtins.BaseException"builtins.BaseException*
types.TracebackType"types.TracebackType
None≈
	CliRunnerclick.testing.CliRunner"builtins.object*ë
__init__ click.testing.CliRunner.__init__"
None*<
self2
click.testing.CliRunner"click.testing.CliRunner*+
charset
builtins.str"builtins.str *â
env˝
AUnion[typing.Mapping[builtins.str,Union[builtins.str,None]],None]´
5typing.Mapping[builtins.str,Union[builtins.str,None]]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None"typing.Mapping
None *0

echo_stdin
builtins.bool"builtins.bool *0

mix_stderr
builtins.bool"builtins.bool *›
get_default_prog_name-click.testing.CliRunner.get_default_prog_name"
builtins.str"builtins.str*<
self2
click.testing.CliRunner"click.testing.CliRunner*9
cli0
click.core.BaseCommand"click.core.BaseCommand*™
make_env click.testing.CliRunner.make_env"´
5typing.Mapping[builtins.str,Union[builtins.str,None]]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None"typing.Mapping*<
self2
click.testing.CliRunner"click.testing.CliRunner*è
	overrides˝
AUnion[typing.Mapping[builtins.str,Union[builtins.str,None]],None]´
5typing.Mapping[builtins.str,Union[builtins.str,None]]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None"typing.Mapping
None *’
	isolation!click.testing.CliRunner.isolation"’
9typing.Iterator[Tuple[io.BytesIO,Union[io.BytesIO,None]]]Ü
(Tuple[io.BytesIO,Union[io.BytesIO,None]]

io.BytesIO"
io.BytesIO>
Union[io.BytesIO,None]

io.BytesIO"
io.BytesIO
None"typing.Iterator*<
self2
click.testing.CliRunner"click.testing.CliRunner*∏
input™
6Union[builtins.str,builtins.bytes,typing.IO[Any],None]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes$
typing.IO[Any]
Any"	typing.IO
None *â
env˝
AUnion[typing.Mapping[builtins.str,Union[builtins.str,None]],None]´
5typing.Mapping[builtins.str,Union[builtins.str,None]]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None"typing.Mapping
None *+
color
builtins.bool"builtins.bool 0:contextlib.contextmanager*—
invokeclick.testing.CliRunner.invoke",
click.testing.Result"click.testing.Result*<
self2
click.testing.CliRunner"click.testing.CliRunner*9
cli0
click.core.BaseCommand"click.core.BaseCommand*ø
args≤
6Union[builtins.str,typing.Sequence[builtins.str],None]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *∏
input™
6Union[builtins.str,builtins.bytes,typing.IO[Any],None]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes$
typing.IO[Any]
Any"	typing.IO
None *â
env˝
AUnion[typing.Mapping[builtins.str,Union[builtins.str,None]],None]´
5typing.Mapping[builtins.str,Union[builtins.str,None]]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None"typing.Mapping
None *6
catch_exceptions
builtins.bool"builtins.bool *+
color
builtins.bool"builtins.bool *
extra
Any*ˇ
isolated_filesystem+click.testing.CliRunner.isolated_filesystem"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*<
self2
click.testing.CliRunner"click.testing.CliRunner*è
temp_dir
)Union[builtins.str,os.PathLike[Any],None]
builtins.str"builtins.str(
os.PathLike[Any]
Any"os.PathLike
None 0:contextlib.contextmanagerrH
charsetclick.testing.CliRunner.charset
builtins.str"builtins.strr–
envclick.testing.CliRunner.env´
5typing.Mapping[builtins.str,Union[builtins.str,None]]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None"typing.MappingrP

echo_stdin"click.testing.CliRunner.echo_stdin
builtins.bool"builtins.boolrP

mix_stderr"click.testing.CliRunner.mix_stderr
builtins.bool"builtins.boolı
_pause_echoclick.testing._pause_echo"2
typing.Iterator[None]
None"typing.Iterator*z
streamn
&Union[click.testing.EchoingStdin,None]8
click.testing.EchoingStdin"click.testing.EchoingStdin
None0:contextlib.contextmanagerº
make_input_streamclick.testing.make_input_stream""
typing.BinaryIO"typing.BinaryIO*∂
input™
6Union[builtins.str,builtins.bytes,typing.IO[Any],None]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes$
typing.IO[Any]
Any"	typing.IO
None*)
charset
builtins.str"builtins.str*â
__annotations__click.testing.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
ttyping 