
codecs∂
_WritableStreamcodecs._WritableStream"builtins.object*©
writecodecs._WritableStream.write""
builtins.object"builtins.object*:
self0
codecs._WritableStream"codecs._WritableStream*" 
builtins.bytes"builtins.bytes*√
seekcodecs._WritableStream.seek""
builtins.object"builtins.object*:
self0
codecs._WritableStream"codecs._WritableStream*
builtins.int"builtins.int*
builtins.int"builtins.int*Ö
closecodecs._WritableStream.close""
builtins.object"builtins.object*:
self0
codecs._WritableStream"codecs._WritableStreamX∞
_ReadableStreamcodecs._ReadableStream"builtins.object*£
readcodecs._ReadableStream.read" 
builtins.bytes"builtins.bytes*:
self0
codecs._ReadableStream"codecs._ReadableStream* 
builtins.int"builtins.int *√
seekcodecs._ReadableStream.seek""
builtins.object"builtins.object*:
self0
codecs._ReadableStream"codecs._ReadableStream*
builtins.int"builtins.int*
builtins.int"builtins.int*Ö
closecodecs._ReadableStream.close""
builtins.object"builtins.object*:
self0
codecs._ReadableStream"codecs._ReadableStreamXK
_Streamcodecs._Stream"codecs._WritableStream"codecs._ReadableStreamX¿
_Encodercodecs._Encoder"builtins.object*è
__call__codecs._Encoder.__call__"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*,
self"
codecs._Encoder"codecs._Encoder*'
input
builtins.str"builtins.str**
errors
builtins.str"builtins.str Xæ
_Decodercodecs._Decoder"builtins.object*ç
__call__codecs._Decoder.__call__"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*,
self"
codecs._Decoder"codecs._Decoder*+
input 
builtins.bytes"builtins.bytes**
errors
builtins.str"builtins.str X≤
_StreamReadercodecs._StreamReader"builtins.object*˜
__call__codecs._StreamReader.__call__"*
codecs.StreamReader"codecs.StreamReader*6
self,
codecs._StreamReader"codecs._StreamReader*<
stream0
codecs._ReadableStream"codecs._ReadableStream**
errors
builtins.str"builtins.str X≤
_StreamWritercodecs._StreamWriter"builtins.object*˜
__call__codecs._StreamWriter.__call__"*
codecs.StreamWriter"codecs.StreamWriter*6
self,
codecs._StreamWriter"codecs._StreamWriter*<
stream0
codecs._WritableStream"codecs._WritableStream**
errors
builtins.str"builtins.str Xû
_IncrementalEncodercodecs._IncrementalEncoder"builtins.object*◊
__call__#codecs._IncrementalEncoder.__call__"6
codecs.IncrementalEncoder"codecs.IncrementalEncoder*B
self8
codecs._IncrementalEncoder"codecs._IncrementalEncoder**
errors
builtins.str"builtins.str Xû
_IncrementalDecodercodecs._IncrementalDecoder"builtins.object*◊
__call__#codecs._IncrementalDecoder.__call__"6
codecs.IncrementalDecoder"codecs.IncrementalDecoder*B
self8
codecs._IncrementalDecoder"codecs._IncrementalDecoder**
errors
builtins.str"builtins.str X‰
	CodecInfocodecs.CodecInfo"builtins.tuple*‚
encodecodecs.CodecInfo.encode""
codecs._Encoder"codecs._Encoder*É
self¯
PTuple[codecs._Encoder,codecs._Decoder,codecs._StreamReader,codecs._StreamWriter]"
codecs._Encoder"codecs._Encoder"
codecs._Decoder"codecs._Decoder,
codecs._StreamReader"codecs._StreamReader,
codecs._StreamWriter"codecs._StreamWriter0:builtins.property`*‚
decodecodecs.CodecInfo.decode""
codecs._Decoder"codecs._Decoder*É
self¯
PTuple[codecs._Encoder,codecs._Decoder,codecs._StreamReader,codecs._StreamWriter]"
codecs._Encoder"codecs._Encoder"
codecs._Decoder"codecs._Decoder,
codecs._StreamReader"codecs._StreamReader,
codecs._StreamWriter"codecs._StreamWriter0:builtins.property`*¯
streamreadercodecs.CodecInfo.streamreader",
codecs._StreamReader"codecs._StreamReader*É
self¯
PTuple[codecs._Encoder,codecs._Decoder,codecs._StreamReader,codecs._StreamWriter]"
codecs._Encoder"codecs._Encoder"
codecs._Decoder"codecs._Decoder,
codecs._StreamReader"codecs._StreamReader,
codecs._StreamWriter"codecs._StreamWriter0:builtins.property`*¯
streamwritercodecs.CodecInfo.streamwriter",
codecs._StreamWriter"codecs._StreamWriter*É
self¯
PTuple[codecs._Encoder,codecs._Decoder,codecs._StreamReader,codecs._StreamWriter]"
codecs._Encoder"codecs._Encoder"
codecs._Decoder"codecs._Decoder,
codecs._StreamReader"codecs._StreamReader,
codecs._StreamWriter"codecs._StreamWriter0:builtins.property`*ê
incrementalencoder#codecs.CodecInfo.incrementalencoder"8
codecs._IncrementalEncoder"codecs._IncrementalEncoder*É
self¯
PTuple[codecs._Encoder,codecs._Decoder,codecs._StreamReader,codecs._StreamWriter]"
codecs._Encoder"codecs._Encoder"
codecs._Decoder"codecs._Decoder,
codecs._StreamReader"codecs._StreamReader,
codecs._StreamWriter"codecs._StreamWriter0:builtins.property`*ê
incrementaldecoder#codecs.CodecInfo.incrementaldecoder"8
codecs._IncrementalDecoder"codecs._IncrementalDecoder*É
self¯
PTuple[codecs._Encoder,codecs._Decoder,codecs._StreamReader,codecs._StreamWriter]"
codecs._Encoder"codecs._Encoder"
codecs._Decoder"codecs._Decoder,
codecs._StreamReader"codecs._StreamReader,
codecs._StreamWriter"codecs._StreamWriter0:builtins.property`*ë
__new__codecs.CodecInfo.__new__"î
codecs.CodecInfo.Self¯
PTuple[codecs._Encoder,codecs._Decoder,codecs._StreamReader,codecs._StreamWriter]"
codecs._Encoder"codecs._Encoder"
codecs._Decoder"codecs._Decoder,
codecs._StreamReader"codecs._StreamReader,
codecs._StreamWriter"codecs._StreamWriter*∆
clsº
Type[codecs.CodecInfo.Self]î
codecs.CodecInfo.Self¯
PTuple[codecs._Encoder,codecs._Decoder,codecs._StreamReader,codecs._StreamWriter]"
codecs._Encoder"codecs._Encoder"
codecs._Decoder"codecs._Decoder,
codecs._StreamReader"codecs._StreamReader,
codecs._StreamWriter"codecs._StreamWriter"type*.
encode"
codecs._Encoder"codecs._Encoder*.
decode"
codecs._Decoder"codecs._Decoder*p
streamreader\
 Union[codecs._StreamReader,None],
codecs._StreamReader"codecs._StreamReader
None *p
streamwriter\
 Union[codecs._StreamWriter,None],
codecs._StreamWriter"codecs._StreamWriter
None *à
incrementalencodern
&Union[codecs._IncrementalEncoder,None]8
codecs._IncrementalEncoder"codecs._IncrementalEncoder
None *à
incrementaldecodern
&Union[codecs._IncrementalDecoder,None]8
codecs._IncrementalDecoder"codecs._IncrementalDecoder
None *P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *`
_is_text_encodingG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None r;
namecodecs.CodecInfo.name
builtins.str"builtins.strÆ
Codeccodecs.Codec"builtins.object*Ç
encodecodecs.Codec.encode"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*&
self
codecs.Codec"codecs.Codec*'
input
builtins.str"builtins.str**
errors
builtins.str"builtins.str *Ä
decodecodecs.Codec.decode"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*&
self
codecs.Codec"codecs.Codec*+
input 
builtins.bytes"builtins.bytes**
errors
builtins.str"builtins.str Á
IncrementalEncodercodecs.IncrementalEncoder"builtins.object*¶
__init__"codecs.IncrementalEncoder.__init__"
None*@
self6
codecs.IncrementalEncoder"codecs.IncrementalEncoder**
errors
builtins.str"builtins.str *¸
encode codecs.IncrementalEncoder.encode" 
builtins.bytes"builtins.bytes*@
self6
codecs.IncrementalEncoder"codecs.IncrementalEncoder*'
input
builtins.str"builtins.str*+
final
builtins.bool"builtins.bool 0:abc.abstractmethod@*t
resetcodecs.IncrementalEncoder.reset"
None*@
self6
codecs.IncrementalEncoder"codecs.IncrementalEncoder*“
getstate"codecs.IncrementalEncoder.getstate"`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*@
self6
codecs.IncrementalEncoder"codecs.IncrementalEncoder*Á
setstate"codecs.IncrementalEncoder.setstate"
None*@
self6
codecs.IncrementalEncoder"codecs.IncrementalEncoder*k
state`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strrH
errors codecs.IncrementalEncoder.errors
builtins.str"builtins.str´
IncrementalDecodercodecs.IncrementalDecoder"builtins.object*¶
__init__"codecs.IncrementalDecoder.__init__"
None*@
self6
codecs.IncrementalDecoder"codecs.IncrementalDecoder**
errors
builtins.str"builtins.str *¥
decode codecs.IncrementalDecoder.decode"
builtins.str"builtins.str*@
self6
codecs.IncrementalDecoder"codecs.IncrementalDecoder*‚
input÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*+
final
builtins.bool"builtins.bool 0:abc.abstractmethod@*t
resetcodecs.IncrementalDecoder.reset"
None*@
self6
codecs.IncrementalDecoder"codecs.IncrementalDecoder*ÿ
getstate"codecs.IncrementalDecoder.getstate"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*@
self6
codecs.IncrementalDecoder"codecs.IncrementalDecoder*Ì
setstate"codecs.IncrementalDecoder.setstate"
None*@
self6
codecs.IncrementalDecoder"codecs.IncrementalDecoder*q
statef
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.intrH
errors codecs.IncrementalDecoder.errors
builtins.str"builtins.strÅ
BufferedIncrementalEncoder!codecs.BufferedIncrementalEncoder"codecs.IncrementalEncoder*æ
__init__*codecs.BufferedIncrementalEncoder.__init__"
None*P
selfF
!codecs.BufferedIncrementalEncoder"!codecs.BufferedIncrementalEncoder**
errors
builtins.str"builtins.str *í
_buffer_encode0codecs.BufferedIncrementalEncoder._buffer_encode"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*P
selfF
!codecs.BufferedIncrementalEncoder"!codecs.BufferedIncrementalEncoder*'
input
builtins.str"builtins.str*(
errors
builtins.str"builtins.str*)
final
builtins.bool"builtins.bool0:abc.abstractmethod@*¸
encode(codecs.BufferedIncrementalEncoder.encode" 
builtins.bytes"builtins.bytes*P
selfF
!codecs.BufferedIncrementalEncoder"!codecs.BufferedIncrementalEncoder*'
input
builtins.str"builtins.str*+
final
builtins.bool"builtins.bool rP
buffer(codecs.BufferedIncrementalEncoder.buffer
builtins.str"builtins.strÛ
BufferedIncrementalDecoder!codecs.BufferedIncrementalDecoder"codecs.IncrementalDecoder*æ
__init__*codecs.BufferedIncrementalDecoder.__init__"
None*P
selfF
!codecs.BufferedIncrementalDecoder"!codecs.BufferedIncrementalDecoder**
errors
builtins.str"builtins.str *»	
_buffer_decode0codecs.BufferedIncrementalDecoder._buffer_decode"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*P
selfF
!codecs.BufferedIncrementalDecoder"!codecs.BufferedIncrementalDecoder*‚
input÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*(
errors
builtins.str"builtins.str*)
final
builtins.bool"builtins.bool0:abc.abstractmethod@*¥
decode(codecs.BufferedIncrementalDecoder.decode"
builtins.str"builtins.str*P
selfF
!codecs.BufferedIncrementalDecoder"!codecs.BufferedIncrementalDecoder*‚
input÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*+
final
builtins.bool"builtins.bool rT
buffer(codecs.BufferedIncrementalDecoder.buffer 
builtins.bytes"builtins.bytes‡
StreamWritercodecs.StreamWriter"codecs.Codec*“
__init__codecs.StreamWriter.__init__"
None*4
self*
codecs.StreamWriter"codecs.StreamWriter*<
stream0
codecs._WritableStream"codecs._WritableStream**
errors
builtins.str"builtins.str *å
writecodecs.StreamWriter.write"
None*4
self*
codecs.StreamWriter"codecs.StreamWriter*(
object
builtins.str"builtins.str*∆

writelinescodecs.StreamWriter.writelines"
None*4
self*
codecs.StreamWriter"codecs.StreamWriter*X
listN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*b
resetcodecs.StreamWriter.reset"
None*4
self*
codecs.StreamWriter"codecs.StreamWriter*Í
	__enter__codecs.StreamWriter.__enter__"]
codecs.StreamWriter.Self*
codecs.StreamWriter"codecs.StreamWriter"codecs.StreamWriter*_]
codecs.StreamWriter.Self*
codecs.StreamWriter"codecs.StreamWriter"codecs.StreamWriter*π
__exit__codecs.StreamWriter.__exit__"
None*,*
codecs.StreamWriter"codecs.StreamWriter*ìê
(Union[Type[builtins.BaseException],None]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type
None*db
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*[Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None*÷
__getattr__codecs.StreamWriter.__getattr__"
Any*,*
codecs.StreamWriter"codecs.StreamWriter*
builtins.str"builtins.str*OK
CallableType[builtins.function]&
builtins.function"builtins.function rV
streamcodecs.StreamWriter.stream0
codecs._WritableStream"codecs._WritableStreamrB
errorscodecs.StreamWriter.errors
builtins.str"builtins.str§
StreamReadercodecs.StreamReader"codecs.Codec*“
__init__codecs.StreamReader.__init__"
None*4
self*
codecs.StreamReader"codecs.StreamReader*<
stream0
codecs._ReadableStream"codecs._ReadableStream**
errors
builtins.str"builtins.str *˙
readcodecs.StreamReader.read"
builtins.str"builtins.str*4
self*
codecs.StreamReader"codecs.StreamReader*(
size
builtins.int"builtins.int *)
chars
builtins.int"builtins.int */
	firstline
builtins.bool"builtins.bool *˛
readlinecodecs.StreamReader.readline"
builtins.str"builtins.str*4
self*
codecs.StreamReader"codecs.StreamReader*P
sizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *.
keepends
builtins.bool"builtins.bool *≤
	readlinescodecs.StreamReader.readlines"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*4
self*
codecs.StreamReader"codecs.StreamReader*T
sizehintD
Union[builtins.int,None]
builtins.int"builtins.int
None *.
keepends
builtins.bool"builtins.bool *b
resetcodecs.StreamReader.reset"
None*4
self*
codecs.StreamReader"codecs.StreamReader*Í
	__enter__codecs.StreamReader.__enter__"]
codecs.StreamReader.Self*
codecs.StreamReader"codecs.StreamReader"codecs.StreamReader*_]
codecs.StreamReader.Self*
codecs.StreamReader"codecs.StreamReader"codecs.StreamReader*π
__exit__codecs.StreamReader.__exit__"
None*,*
codecs.StreamReader"codecs.StreamReader*ìê
(Union[Type[builtins.BaseException],None]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type
None*db
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*[Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None*Ë
__iter__codecs.StreamReader.__iter__"]
codecs.StreamReader.Self*
codecs.StreamReader"codecs.StreamReader"codecs.StreamReader*_]
codecs.StreamReader.Self*
codecs.StreamReader"codecs.StreamReader"codecs.StreamReader*|
__next__codecs.StreamReader.__next__"
builtins.str"builtins.str*4
self*
codecs.StreamReader"codecs.StreamReader*÷
__getattr__codecs.StreamReader.__getattr__"
Any*,*
codecs.StreamReader"codecs.StreamReader*
builtins.str"builtins.str*OK
CallableType[builtins.function]&
builtins.function"builtins.function rV
streamcodecs.StreamReader.stream0
codecs._ReadableStream"codecs._ReadableStreamrB
errorscodecs.StreamReader.errors
builtins.str"builtins.str©#
StreamReaderWritercodecs.StreamReaderWriter"typing.TextIO*»
__init__"codecs.StreamReaderWriter.__init__"
None*@
self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter*,
stream 
codecs._Stream"codecs._Stream*8
Reader,
codecs._StreamReader"codecs._StreamReader*8
Writer,
codecs._StreamWriter"codecs._StreamWriter**
errors
builtins.str"builtins.str *∞
readcodecs.StreamReaderWriter.read"
builtins.str"builtins.str*@
self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter*(
size
builtins.int"builtins.int *‡
readline"codecs.StreamReaderWriter.readline"
builtins.str"builtins.str*@
self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter*P
sizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *î
	readlines#codecs.StreamReaderWriter.readlines"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*@
self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter*T
sizehintD
Union[builtins.int,None]
builtins.int"builtins.int
None *é
__next__"codecs.StreamReaderWriter.__next__"
builtins.str"builtins.str*@
self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter*û
__iter__"codecs.StreamReaderWriter.__iter__"u
codecs.StreamReaderWriter.Self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter"codecs.StreamReaderWriter*wu
codecs.StreamReaderWriter.Self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter"codecs.StreamReaderWriter*ú
writecodecs.StreamReaderWriter.write"
None*@
self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter*&
data
builtins.str"builtins.str*ÿ

writelines$codecs.StreamReaderWriter.writelines"
None*@
self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter*X
listN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*t
resetcodecs.StreamReaderWriter.reset"
None*@
self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter*»
seekcodecs.StreamReaderWriter.seek"
None*@
self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter*(
offset
builtins.int"builtins.int**
whence
builtins.int"builtins.int *†
	__enter__#codecs.StreamReaderWriter.__enter__"u
codecs.StreamReaderWriter.Self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter"codecs.StreamReaderWriter*wu
codecs.StreamReaderWriter.Self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter"codecs.StreamReaderWriter*À
__exit__"codecs.StreamReaderWriter.__exit__"
None*86
codecs.StreamReaderWriter"codecs.StreamReaderWriter*ìê
(Union[Type[builtins.BaseException],None]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type
None*db
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*[Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None*ó
__getattr__%codecs.StreamReaderWriter.__getattr__"
Any*86
codecs.StreamReaderWriter"codecs.StreamReaderWriter*
builtins.str"builtins.str*t
closecodecs.StreamReaderWriter.close"
None*@
self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter*ä
fileno codecs.StreamReaderWriter.fileno"
builtins.int"builtins.int*@
self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter*t
flushcodecs.StreamReaderWriter.flush"
None*@
self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter*å
isatty codecs.StreamReaderWriter.isatty"
builtins.bool"builtins.bool*@
self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter*ê
readable"codecs.StreamReaderWriter.readable"
builtins.bool"builtins.bool*@
self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter*‡
truncate"codecs.StreamReaderWriter.truncate"
builtins.int"builtins.int*@
self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter*P
sizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *ê
seekable"codecs.StreamReaderWriter.seekable"
builtins.bool"builtins.bool*@
self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter*Ü
tellcodecs.StreamReaderWriter.tell"
builtins.int"builtins.int*@
self6
codecs.StreamReaderWriter"codecs.StreamReaderWriter*ê
writable"codecs.StreamReaderWriter.writable"
builtins.bool"builtins.bool*@
self6
codecs.StreamReaderWriter"codecs.StreamReaderWriterrL
stream codecs.StreamReaderWriter.stream 
codecs._Stream"codecs._Stream∆ 
StreamRecodercodecs.StreamRecoder"typing.BinaryIO*ô
__init__codecs.StreamRecoder.__init__"
None*6
self,
codecs.StreamRecoder"codecs.StreamRecoder*,
stream 
codecs._Stream"codecs._Stream*.
encode"
codecs._Encoder"codecs._Encoder*.
decode"
codecs._Decoder"codecs._Decoder*8
Reader,
codecs._StreamReader"codecs._StreamReader*8
Writer,
codecs._StreamWriter"codecs._StreamWriter**
errors
builtins.str"builtins.str *•
readcodecs.StreamRecoder.read" 
builtins.bytes"builtins.bytes*6
self,
codecs.StreamRecoder"codecs.StreamRecoder*(
size
builtins.int"builtins.int *’
readlinecodecs.StreamRecoder.readline" 
builtins.bytes"builtins.bytes*6
self,
codecs.StreamRecoder"codecs.StreamRecoder*P
sizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *ã
	readlinescodecs.StreamRecoder.readlines"P
builtins.list[builtins.bytes] 
builtins.bytes"builtins.bytes"builtins.list*6
self,
codecs.StreamRecoder"codecs.StreamRecoder*T
sizehintD
Union[builtins.int,None]
builtins.int"builtins.int
None *É
__next__codecs.StreamRecoder.__next__" 
builtins.bytes"builtins.bytes*6
self,
codecs.StreamRecoder"codecs.StreamRecoder*Ò
__iter__codecs.StreamRecoder.__iter__"a
codecs.StreamRecoder.Self,
codecs.StreamRecoder"codecs.StreamRecoder"codecs.StreamRecoder*ca
codecs.StreamRecoder.Self,
codecs.StreamRecoder"codecs.StreamRecoder"codecs.StreamRecoder*ë
writecodecs.StreamRecoder.write"
None*6
self,
codecs.StreamRecoder"codecs.StreamRecoder**
data 
builtins.bytes"builtins.bytes*œ

writelinescodecs.StreamRecoder.writelines"
None*6
self,
codecs.StreamRecoder"codecs.StreamRecoder*^
listT
typing.Iterable[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Iterable*e
resetcodecs.StreamRecoder.reset"
None*6
self,
codecs.StreamRecoder"codecs.StreamRecoder*à
__getattr__ codecs.StreamRecoder.__getattr__"
Any*.,
codecs.StreamRecoder"codecs.StreamRecoder*
builtins.str"builtins.str*Û
	__enter__codecs.StreamRecoder.__enter__"a
codecs.StreamRecoder.Self,
codecs.StreamRecoder"codecs.StreamRecoder"codecs.StreamRecoder*ca
codecs.StreamRecoder.Self,
codecs.StreamRecoder"codecs.StreamRecoder"codecs.StreamRecoder*º
__exit__codecs.StreamRecoder.__exit__"
None*.,
codecs.StreamRecoder"codecs.StreamRecoder*ìê
(Union[Type[builtins.BaseException],None]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type
None*db
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*[Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None*π
seekcodecs.StreamRecoder.seek"
None*6
self,
codecs.StreamRecoder"codecs.StreamRecoder*(
offset
builtins.int"builtins.int**
whence
builtins.int"builtins.int *e
closecodecs.StreamRecoder.close"
None*6
self,
codecs.StreamRecoder"codecs.StreamRecoder*{
filenocodecs.StreamRecoder.fileno"
builtins.int"builtins.int*6
self,
codecs.StreamRecoder"codecs.StreamRecoder*e
flushcodecs.StreamRecoder.flush"
None*6
self,
codecs.StreamRecoder"codecs.StreamRecoder*}
isattycodecs.StreamRecoder.isatty"
builtins.bool"builtins.bool*6
self,
codecs.StreamRecoder"codecs.StreamRecoder*Å
readablecodecs.StreamRecoder.readable"
builtins.bool"builtins.bool*6
self,
codecs.StreamRecoder"codecs.StreamRecoder*—
truncatecodecs.StreamRecoder.truncate"
builtins.int"builtins.int*6
self,
codecs.StreamRecoder"codecs.StreamRecoder*P
sizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *Å
seekablecodecs.StreamRecoder.seekable"
builtins.bool"builtins.bool*6
self,
codecs.StreamRecoder"codecs.StreamRecoder*w
tellcodecs.StreamRecoder.tell"
builtins.int"builtins.int*6
self,
codecs.StreamRecoder"codecs.StreamRecoder*Å
writablecodecs.StreamRecoder.writable"
builtins.bool"builtins.bool*6
self,
codecs.StreamRecoder"codecs.StreamRecoder¿
register_codecs.register"
None*óî
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"_codecs._SearchFunctionÂ
register_error_codecs.register_error"
None*
builtins.str"builtins.str*êç
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"_codecs._Handler‘
lookup_error_codecs.lookup_error"ç
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"_codecs._Handler*
builtins.str"builtins.strß
lookup_codecs.lookup"Ï
[TypeAlias[Tuple[codecs._Encoder,codecs._Decoder,codecs._StreamReader,codecs._StreamWriter]]¯
PTuple[codecs._Encoder,codecs._Decoder,codecs._StreamReader,codecs._StreamWriter]"
codecs._Encoder"codecs._Encoder"
codecs._Decoder"codecs._Decoder,
codecs._StreamReader"codecs._StreamReader,
codecs._StreamWriter"codecs._StreamWriter"codecs.CodecInfo*
builtins.str"builtins.strû
charmap_build_codecs.charmap_build"’
OTypeAlias[Union[builtins.dict[builtins.int,builtins.int],_codecs._EncodingMap]]Ì
DUnion[builtins.dict[builtins.int,builtins.int],_codecs._EncodingMap]u
(builtins.dict[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.dict,
_codecs._EncodingMap"_codecs._EncodingMap"_codecs._CharMap*
builtins.str"builtins.str¨
ascii_decode_codecs.ascii_decode"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*Ÿ÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*HD
Union[builtins.str,None]
builtins.str"builtins.str
None ˆ
ascii_encode_codecs.ascii_encode"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*
builtins.str"builtins.str*HD
Union[builtins.str,None]
builtins.str"builtins.str
None ˘
charmap_decode_codecs.charmap_decode"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*Ÿ÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*HD
Union[builtins.str,None]
builtins.str"builtins.str
None *∆¡
[Union[TypeAlias[Union[builtins.dict[builtins.int,builtins.int],_codecs._EncodingMap]],None]’
OTypeAlias[Union[builtins.dict[builtins.int,builtins.int],_codecs._EncodingMap]]Ì
DUnion[builtins.dict[builtins.int,builtins.int],_codecs._EncodingMap]u
(builtins.dict[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.dict,
_codecs._EncodingMap"_codecs._EncodingMap"_codecs._CharMap
None √
charmap_encode_codecs.charmap_encode"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*
builtins.str"builtins.str*HD
Union[builtins.str,None]
builtins.str"builtins.str
None *∆¡
[Union[TypeAlias[Union[builtins.dict[builtins.int,builtins.int],_codecs._EncodingMap]],None]’
OTypeAlias[Union[builtins.dict[builtins.int,builtins.int],_codecs._EncodingMap]]Ì
DUnion[builtins.dict[builtins.int,builtins.int],_codecs._EncodingMap]u
(builtins.dict[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.dict,
_codecs._EncodingMap"_codecs._EncodingMap"_codecs._CharMap
None ˛	
escape_decode_codecs.escape_decode"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*©¶
™Union[builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]]
builtins.str"builtins.str÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*HD
Union[builtins.str,None]
builtins.str"builtins.str
None ¸
escape_encode_codecs.escape_encode"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*" 
builtins.bytes"builtins.bytes*HD
Union[builtins.str,None]
builtins.str"builtins.str
None ∞
latin_1_decode_codecs.latin_1_decode"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*Ÿ÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*HD
Union[builtins.str,None]
builtins.str"builtins.str
None ˙
latin_1_encode_codecs.latin_1_encode"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*
builtins.str"builtins.str*HD
Union[builtins.str,None]
builtins.str"builtins.str
None ñ

raw_unicode_escape_decode!_codecs.raw_unicode_escape_decode"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*©¶
™Union[builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]]
builtins.str"builtins.str÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*HD
Union[builtins.str,None]
builtins.str"builtins.str
None ê
raw_unicode_escape_encode!_codecs.raw_unicode_escape_encode"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*
builtins.str"builtins.str*HD
Union[builtins.str,None]
builtins.str"builtins.str
None å

readbuffer_encode_codecs.readbuffer_encode"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*©¶
™Union[builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]]
builtins.str"builtins.str÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*HD
Union[builtins.str,None]
builtins.str"builtins.str
None é

unicode_escape_decode_codecs.unicode_escape_decode"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*©¶
™Union[builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]]
builtins.str"builtins.str÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*HD
Union[builtins.str,None]
builtins.str"builtins.str
None à
unicode_escape_encode_codecs.unicode_escape_encode"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*
builtins.str"builtins.str*HD
Union[builtins.str,None]
builtins.str"builtins.str
None ÿ
utf_16_be_decode_codecs.utf_16_be_decode"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*Ÿ÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*HD
Union[builtins.str,None]
builtins.str"builtins.str
None *"
builtins.bool"builtins.bool ˛
utf_16_be_encode_codecs.utf_16_be_encode"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*
builtins.str"builtins.str*HD
Union[builtins.str,None]
builtins.str"builtins.str
None “
utf_16_decode_codecs.utf_16_decode"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*Ÿ÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*HD
Union[builtins.str,None]
builtins.str"builtins.str
None *"
builtins.bool"builtins.bool ö
utf_16_encode_codecs.utf_16_encode"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*
builtins.str"builtins.str*HD
Union[builtins.str,None]
builtins.str"builtins.str
None * 
builtins.int"builtins.int ¶	
utf_16_ex_decode_codecs.utf_16_ex_decode"ã
-Tuple[builtins.str,builtins.int,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int
builtins.int"builtins.int*Ÿ÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*HD
Union[builtins.str,None]
builtins.str"builtins.str
None * 
builtins.int"builtins.int *"
builtins.bool"builtins.bool ÿ
utf_16_le_decode_codecs.utf_16_le_decode"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*Ÿ÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*HD
Union[builtins.str,None]
builtins.str"builtins.str
None *"
builtins.bool"builtins.bool ˛
utf_16_le_encode_codecs.utf_16_le_encode"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*
builtins.str"builtins.str*HD
Union[builtins.str,None]
builtins.str"builtins.str
None ÿ
utf_32_be_decode_codecs.utf_32_be_decode"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*Ÿ÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*HD
Union[builtins.str,None]
builtins.str"builtins.str
None *"
builtins.bool"builtins.bool ˛
utf_32_be_encode_codecs.utf_32_be_encode"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*
builtins.str"builtins.str*HD
Union[builtins.str,None]
builtins.str"builtins.str
None “
utf_32_decode_codecs.utf_32_decode"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*Ÿ÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*HD
Union[builtins.str,None]
builtins.str"builtins.str
None *"
builtins.bool"builtins.bool ö
utf_32_encode_codecs.utf_32_encode"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*
builtins.str"builtins.str*HD
Union[builtins.str,None]
builtins.str"builtins.str
None * 
builtins.int"builtins.int ¶	
utf_32_ex_decode_codecs.utf_32_ex_decode"ã
-Tuple[builtins.str,builtins.int,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int
builtins.int"builtins.int*Ÿ÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*HD
Union[builtins.str,None]
builtins.str"builtins.str
None * 
builtins.int"builtins.int *"
builtins.bool"builtins.bool ÿ
utf_32_le_decode_codecs.utf_32_le_decode"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*Ÿ÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*HD
Union[builtins.str,None]
builtins.str"builtins.str
None *"
builtins.bool"builtins.bool ˛
utf_32_le_encode_codecs.utf_32_le_encode"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*
builtins.str"builtins.str*HD
Union[builtins.str,None]
builtins.str"builtins.str
None –
utf_7_decode_codecs.utf_7_decode"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*Ÿ÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*HD
Union[builtins.str,None]
builtins.str"builtins.str
None *"
builtins.bool"builtins.bool ˆ
utf_7_encode_codecs.utf_7_encode"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*
builtins.str"builtins.str*HD
Union[builtins.str,None]
builtins.str"builtins.str
None –
utf_8_decode_codecs.utf_8_decode"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*Ÿ÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*HD
Union[builtins.str,None]
builtins.str"builtins.str
None *"
builtins.bool"builtins.bool ˆ
utf_8_encode_codecs.utf_8_encode"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*
builtins.str"builtins.str*HD
Union[builtins.str,None]
builtins.str"builtins.str
None o

getencodercodecs.getencoder""
codecs._Encoder"codecs._Encoder**
encoding
builtins.str"builtins.stro

getdecodercodecs.getdecoder""
codecs._Decoder"codecs._Decoder**
encoding
builtins.str"builtins.strõ
getincrementalencodercodecs.getincrementalencoder"8
codecs._IncrementalEncoder"codecs._IncrementalEncoder**
encoding
builtins.str"builtins.strõ
getincrementaldecodercodecs.getincrementaldecoder"8
codecs._IncrementalDecoder"codecs._IncrementalDecoder**
encoding
builtins.str"builtins.strw
	getreadercodecs.getreader",
codecs._StreamReader"codecs._StreamReader**
encoding
builtins.str"builtins.strw
	getwritercodecs.getwriter",
codecs._StreamWriter"codecs._StreamWriter**
encoding
builtins.str"builtins.str“
opencodecs.open"6
codecs.StreamReaderWriter"codecs.StreamReaderWriter**
filename
builtins.str"builtins.str*(
mode
builtins.str"builtins.str *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None **
errors
builtins.str"builtins.str *-
	buffering
builtins.int"builtins.int ≥
EncodedFilecodecs.EncodedFile",
codecs.StreamRecoder"codecs.StreamRecoder**
file 
codecs._Stream"codecs._Stream*/
data_encoding
builtins.str"builtins.str*Y
file_encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None **
errors
builtins.str"builtins.str À

iterencodecodecs.iterencode"t
*typing.Generator[builtins.bytes,None,None] 
builtins.bytes"builtins.bytes
None
None"typing.Generator*\
iteratorN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable**
encoding
builtins.str"builtins.str**
errors
builtins.str"builtins.str À

iterdecodecodecs.iterdecode"n
(typing.Generator[builtins.str,None,None]
builtins.str"builtins.str
None
None"typing.Generator*b
iteratorT
typing.Iterable[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Iterable**
encoding
builtins.str"builtins.str**
errors
builtins.str"builtins.str ß
strict_errorscodecs.strict_errors"¿
6Tuple[Union[builtins.str,builtins.bytes],builtins.int]f
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*=
	exception.
builtins.UnicodeError"builtins.UnicodeError©
replace_errorscodecs.replace_errors"¿
6Tuple[Union[builtins.str,builtins.bytes],builtins.int]f
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*=
	exception.
builtins.UnicodeError"builtins.UnicodeErrorß
ignore_errorscodecs.ignore_errors"¿
6Tuple[Union[builtins.str,builtins.bytes],builtins.int]f
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*=
	exception.
builtins.UnicodeError"builtins.UnicodeErrorΩ
xmlcharrefreplace_errorscodecs.xmlcharrefreplace_errors"¿
6Tuple[Union[builtins.str,builtins.bytes],builtins.int]f
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*=
	exception.
builtins.UnicodeError"builtins.UnicodeErrorª
backslashreplace_errorscodecs.backslashreplace_errors"¿
6Tuple[Union[builtins.str,builtins.bytes],builtins.int]f
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*=
	exception.
builtins.UnicodeError"builtins.UnicodeError±
namereplace_errorscodecs.namereplace_errors"¿
6Tuple[Union[builtins.str,builtins.bytes],builtins.int]f
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*=
	exception.
builtins.UnicodeError"builtins.UnicodeError"´
encode_codecs.encodeÉ
encode_codecs.encode" 
builtins.bytes"builtins.bytes*‡
obj÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*¢
encodingì
ÒTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]˚	
ÊUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"_codecs._BytesToBytesEncoding**
errors
builtins.str"builtins.str 0:typing.overloadX∑
encode_codecs.encode"
builtins.str"builtins.str*%
obj
builtins.str"builtins.str*ñ
encodingá
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"_codecs._StrToStrEncoding**
errors
builtins.str"builtins.str 0:typing.overloadX–
encode_codecs.encode" 
builtins.bytes"builtins.bytes*%
obj
builtins.str"builtins.str*,
encoding
builtins.str"builtins.str **
errors
builtins.str"builtins.str 0:typing.overloadX"ª'
decode_codecs.decodeÉ
decode_codecs.decode" 
builtins.bytes"builtins.bytes*‡
obj÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*¢
encodingì
ÒTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]˚	
ÊUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"_codecs._BytesToBytesEncoding**
errors
builtins.str"builtins.str 0:typing.overloadX∑
decode_codecs.decode"
builtins.str"builtins.str*%
obj
builtins.str"builtins.str*ñ
encodingá
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"_codecs._StrToStrEncoding**
errors
builtins.str"builtins.str 0:typing.overloadXˆ
decode_codecs.decode"
builtins.str"builtins.str*%
obj
builtins.str"builtins.str*’
encoding∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str**
errors
builtins.str"builtins.str 0:typing.overloadX‹
decode_codecs.decode" 
builtins.bytes"builtins.bytes*%
obj
builtins.str"builtins.str*∑
encoding®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str**
errors
builtins.str"builtins.str 0:typing.overloadXà
decode_codecs.decode"
builtins.str"builtins.str*‡
obj÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*,
encoding
builtins.str"builtins.str **
errors
builtins.str"builtins.str 0:typing.overloadX*Ç
__annotations__codecs.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*e
__all__codecs.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*Z
BOM32_BEcodecs.BOM32_BE=
Literal[builtins.bytes]	 
builtins.bytes"builtins.bytes*Z
BOM32_LEcodecs.BOM32_LE=
Literal[builtins.bytes]	 
builtins.bytes"builtins.bytes*Z
BOM64_BEcodecs.BOM64_BE=
Literal[builtins.bytes]	 
builtins.bytes"builtins.bytes*Z
BOM64_LEcodecs.BOM64_LE=
Literal[builtins.bytes]	 
builtins.bytes"builtins.bytes*Ã
BOM
codecs.BOM∏
6Union[Literal[builtins.bytes],Literal[builtins.bytes]]=
Literal[builtins.bytes]	 
builtins.bytes"builtins.bytes=
Literal[builtins.bytes]	 
builtins.bytes"builtins.bytes*V
BOM_BEcodecs.BOM_BE=
Literal[builtins.bytes]	 
builtins.bytes"builtins.bytes*V
BOM_LEcodecs.BOM_LE=
Literal[builtins.bytes]	 
builtins.bytes"builtins.bytes*Z
BOM_UTF8codecs.BOM_UTF8=
Literal[builtins.bytes]	 
builtins.bytes"builtins.bytes*ÿ
	BOM_UTF16codecs.BOM_UTF16∏
6Union[Literal[builtins.bytes],Literal[builtins.bytes]]=
Literal[builtins.bytes]	 
builtins.bytes"builtins.bytes=
Literal[builtins.bytes]	 
builtins.bytes"builtins.bytes*b
BOM_UTF16_BEcodecs.BOM_UTF16_BE=
Literal[builtins.bytes]	 
builtins.bytes"builtins.bytes*b
BOM_UTF16_LEcodecs.BOM_UTF16_LE=
Literal[builtins.bytes]	 
builtins.bytes"builtins.bytes*ÿ
	BOM_UTF32codecs.BOM_UTF32∏
6Union[Literal[builtins.bytes],Literal[builtins.bytes]]=
Literal[builtins.bytes]	 
builtins.bytes"builtins.bytes=
Literal[builtins.bytes]	 
builtins.bytes"builtins.bytes*b
BOM_UTF32_BEcodecs.BOM_UTF32_BE=
Literal[builtins.bytes]	 
builtins.bytes"builtins.bytes*b
BOM_UTF32_LEcodecs.BOM_UTF32_LE=
Literal[builtins.bytes]	 
builtins.bytes"builtins.bytes