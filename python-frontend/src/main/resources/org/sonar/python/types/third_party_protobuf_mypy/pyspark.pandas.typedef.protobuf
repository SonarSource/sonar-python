
pyspark.pandas.typedefÂ
Iterabletyping.Iterable"builtins.object*∞
__iter__typing.Iterable.__iter__"w
typing.Iterator[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.Iterator*yw
typing.Iterable[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.Iterable0:abc.abstractmethod@8PX«
LooseVersiondistutils.version.LooseVersion"distutils.version.Version*ﬁ
__init__'distutils.version.LooseVersion.__init__"
None*J
self@
distutils.version.LooseVersion"distutils.version.LooseVersion*S
vstringD
Union[builtins.str,None]
builtins.str"builtins.str
None *˚
parse$distutils.version.LooseVersion.parse"â
#distutils.version.LooseVersion.Self@
distutils.version.LooseVersion"distutils.version.LooseVersion"distutils.version.LooseVersion*î
selfâ
#distutils.version.LooseVersion.Self@
distutils.version.LooseVersion"distutils.version.LooseVersion"distutils.version.LooseVersion*)
vstring
builtins.str"builtins.str*ì
__str__&distutils.version.LooseVersion.__str__"
builtins.str"builtins.str*B@
distutils.version.LooseVersion"distutils.version.LooseVersion*÷
_cmp#distutils.version.LooseVersion._cmp"
builtins.bool"builtins.bool*î
selfâ
#distutils.version.LooseVersion.Self@
distutils.version.LooseVersion"distutils.version.LooseVersion"distutils.version.LooseVersion*Ò
otherÂ
7Union[distutils.version.LooseVersion.Self,builtins.str]â
#distutils.version.LooseVersion.Self@
distutils.version.LooseVersion"distutils.version.LooseVersion"distutils.version.LooseVersion
builtins.str"builtins.strrÅ
component_re+distutils.version.LooseVersion.component_reD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.PatternrO
vstring&distutils.version.LooseVersion.vstring
builtins.str"builtins.strrÿ
version&distutils.version.LooseVersion.version§
0builtins.tuple[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.tupleÉ
CategoricalDtype*pandas.core.dtypes.dtypes.CategoricalDtype".pandas.core.dtypes.dtypes.PandasExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype*í
__init__3pandas.core.dtypes.dtypes.CategoricalDtype.__init__"
None*b
selfX
*pandas.core.dtypes.dtypes.CategoricalDtype"*pandas.core.dtypes.dtypes.CategoricalDtype*∆

categories≥
aUnion[pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],builtins.list[Any],None]D
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index,
builtins.list[Any]
Any"builtins.list
None *ô
orderedâ
$TypeAlias[Union[builtins.bool,None]]G
Union[builtins.bool,None]
builtins.bool"builtins.bool
None"pandas._typing.Ordered *é

categories5pandas.core.dtypes.dtypes.CategoricalDtype.categories"N
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index*b
selfX
*pandas.core.dtypes.dtypes.CategoricalDtype"*pandas.core.dtypes.dtypes.CategoricalDtype0:builtins.property`*ƒ
ordered2pandas.core.dtypes.dtypes.CategoricalDtype.ordered"â
$TypeAlias[Union[builtins.bool,None]]G
Union[builtins.bool,None]
builtins.bool"builtins.bool
None"pandas._typing.Ordered*b
selfX
*pandas.core.dtypes.dtypes.CategoricalDtype"*pandas.core.dtypes.dtypes.CategoricalDtype0:builtins.property`≠
ExtensionDtype&pandas.core.dtypes.base.ExtensionDtype"builtins.object*“
na_value/pandas.core.dtypes.base.ExtensionDtype.na_value""
builtins.object"builtins.object*Z
selfP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype0:builtins.property`*ô
kind+pandas.core.dtypes.base.ExtensionDtype.kind"
¯Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*Z
selfP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype0:builtins.property`*¨
names,pandas.core.dtypes.base.ExtensionDtype.names"Å
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None*Z
selfP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype0:builtins.property`* 
empty,pandas.core.dtypes.base.ExtensionDtype.empty"à
,Type[pandas.core.arrays.base.ExtensionArray]P
&pandas.core.arrays.base.ExtensionArray"&pandas.core.arrays.base.ExtensionArray"type*Z
selfP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype*´
size†
0Union[builtins.int,builtins.tuple[builtins.int]]
builtins.int"builtins.intL
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple*ç
construct_array_type;pandas.core.dtypes.base.ExtensionDtype.construct_array_type"à
,Type[pandas.core.arrays.base.ExtensionArray]P
&pandas.core.arrays.base.ExtensionArray"&pandas.core.arrays.base.ExtensionArray"type*í
clsà
,Type[pandas.core.dtypes.base.ExtensionDtype]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"type0:builtins.classmethodp*Ä
construct_from_string<pandas.core.dtypes.base.ExtensionDtype.construct_from_string"P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype*í
clsà
,Type[pandas.core.dtypes.base.ExtensionDtype]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"type*(
string
builtins.str"builtins.str0:builtins.classmethodp*π
is_dtype/pandas.core.dtypes.base.ExtensionDtype.is_dtype"
builtins.bool"builtins.bool*í
clsà
,Type[pandas.core.dtypes.base.ExtensionDtype]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"type*-
dtype"
builtins.object"builtins.object0:builtins.classmethodprS
type+pandas.core.dtypes.base.ExtensionDtype.type
builtins.type"builtins.typerQ
name+pandas.core.dtypes.base.ExtensionDtype.name
builtins.str"builtins.str[
	Int8Dtype$pandas.core.arrays.integer.Int8Dtype"(pandas.core.arrays.integer._IntegerDtype]

Int16Dtype%pandas.core.arrays.integer.Int16Dtype"(pandas.core.arrays.integer._IntegerDtype]

Int32Dtype%pandas.core.arrays.integer.Int32Dtype"(pandas.core.arrays.integer._IntegerDtype]

Int64Dtype%pandas.core.arrays.integer.Int64Dtype"(pandas.core.arrays.integer._IntegerDtype
BooleanDtype'pandas.core.arrays.boolean.BooleanDtype"&pandas.core.dtypes.base.ExtensionDtype*î
construct_array_type<pandas.core.arrays.boolean.BooleanDtype.construct_array_type"ã
-Type[pandas.core.arrays.boolean.BooleanArray]R
'pandas.core.arrays.boolean.BooleanArray"'pandas.core.arrays.boolean.BooleanArray"type*ï
clsã
-Type[pandas.core.arrays.boolean.BooleanDtype]R
'pandas.core.arrays.boolean.BooleanDtype"'pandas.core.arrays.boolean.BooleanDtype"type0:builtins.classmethodprx
na_value0pandas.core.arrays.boolean.BooleanDtype.na_value:
pandas._libs.missing.NAType"pandas._libs.missing.NAType∏
StringDtype&pandas.core.arrays.string_.StringDtype"&pandas.core.dtypes.base.ExtensionDtype*Î
__init__/pandas.core.arrays.string_.StringDtype.__init__"
None*Z
selfP
&pandas.core.arrays.string_.StringDtype"&pandas.core.arrays.string_.StringDtype*«
storage∑
7Union[Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *Í
na_value/pandas.core.arrays.string_.StringDtype.na_value":
pandas._libs.missing.NAType"pandas._libs.missing.NAType*Z
selfP
&pandas.core.arrays.string_.StringDtype"&pandas.core.arrays.string_.StringDtype0:builtins.property`a
Float32Dtype(pandas.core.arrays.floating.Float32Dtype"'pandas.core.arrays.numeric.NumericDtypea
Float64Dtype(pandas.core.arrays.floating.Float64Dtype"'pandas.core.arrays.numeric.NumericDtypeÂ+
InternalField%pyspark.pandas.internal.InternalField"builtins.object*Á
__init__.pyspark.pandas.internal.InternalField.__init__"
None*X
selfN
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField*∏
dtype¨
ITypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]æ
>Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype](
numpy.dtype[Any]
Any"numpy.dtypeP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"pyspark.pandas._typing.Dtype*ã
struct_fieldw
)Union[pyspark.sql.types.StructField,None]>
pyspark.sql.types.StructField"pyspark.sql.types.StructField
None *≈
from_struct_field7pyspark.pandas.internal.InternalField.from_struct_field"N
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField*P
struct_field>
pyspark.sql.types.StructField"pyspark.sql.types.StructField*:
use_extension_dtypes
builtins.bool"builtins.bool 0:builtins.staticmethodh*‘
dtype+pyspark.pandas.internal.InternalField.dtype"¨
ITypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]æ
>Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype](
numpy.dtype[Any]
Any"numpy.dtypeP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"pyspark.pandas._typing.Dtype*X
selfN
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField0:builtins.property`*¨
struct_field2pyspark.pandas.internal.InternalField.struct_field"w
)Union[pyspark.sql.types.StructField,None]>
pyspark.sql.types.StructField"pyspark.sql.types.StructField
None*X
selfN
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField0:builtins.property`*¡
name*pyspark.pandas.internal.InternalField.name"
builtins.str"builtins.str*X
selfN
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField0:builtins.property`*È

spark_type0pyspark.pandas.internal.InternalField.spark_type"8
pyspark.sql.types.DataType"pyspark.sql.types.DataType*X
selfN
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField0:builtins.property`*À
nullable.pyspark.pandas.internal.InternalField.nullable"
builtins.bool"builtins.bool*X
selfN
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField0:builtins.property`*Ñ
metadata.pyspark.pandas.internal.InternalField.metadata"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*X
selfN
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField0:builtins.property`*ﬂ
is_extension_dtype8pyspark.pandas.internal.InternalField.is_extension_dtype"
builtins.bool"builtins.bool*X
selfN
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField0:builtins.property`*¸
normalize_spark_type:pyspark.pandas.internal.InternalField.normalize_spark_type"N
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField*X
selfN
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField*Ú
copy*pyspark.pandas.internal.InternalField.copy"N
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField*X
selfN
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField*†
nameì
1Union[builtins.str,pyspark._globals._NoValueType]
builtins.str"builtins.str>
pyspark._globals._NoValueType"pyspark._globals._NoValueType *Ô
dtype·
nUnion[TypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]],pyspark._globals._NoValueType]¨
ITypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]æ
>Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype](
numpy.dtype[Any]
Any"numpy.dtypeP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"pyspark.pandas._typing.Dtype>
pyspark._globals._NoValueType"pyspark._globals._NoValueType *–

spark_typeΩ
?Union[pyspark.sql.types.DataType,pyspark._globals._NoValueType]8
pyspark.sql.types.DataType"pyspark.sql.types.DataType>
pyspark._globals._NoValueType"pyspark._globals._NoValueType *ß
nullableñ
2Union[builtins.bool,pyspark._globals._NoValueType]
builtins.bool"builtins.bool>
pyspark._globals._NoValueType"pyspark._globals._NoValueType *Å
metadata
IUnion[builtins.dict[builtins.str,Any],None,pyspark._globals._NoValueType]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None>
pyspark._globals._NoValueType"pyspark._globals._NoValueType *≥
__eq__,pyspark.pandas.internal.InternalField.__eq__"
builtins.bool"builtins.bool*PN
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField*	
Any*™
__repr__.pyspark.pandas.internal.InternalField.__repr__"
builtins.str"builtins.str*PN
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalFieldrÂ
_dtype,pyspark.pandas.internal.InternalField._dtype¨
ITypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]æ
>Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype](
numpy.dtype[Any]
Any"numpy.dtypeP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"pyspark.pandas._typing.DtyperΩ
_struct_field3pyspark.pandas.internal.InternalField._struct_fieldw
)Union[pyspark.sql.types.StructField,None]>
pyspark.sql.types.StructField"pyspark.sql.types.StructField
Noneç

SeriesType+pyspark.pandas.typedef.typehints.SeriesType"builtins.object*§
__init__4pyspark.pandas.typedef.typehints.SeriesType.__init__"
None*“
self«
Epyspark.pandas.typedef.typehints.SeriesType[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"+pyspark.pandas.typedef.typehints.SeriesType*∏
dtype¨
ITypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]æ
>Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype](
numpy.dtype[Any]
Any"numpy.dtypeP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"pyspark.pandas._typing.Dtype*H

spark_type8
pyspark.sql.types.DataType"pyspark.sql.types.DataType*´
__repr__4pyspark.pandas.typedef.typehints.SeriesType.__repr__"
builtins.str"builtins.str* «
Epyspark.pandas.typedef.typehints.SeriesType[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"+pyspark.pandas.typedef.typehints.SeriesTypePrÈ
dtype1pyspark.pandas.typedef.typehints.SeriesType.dtype¨
ITypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]æ
>Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype](
numpy.dtype[Any]
Any"numpy.dtypeP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"pyspark.pandas._typing.Dtyper~

spark_type6pyspark.pandas.typedef.typehints.SeriesType.spark_type8
pyspark.sql.types.DataType"pyspark.sql.types.DataType∏
DataFrameType.pyspark.pandas.typedef.typehints.DataFrameType"builtins.object*é
__init__7pyspark.pandas.typedef.typehints.DataFrameType.__init__"
None*j
self`
.pyspark.pandas.typedef.typehints.DataFrameType".pyspark.pandas.typedef.typehints.DataFrameType*®
index_fieldsï
4builtins.list[pyspark.pandas.internal.InternalField]N
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField"builtins.list*ß
data_fieldsï
4builtins.list[pyspark.pandas.internal.InternalField]N
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField"builtins.list*›
dtypes5pyspark.pandas.typedef.typehints.DataFrameType.dtypes"ò
Xbuiltins.list[TypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]]¨
ITypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]æ
>Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype](
numpy.dtype[Any]
Any"numpy.dtypeP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"pyspark.pandas._typing.Dtype"builtins.list*j
self`
.pyspark.pandas.typedef.typehints.DataFrameType".pyspark.pandas.typedef.typehints.DataFrameType0:builtins.property`*à

spark_type9pyspark.pandas.typedef.typehints.DataFrameType.spark_type"<
pyspark.sql.types.StructType"pyspark.sql.types.StructType*j
self`
.pyspark.pandas.typedef.typehints.DataFrameType".pyspark.pandas.typedef.typehints.DataFrameType0:builtins.property`*≈
__repr__7pyspark.pandas.typedef.typehints.DataFrameType.__repr__"
builtins.str"builtins.str*b`
.pyspark.pandas.typedef.typehints.DataFrameType".pyspark.pandas.typedef.typehints.DataFrameTyper„
index_fields;pyspark.pandas.typedef.typehints.DataFrameType.index_fieldsï
4builtins.list[pyspark.pandas.internal.InternalField]N
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField"builtins.listr·
data_fields:pyspark.pandas.typedef.typehints.DataFrameType.data_fieldsï
4builtins.list[pyspark.pandas.internal.InternalField]N
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField"builtins.listr◊
fields5pyspark.pandas.typedef.typehints.DataFrameType.fieldsï
4builtins.list[pyspark.pandas.internal.InternalField]N
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField"builtins.list≠


ScalarType+pyspark.pandas.typedef.typehints.ScalarType"builtins.object*µ
__init__4pyspark.pandas.typedef.typehints.ScalarType.__init__"
None*d
selfZ
+pyspark.pandas.typedef.typehints.ScalarType"+pyspark.pandas.typedef.typehints.ScalarType*∏
dtype¨
ITypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]æ
>Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype](
numpy.dtype[Any]
Any"numpy.dtypeP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"pyspark.pandas._typing.Dtype*H

spark_type8
pyspark.sql.types.DataType"pyspark.sql.types.DataType*º
__repr__4pyspark.pandas.typedef.typehints.ScalarType.__repr__"
builtins.str"builtins.str*\Z
+pyspark.pandas.typedef.typehints.ScalarType"+pyspark.pandas.typedef.typehints.ScalarTyperÈ
dtype1pyspark.pandas.typedef.typehints.ScalarType.dtype¨
ITypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]æ
>Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype](
numpy.dtype[Any]
Any"numpy.dtypeP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"pyspark.pandas._typing.Dtyper~

spark_type6pyspark.pandas.typedef.typehints.ScalarType.spark_type8
pyspark.sql.types.DataType"pyspark.sql.types.DataTypeò
UnknownType,pyspark.pandas.typedef.typehints.UnknownType"builtins.object*≈
__init__5pyspark.pandas.typedef.typehints.UnknownType.__init__"
None*f
self\
,pyspark.pandas.typedef.typehints.UnknownType",pyspark.pandas.typedef.typehints.UnknownType*
tpe
Any*ø
__repr__5pyspark.pandas.typedef.typehints.UnknownType.__repr__"
builtins.str"builtins.str*^\
,pyspark.pandas.typedef.typehints.UnknownType",pyspark.pandas.typedef.typehints.UnknownTyper@
tpe0pyspark.pandas.typedef.typehints.UnknownType.tpe
Any·
IndexNameTypeHolder4pyspark.pandas.typedef.typehints.IndexNameTypeHolder"builtins.objectrK
name9pyspark.pandas.typedef.typehints.IndexNameTypeHolder.name
NonerI
tpe8pyspark.pandas.typedef.typehints.IndexNameTypeHolder.tpe
Nonerk

short_name?pyspark.pandas.typedef.typehints.IndexNameTypeHolder.short_name
builtins.str"builtins.str»
NameTypeHolder/pyspark.pandas.typedef.typehints.NameTypeHolder"builtins.objectrF
name4pyspark.pandas.typedef.typehints.NameTypeHolder.name
NonerD
tpe3pyspark.pandas.typedef.typehints.NameTypeHolder.tpe
Nonerf

short_name:pyspark.pandas.typedef.typehints.NameTypeHolder.short_name
builtins.str"builtins.strj
isclassinspect.isclass"
builtins.bool"builtins.bool*.
object"
builtins.object"builtins.objectã
get_type_hintstyping.get_type_hints"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Ω
obj≥
ﬂTypeAlias[Union[builtins.object,CallableType[builtins.function],types.FunctionType,types.BuiltinFunctionType,types.MethodType,types.ModuleType,types.WrapperDescriptorType,types.MethodWrapperType,types.MethodDescriptorType]]¢
‘Union[builtins.object,CallableType[builtins.function],types.FunctionType,types.BuiltinFunctionType,types.MethodType,types.ModuleType,types.WrapperDescriptorType,types.MethodWrapperType,types.MethodDescriptorType]"
builtins.object"builtins.objectK
CallableType[builtins.function]&
builtins.function"builtins.function(
types.FunctionType"types.FunctionType6
types.BuiltinFunctionType"types.BuiltinFunctionType$
types.MethodType"types.MethodType$
types.ModuleType"types.ModuleType:
types.WrapperDescriptorType"types.WrapperDescriptorType2
types.MethodWrapperType"types.MethodWrapperType8
types.MethodDescriptorType"types.MethodDescriptorType"(typing._get_type_hints_obj_allowed_types*£
globalnsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *¢
localnsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None ƒ
pandas_dtype&pandas.core.dtypes.common.pandas_dtype"‹
STypeAlias[Union[numpy.dtype[numpy.generic],pandas.core.dtypes.base.ExtensionDtype]]È
HUnion[numpy.dtype[numpy.generic],pandas.core.dtypes.base.ExtensionDtype]I
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtypeP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"pandas._typing.DtypeObj*-
dtype"
builtins.object"builtins.objectÇ
to_arrow_type&pyspark.sql.pandas.types.to_arrow_type"
Any*@
dt8
pyspark.sql.types.DataType"pyspark.sql.types.DataType¬
from_arrow_type(pyspark.sql.pandas.types.from_arrow_type"8
pyspark.sql.types.DataType"pyspark.sql.types.DataType*
at
Any*:
prefer_timestamp_ntz
builtins.bool"builtins.bool —
as_spark_type.pyspark.pandas.typedef.typehints.as_spark_type"8
pyspark.sql.types.DataType"pyspark.sql.types.DataType*Ê
tpe‹
kUnion[builtins.str,builtins.type,TypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]]
builtins.str"builtins.str
builtins.type"builtins.type¨
ITypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]æ
>Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype](
numpy.dtype[Any]
Any"numpy.dtypeP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"pyspark.pandas._typing.Dtype*1
raise_error
builtins.bool"builtins.bool *:
prefer_timestamp_ntz
builtins.bool"builtins.bool é
spark_type_to_pandas_dtype;pyspark.pandas.typedef.typehints.spark_type_to_pandas_dtype"¨
ITypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]æ
>Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype](
numpy.dtype[Any]
Any"numpy.dtypeP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"pyspark.pandas._typing.Dtype*H

spark_type8
pyspark.sql.types.DataType"pyspark.sql.types.DataType*:
use_extension_dtypes
builtins.bool"builtins.bool ë
pandas_on_spark_type5pyspark.pandas.typedef.typehints.pandas_on_spark_type"ÿ
kTuple[TypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]],pyspark.sql.types.DataType]¨
ITypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]æ
>Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype](
numpy.dtype[Any]
Any"numpy.dtypeP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"pyspark.pandas._typing.Dtype8
pyspark.sql.types.DataType"pyspark.sql.types.DataType*Ê
tpe‹
kUnion[builtins.str,builtins.type,TypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]]
builtins.str"builtins.str
builtins.type"builtins.type¨
ITypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]æ
>Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype](
numpy.dtype[Any]
Any"numpy.dtypeP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"pyspark.pandas._typing.Dtype⁄
infer_pd_series_spark_type;pyspark.pandas.typedef.typehints.infer_pd_series_spark_type"8
pyspark.sql.types.DataType"pyspark.sql.types.DataType*N
pserD
pandas.core.series.Series[Any]
Any"pandas.core.series.Series*∏
dtype¨
ITypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]æ
>Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype](
numpy.dtype[Any]
Any"numpy.dtypeP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"pyspark.pandas._typing.Dtype*:
prefer_timestamp_ntz
builtins.bool"builtins.bool Ë
infer_return_type2pyspark.pandas.typedef.typehints.infer_return_type" 
øUnion[pyspark.pandas.typedef.typehints.SeriesType[Any],pyspark.pandas.typedef.typehints.DataFrameType,pyspark.pandas.typedef.typehints.ScalarType,pyspark.pandas.typedef.typehints.UnknownType]h
0pyspark.pandas.typedef.typehints.SeriesType[Any]
Any"+pyspark.pandas.typedef.typehints.SeriesType`
.pyspark.pandas.typedef.typehints.DataFrameType".pyspark.pandas.typedef.typehints.DataFrameTypeZ
+pyspark.pandas.typedef.typehints.ScalarType"+pyspark.pandas.typedef.typehints.ScalarType\
,pyspark.pandas.typedef.typehints.UnknownType",pyspark.pandas.typedef.typehints.UnknownType*R
fK
CallableType[builtins.function]&
builtins.function"builtins.functionú
create_type_for_series_type<pyspark.pandas.typedef.typehints.create_type_for_series_type"™
6Type[pyspark.pandas.typedef.typehints.SeriesType[Any]]h
0pyspark.pandas.typedef.typehints.SeriesType[Any]
Any"+pyspark.pandas.typedef.typehints.SeriesType"type*
param
Anyî
create_tuple_for_frame_type<pyspark.pandas.typedef.typehints.create_tuple_for_frame_type""
builtins.object"builtins.object*
params
Any*w
__path__pyspark.pandas.typedef.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*í
__annotations__&pyspark.pandas.typedef.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
datetimedatetime *
decimaldecimal *
syssys *
typingtyping *5
Any
typing.Any"
builtins.object"builtins.object*G
Callabletyping.Callable*
typing._SpecialForm"typing._SpecialForm*E
Generictyping.Generic*
typing._SpecialForm"typing._SpecialForm*A
Tupletyping.Tuple*
typing._SpecialForm"typing._SpecialForm*A
Uniontyping.Union*
typing._SpecialForm"typing._SpecialForm*?
Typetyping.Type*
typing._SpecialForm"typing._SpecialForm*
npnumpy *
pdpandas *ñ
extension_dtypes1pyspark.pandas.typedef.typehints.extension_dtypesO
builtins.tuple[builtins.type]
builtins.type"builtins.type"builtins.tuple*y
extension_dtypes_available;pyspark.pandas.typedef.typehints.extension_dtypes_available
builtins.bool"builtins.bool*á
!extension_object_dtypes_availableBpyspark.pandas.typedef.typehints.extension_object_dtypes_available
builtins.bool"builtins.bool*Ö
 extension_float_dtypes_availableApyspark.pandas.typedef.typehints.extension_float_dtypes_available
builtins.bool"builtins.bool*2
pa#pyspark.pandas.typedef.typehints.pa
Any*
typespyspark.sql.types *
pspyspark.pandas 