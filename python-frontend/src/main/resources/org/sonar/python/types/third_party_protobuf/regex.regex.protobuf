
regex.regexﬂ
errorregex._regex_core.error"builtins.Exception*å
__init__ regex._regex_core.error.__init__"
None*<
self2
regex._regex_core.error"regex._regex_core.error*)
message
builtins.str"builtins.str*~
patterno
Union[typing.AnyStr,None]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object
None *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None z38z39z310z311z312z313j38j39j310j311j312j313™
	RegexFlagregex._regex_core.RegexFlag"enum.IntFlagHj38j39j310j311j312j313r\
Aregex._regex_core.RegexFlag.A
builtins.int"builtins.int*38*39*310*311*312*313rd
ASCII!regex._regex_core.RegexFlag.ASCII
builtins.int"builtins.int*38*39*310*311*312*313r\
Bregex._regex_core.RegexFlag.B
builtins.int"builtins.int*38*39*310*311*312*313rl
	BESTMATCH%regex._regex_core.RegexFlag.BESTMATCH
builtins.int"builtins.int*38*39*310*311*312*313r\
Dregex._regex_core.RegexFlag.D
builtins.int"builtins.int*38*39*310*311*312*313rd
DEBUG!regex._regex_core.RegexFlag.DEBUG
builtins.int"builtins.int*38*39*310*311*312*313r\
Eregex._regex_core.RegexFlag.E
builtins.int"builtins.int*38*39*310*311*312*313rr
ENHANCEMATCH(regex._regex_core.RegexFlag.ENHANCEMATCH
builtins.int"builtins.int*38*39*310*311*312*313r\
Fregex._regex_core.RegexFlag.F
builtins.int"builtins.int*38*39*310*311*312*313rj
FULLCASE$regex._regex_core.RegexFlag.FULLCASE
builtins.int"builtins.int*38*39*310*311*312*313r\
Iregex._regex_core.RegexFlag.I
builtins.int"builtins.int*38*39*310*311*312*313rn

IGNORECASE&regex._regex_core.RegexFlag.IGNORECASE
builtins.int"builtins.int*38*39*310*311*312*313r\
Lregex._regex_core.RegexFlag.L
builtins.int"builtins.int*38*39*310*311*312*313rf
LOCALE"regex._regex_core.RegexFlag.LOCALE
builtins.int"builtins.int*38*39*310*311*312*313r\
Mregex._regex_core.RegexFlag.M
builtins.int"builtins.int*38*39*310*311*312*313rl
	MULTILINE%regex._regex_core.RegexFlag.MULTILINE
builtins.int"builtins.int*38*39*310*311*312*313r\
Pregex._regex_core.RegexFlag.P
builtins.int"builtins.int*38*39*310*311*312*313rd
POSIX!regex._regex_core.RegexFlag.POSIX
builtins.int"builtins.int*38*39*310*311*312*313r\
Rregex._regex_core.RegexFlag.R
builtins.int"builtins.int*38*39*310*311*312*313rh
REVERSE#regex._regex_core.RegexFlag.REVERSE
builtins.int"builtins.int*38*39*310*311*312*313r\
Tregex._regex_core.RegexFlag.T
builtins.int"builtins.int*38*39*310*311*312*313rj
TEMPLATE$regex._regex_core.RegexFlag.TEMPLATE
builtins.int"builtins.int*38*39*310*311*312*313r\
Sregex._regex_core.RegexFlag.S
builtins.int"builtins.int*38*39*310*311*312*313rf
DOTALL"regex._regex_core.RegexFlag.DOTALL
builtins.int"builtins.int*38*39*310*311*312*313r\
Uregex._regex_core.RegexFlag.U
builtins.int"builtins.int*38*39*310*311*312*313rh
UNICODE#regex._regex_core.RegexFlag.UNICODE
builtins.int"builtins.int*38*39*310*311*312*313r^
V0regex._regex_core.RegexFlag.V0
builtins.int"builtins.int*38*39*310*311*312*313rj
VERSION0$regex._regex_core.RegexFlag.VERSION0
builtins.int"builtins.int*38*39*310*311*312*313r^
V1regex._regex_core.RegexFlag.V1
builtins.int"builtins.int*38*39*310*311*312*313rj
VERSION1$regex._regex_core.RegexFlag.VERSION1
builtins.int"builtins.int*38*39*310*311*312*313r\
Wregex._regex_core.RegexFlag.W
builtins.int"builtins.int*38*39*310*311*312*313rb
WORD regex._regex_core.RegexFlag.WORD
builtins.int"builtins.int*38*39*310*311*312*313r\
Xregex._regex_core.RegexFlag.X
builtins.int"builtins.int*38*39*310*311*312*313rh
VERBOSE#regex._regex_core.RegexFlag.VERBOSE
builtins.int"builtins.int*38*39*310*311*312*313†
Scannerregex._regex_core.Scanner"builtins.object*¿
__init__"regex._regex_core.Scanner.__init__"
None*ò
selfç
(regex._regex_core.Scanner[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex._regex_core.Scanner*£
lexiconï
NTypeAlias[builtins.list[Tuple[typing.AnyStr,CallableType[builtins.function]]]]§
Cbuiltins.list[Tuple[typing.AnyStr,CallableType[builtins.function]]]Õ
4Tuple[typing.AnyStr,CallableType[builtins.function]]F
typing.AnyStr"
builtins.object"builtins.object"builtins.objectK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.list"regex._regex_core._Lexicon*)
flags
builtins.int"builtins.int z38z39z310z311z312z313*’
scanregex._regex_core.Scanner.scan"°
'Tuple[builtins.list[Any],typing.AnyStr],
builtins.list[Any]
Any"builtins.listF
typing.AnyStr"
builtins.object"builtins.object"builtins.object*ò
selfç
(regex._regex_core.Scanner[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex._regex_core.Scanner*R
stringF
typing.AnyStr"
builtins.object"builtins.object"builtins.objectz38z39z310z311z312z313Pj38j39j310j311j312j313r‡
lexicon!regex._regex_core.Scanner.lexiconï
NTypeAlias[builtins.list[Tuple[typing.AnyStr,CallableType[builtins.function]]]]§
Cbuiltins.list[Tuple[typing.AnyStr,CallableType[builtins.function]]]Õ
4Tuple[typing.AnyStr,CallableType[builtins.function]]F
typing.AnyStr"
builtins.object"builtins.object"builtins.objectK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.list"regex._regex_core._Lexicon*38*39*310*311*312*313rÃ
scanner!regex._regex_core.Scanner.scannerÅ
"regex.regex.Pattern[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Pattern*38*39*310*311*312*313≈Ä
Patternregex.regex.Pattern"builtins.object*Ç
flagsregex.regex.Pattern.flags"
builtins.int"builtins.int*å
selfÅ
"regex.regex.Pattern[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Pattern0:builtins.property`z38z39z310z311z312z313*Á

groupindexregex.regex.Pattern.groupindex"w
)typing.Mapping[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"typing.Mapping*å
selfÅ
"regex.regex.Pattern[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Pattern0:builtins.property`z38z39z310z311z312z313*Ñ
groupsregex.regex.Pattern.groups"
builtins.int"builtins.int*å
selfÅ
"regex.regex.Pattern[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Pattern0:builtins.property`z38z39z310z311z312z313*∞
patternregex.regex.Pattern.pattern"F
typing.AnyStr"
builtins.object"builtins.object"builtins.object*å
selfÅ
"regex.regex.Pattern[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Pattern0:builtins.property`z38z39z310z311z312z313*‚
named_listsregex.regex.Pattern.named_lists"Ô
>typing.Mapping[builtins.str,builtins.frozenset[typing.AnyStr]]
builtins.str"builtins.str
!builtins.frozenset[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"builtins.frozenset"typing.Mapping*å
selfÅ
"regex.regex.Pattern[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Pattern0:builtins.property`z38z39z310z311z312z313*ã
__copy__regex.regex.Pattern.__copy__"Å
"regex.regex.Pattern[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Pattern*¿
selfµ
regex.regex.Pattern.SelfÅ
"regex.regex.Pattern[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Pattern"regex.regex.Patternz38z39z310z311z312z313*ì
__deepcopy__ regex.regex.Pattern.__deepcopy__"Å
"regex.regex.Pattern[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Pattern*¿
selfµ
regex.regex.Pattern.SelfÅ
"regex.regex.Pattern[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Pattern"regex.regex.Patternz38z39z310z311z312z313*‘
__class_getitem__%regex.regex.Pattern.__class_getitem__"(
types.GenericAlias"types.GenericAlias*¿
cls∂
(Type[regex.regex.Pattern[typing.AnyStr]]Å
"regex.regex.Pattern[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Pattern"type*
item
Anypz39z310z311z312z3132–
searchregex.regex.Pattern.search‡
searchregex.regex.Pattern.search"ç
+Union[regex.regex.Match[builtins.str],None]R
regex.regex.Match[builtins.str]
builtins.str"builtins.str"regex.regex.Match
None*`
selfV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*(
string
builtins.str"builtins.str*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX™
searchregex.regex.Pattern.search"ï
-Union[regex.regex.Match[builtins.bytes],None]X
!regex.regex.Match[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Match
None*f
self\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX"38"39"310"311"312"3132 
matchregex.regex.Pattern.matchﬁ
matchregex.regex.Pattern.match"ç
+Union[regex.regex.Match[builtins.str],None]R
regex.regex.Match[builtins.str]
builtins.str"builtins.str"regex.regex.Match
None*`
selfV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*(
string
builtins.str"builtins.str*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX®
matchregex.regex.Pattern.match"ï
-Union[regex.regex.Match[builtins.bytes],None]X
!regex.regex.Match[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Match
None*f
self\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX"38"39"310"311"312"3132‚
	fullmatchregex.regex.Pattern.fullmatchÊ
	fullmatchregex.regex.Pattern.fullmatch"ç
+Union[regex.regex.Match[builtins.str],None]R
regex.regex.Match[builtins.str]
builtins.str"builtins.str"regex.regex.Match
None*`
selfV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*(
string
builtins.str"builtins.str*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX∞
	fullmatchregex.regex.Pattern.fullmatch"ï
-Union[regex.regex.Match[builtins.bytes],None]X
!regex.regex.Match[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Match
None*f
self\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX"38"39"310"311"312"3132◊
splitregex.regex.Pattern.split§
splitregex.regex.Pattern.split"{
&builtins.list[Union[builtins.str,Any]]B
Union[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.list*`
selfV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*(
string
builtins.str"builtins.str*,
maxsplit
builtins.int"builtins.int *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadXÔ

splitregex.regex.Pattern.split"É
(builtins.list[Union[builtins.bytes,Any]]H
Union[builtins.bytes,Any] 
builtins.bytes"builtins.bytes
Any"builtins.list*f
self\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*,
maxsplit
builtins.int"builtins.int *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX"38"39"310"311"312"3132˛
	splititerregex.regex.Pattern.splititer∏
	splititerregex.regex.Pattern.splititer"
Any*`
selfV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*(
string
builtins.str"builtins.str*,
maxsplit
builtins.int"builtins.int *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX˙	
	splititerregex.regex.Pattern.splititer"
Any*f
self\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*,
maxsplit
builtins.int"builtins.int *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX"38"39"310"311"312"3132Ó
findallregex.regex.Pattern.findall≤
findallregex.regex.Pattern.findall",
builtins.list[Any]
Any"builtins.list*`
selfV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*(
string
builtins.str"builtins.str*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int *0

overlapped
builtins.bool"builtins.bool *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadXÙ

findallregex.regex.Pattern.findall",
builtins.list[Any]
Any"builtins.list*f
self\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int *0

overlapped
builtins.bool"builtins.bool *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX"38"39"310"311"312"3132™
finditerregex.regex.Pattern.finditerè
finditerregex.regex.Pattern.finditer"
Any*`
selfV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*(
string
builtins.str"builtins.str*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int *0

overlapped
builtins.bool"builtins.bool *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX—

finditerregex.regex.Pattern.finditer"
Any*f
self\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int *0

overlapped
builtins.bool"builtins.bool *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX"38"39"310"311"312"3132»
subregex.regex.Pattern.subæ
subregex.regex.Pattern.sub"
builtins.str"builtins.str*`
selfV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*≠
repl¢
3Union[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function*(
string
builtins.str"builtins.str*)
count
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX 
subregex.regex.Pattern.sub" 
builtins.bytes"builtins.bytes*f
self\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*Û
replË
ΩUnion[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],CallableType[builtins.function]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBufferK
CallableType[builtins.function]&
builtins.function"builtins.function*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*)
count
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX"38"39"310"311"312"3132“
subfregex.regex.Pattern.subf¬
subfregex.regex.Pattern.subf"
builtins.str"builtins.str*`
selfV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*Ø
format¢
3Union[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function*(
string
builtins.str"builtins.str*)
count
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadXŒ
subfregex.regex.Pattern.subf" 
builtins.bytes"builtins.bytes*f
self\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*ı
formatË
ΩUnion[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],CallableType[builtins.function]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBufferK
CallableType[builtins.function]&
builtins.function"builtins.function*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*)
count
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX"38"39"310"311"312"3132ÿ
subnregex.regex.Pattern.subnÑ
subnregex.regex.Pattern.subn"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*`
selfV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*≠
repl¢
3Union[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function*(
string
builtins.str"builtins.str*)
count
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadXí
subnregex.regex.Pattern.subn"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*f
self\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*Û
replË
ΩUnion[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],CallableType[builtins.function]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBufferK
CallableType[builtins.function]&
builtins.function"builtins.function*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*)
count
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX"38"39"310"311"312"3132‚
subfnregex.regex.Pattern.subfnà
subfnregex.regex.Pattern.subfn"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*`
selfV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*Ø
format¢
3Union[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function*(
string
builtins.str"builtins.str*)
count
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadXñ
subfnregex.regex.Pattern.subfn"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*f
self\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*ı
formatË
ΩUnion[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],CallableType[builtins.function]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBufferK
CallableType[builtins.function]&
builtins.function"builtins.function*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*)
count
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX"38"39"310"311"312"3132å

scannerregex.regex.Pattern.scanner›
scannerregex.regex.Pattern.scanner"
Any*`
selfV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*(
string
builtins.str"builtins.str*O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *0

overlapped
builtins.bool"builtins.bool *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadXÁ
scannerregex.regex.Pattern.scanner"
Any*f
self\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*,
string 
builtins.bytes"builtins.bytes*O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *0

overlapped
builtins.bool"builtins.bool *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:typing.overloadX"38"39"310"311"312"3138Pj38j39j310j311j312j313ﬁí
Matchregex.regex.Match"builtins.object*˜
posregex.regex.Match.pos"
builtins.int"builtins.int*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match0:builtins.property`z38z39z310z311z312z313*˝
endposregex.regex.Match.endpos"
builtins.int"builtins.int*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match0:builtins.property`z38z39z310z311z312z313*´
	lastindexregex.regex.Match.lastindex"D
Union[builtins.int,None]
builtins.int"builtins.int
None*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match0:builtins.property`z38z39z310z311z312z313*´
	lastgroupregex.regex.Match.lastgroup"D
Union[builtins.str,None]
builtins.str"builtins.str
None*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match0:builtins.property`z38z39z310z311z312z313*ß
stringregex.regex.Match.string"F
typing.AnyStr"
builtins.object"builtins.object"builtins.object*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match0:builtins.property`z38z39z310z311z312z313*€
reregex.regex.Match.re"Å
"regex.regex.Pattern[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Pattern*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match0:builtins.property`z38z39z310z311z312z313*Å
partialregex.regex.Match.partial"
builtins.bool"builtins.bool*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match0:builtins.property`z38z39z310z311z312z313*Ç
regsregex.regex.Match.regs"§
0builtins.tuple[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.tuple*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match0:builtins.property`z38z39z310z311z312z313*˘
fuzzy_countsregex.regex.Match.fuzzy_counts"ã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match0:builtins.property`z38z39z310z311z312z313*≤
fuzzy_changesregex.regex.Match.fuzzy_changes"¬
ZTuple[builtins.list[builtins.int],builtins.list[builtins.int],builtins.list[builtins.int]]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match0:builtins.property`z38z39z310z311z312z313*Ê
expandregex.regex.Match.expand"F
typing.AnyStr"
builtins.object"builtins.object"builtins.object*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*T
templateF
typing.AnyStr"
builtins.object"builtins.object"builtins.objectz38z39z310z311z312z313*Ê
expandfregex.regex.Match.expandf"F
typing.AnyStr"
builtins.object"builtins.object"builtins.object*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*R
formatF
typing.AnyStr"
builtins.object"builtins.object"builtins.objectz38z39z310z311z312z313*µ
capturesdictregex.regex.Match.capturesdict"ﬁ
8builtins.dict[builtins.str,builtins.list[typing.AnyStr]]
builtins.str"builtins.stru
builtins.list[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"builtins.list"builtins.dict*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Matchz38z39z310z311z312z313*‡
detach_stringregex.regex.Match.detach_string"
None*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Matchz38z39z310z311z312z313*Û
allcapturesregex.regex.Match.allcaptures"û
#Tuple[builtins.list[typing.AnyStr]]u
builtins.list[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"builtins.list*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Matchz38z39z310z311z312z313*Æ
allspansregex.regex.Match.allspans"ﬂ
6Tuple[builtins.list[Tuple[builtins.int,builtins.int]]]¢
/builtins.list[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.list*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Matchz38z39z310z311z312z313*˚
__copy__regex.regex.Match.__copy__"}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*∑
self¨
regex.regex.Match.Self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match"regex.regex.Matchz38z39z310z311z312z313*É
__deepcopy__regex.regex.Match.__deepcopy__"}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*∑
self¨
regex.regex.Match.Self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match"regex.regex.Matchz38z39z310z311z312z313*À
__class_getitem__#regex.regex.Match.__class_getitem__"(
types.GenericAlias"types.GenericAlias*π
clsØ
&Type[regex.regex.Match[typing.AnyStr]]}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match"type*
item
Anypz39z310z311z312z3132æ
groupregex.regex.Match.groupƒ
groupregex.regex.Match.group"F
typing.AnyStr"
builtins.object"builtins.object"builtins.object*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*;7
Literal[builtins.int]	
builtins.int"builtins.int 0:typing.overloadXî
groupregex.regex.Match.group"m
Union[typing.AnyStr,Any]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object
Any*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*d`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str 0:typing.overloadX°
groupregex.regex.Match.group"©
(builtins.tuple[Union[typing.AnyStr,Any]]m
Union[typing.AnyStr,Any]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object
Any"builtins.tuple*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*b`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*b`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*l
groups`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str0:typing.overloadX"38"39"310"311"312"3132‰
groupsregex.regex.Match.groupsÜ
groupsregex.regex.Match.groups"©
(builtins.tuple[Union[typing.AnyStr,Any]]m
Union[typing.AnyStr,Any]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object
Any"builtins.tuple*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*
default
None 0:typing.overloadXö
groupsregex.regex.Match.groups"Ä
3builtins.tuple[Union[typing.AnyStr,regex.regex._T]]∏
#Union[typing.AnyStr,regex.regex._T]F
typing.AnyStr"
builtins.object"builtins.object"builtins.objectG
regex.regex._T"
builtins.object"builtins.object"builtins.object"builtins.tuple*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*T
defaultG
regex.regex._T"
builtins.object"builtins.object"builtins.object0:typing.overloadX"38"39"310"311"312"3132»
	groupdictregex.regex.Match.groupdictµ
	groupdictregex.regex.Match.groupdict"“
4builtins.dict[builtins.str,Union[typing.AnyStr,Any]]
builtins.str"builtins.strm
Union[typing.AnyStr,Any]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object
Any"builtins.dict*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*
default
None 0:typing.overloadX…
	groupdictregex.regex.Match.groupdict"©
?builtins.dict[builtins.str,Union[typing.AnyStr,regex.regex._T]]
builtins.str"builtins.str∏
#Union[typing.AnyStr,regex.regex._T]F
typing.AnyStr"
builtins.object"builtins.object"builtins.objectG
regex.regex._T"
builtins.object"builtins.object"builtins.object"builtins.dict*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*T
defaultG
regex.regex._T"
builtins.object"builtins.object"builtins.object0:typing.overloadX"38"39"310"311"312"3132ﬂ
spanregex.regex.Match.spanÖ
spanregex.regex.Match.span"`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*d`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str 0:typing.overloadXö
spanregex.regex.Match.span"§
0builtins.tuple[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.tuple*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*b`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*b`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*l
groups`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str0:typing.overloadX"38"39"310"311"312"3132˙	
spansregex.regex.Match.spans 
spansregex.regex.Match.spans"¢
/builtins.list[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.list*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*d`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str 0:typing.overloadXÓ
spansregex.regex.Match.spans"ˆ
?builtins.tuple[builtins.list[Tuple[builtins.int,builtins.int]]]¢
/builtins.list[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"builtins.list"builtins.tuple*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*b`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*b`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*l
groups`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str0:typing.overloadX"38"39"310"311"312"3132»
startregex.regex.Match.start√
startregex.regex.Match.start"
builtins.int"builtins.int*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*d`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str 0:typing.overloadX√
startregex.regex.Match.start"L
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*b`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*b`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*l
groups`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str0:typing.overloadX"38"39"310"311"312"3132∫
startsregex.regex.Match.startsÛ
startsregex.regex.Match.starts"J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*d`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str 0:typing.overloadXÉ
startsregex.regex.Match.starts"â
+builtins.tuple[builtins.list[builtins.int]]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list"builtins.tuple*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*b`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*b`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*l
groups`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str0:typing.overloadX"38"39"310"311"312"3132º
endregex.regex.Match.endø
endregex.regex.Match.end"
builtins.int"builtins.int*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*d`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str 0:typing.overloadXø
endregex.regex.Match.end"L
builtins.tuple[builtins.int]
builtins.int"builtins.int"builtins.tuple*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*b`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*b`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*l
groups`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str0:typing.overloadX"38"39"310"311"312"3132Æ
endsregex.regex.Match.endsÔ
endsregex.regex.Match.ends"J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*d`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str 0:typing.overloadXˇ
endsregex.regex.Match.ends"â
+builtins.tuple[builtins.list[builtins.int]]J
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list"builtins.tuple*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*b`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*b`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*l
groups`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str0:typing.overloadX"38"39"310"311"312"3132ù	
capturesregex.regex.Match.captures¢
capturesregex.regex.Match.captures"u
builtins.list[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"builtins.list*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*d`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str 0:typing.overloadX≥
capturesregex.regex.Match.captures"µ
,builtins.tuple[builtins.list[typing.AnyStr]]u
builtins.list[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"builtins.list"builtins.tuple*á
self}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*b`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*b`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*l
groups`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str0:typing.overloadX"38"39"310"311"312"3132®
__getitem__regex.regex.Match.__getitem__≈
__getitem__regex.regex.Match.__getitem__"F
typing.AnyStr"
builtins.object"builtins.object"builtins.object*}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*97
Literal[builtins.int]	
builtins.int"builtins.int0:typing.overloadXï
__getitem__regex.regex.Match.__getitem__"m
Union[typing.AnyStr,Any]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object
Any*}
 regex.regex.Match[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Match*b`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str0:typing.overloadX"38"39"310"311"312"3138Pj38j39j310j311j312j313©
compileregex.regex.compile"Å
"regex.regex.Pattern[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Pattern*ï
patterná
7Union[typing.AnyStr,regex.regex.Pattern[typing.AnyStr]]F
typing.AnyStr"
builtins.object"builtins.object"builtins.objectÅ
"regex.regex.Pattern[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Pattern*)
flags
builtins.int"builtins.int *3
ignore_unused
builtins.bool"builtins.bool *\
cache_patternG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *
kwargs
Anyz38z39z310z311z312z313@
purgeregex.regex.purge"
Nonez38z39z310z311z312z313ø
escaperegex.regex.escape"F
typing.AnyStr"
builtins.object"builtins.object"builtins.object*S
patternF
typing.AnyStr"
builtins.object"builtins.object"builtins.object*2
special_only
builtins.bool"builtins.bool *4
literal_spaces
builtins.bool"builtins.bool z38z39z310z311z312z313É
templateregex.regex.template"Å
"regex.regex.Pattern[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Pattern*ï
patterná
7Union[typing.AnyStr,regex.regex.Pattern[typing.AnyStr]]F
typing.AnyStr"
builtins.object"builtins.object"builtins.objectÅ
"regex.regex.Pattern[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"regex.regex.Pattern*)
flags
builtins.int"builtins.int z38z39z310z311z312z313"‰
searchregex.regex.search™
searchregex.regex.search"ç
+Union[regex.regex.Match[builtins.str],None]R
regex.regex.Match[builtins.str]
builtins.str"builtins.str"regex.regex.Match
None*Ω
patternØ
5Union[builtins.str,regex.regex.Pattern[builtins.str]]
builtins.str"builtins.strV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*(
string
builtins.str"builtins.str*)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *-
partial
builtins.bool"builtins.bool *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadX¸
searchregex.regex.search"ï
-Union[regex.regex.Match[builtins.bytes],None]X
!regex.regex.Match[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Match
None*À
patternΩ
9Union[builtins.bytes,regex.regex.Pattern[builtins.bytes]] 
builtins.bytes"builtins.bytes\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *-
partial
builtins.bool"builtins.bool *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadX"38"39"310"311"312"313"ﬁ
matchregex.regex.match®
matchregex.regex.match"ç
+Union[regex.regex.Match[builtins.str],None]R
regex.regex.Match[builtins.str]
builtins.str"builtins.str"regex.regex.Match
None*Ω
patternØ
5Union[builtins.str,regex.regex.Pattern[builtins.str]]
builtins.str"builtins.strV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*(
string
builtins.str"builtins.str*)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *-
partial
builtins.bool"builtins.bool *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadX˙
matchregex.regex.match"ï
-Union[regex.regex.Match[builtins.bytes],None]X
!regex.regex.Match[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Match
None*À
patternΩ
9Union[builtins.bytes,regex.regex.Pattern[builtins.bytes]] 
builtins.bytes"builtins.bytes\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *-
partial
builtins.bool"builtins.bool *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadX"38"39"310"311"312"313"ˆ
	fullmatchregex.regex.fullmatch∞
	fullmatchregex.regex.fullmatch"ç
+Union[regex.regex.Match[builtins.str],None]R
regex.regex.Match[builtins.str]
builtins.str"builtins.str"regex.regex.Match
None*Ω
patternØ
5Union[builtins.str,regex.regex.Pattern[builtins.str]]
builtins.str"builtins.strV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*(
string
builtins.str"builtins.str*)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *-
partial
builtins.bool"builtins.bool *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadXÇ
	fullmatchregex.regex.fullmatch"ï
-Union[regex.regex.Match[builtins.bytes],None]X
!regex.regex.Match[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Match
None*À
patternΩ
9Union[builtins.bytes,regex.regex.Pattern[builtins.bytes]] 
builtins.bytes"builtins.bytes\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *-
partial
builtins.bool"builtins.bool *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadX"38"39"310"311"312"313"≠
splitregex.regex.splitÔ
splitregex.regex.split"{
&builtins.list[Union[builtins.str,Any]]B
Union[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.list*Ω
patternØ
5Union[builtins.str,regex.regex.Pattern[builtins.str]]
builtins.str"builtins.strV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*(
string
builtins.str"builtins.str*,
maxsplit
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadXÇ
splitregex.regex.split"É
(builtins.list[Union[builtins.bytes,Any]]H
Union[builtins.bytes,Any] 
builtins.bytes"builtins.bytes
Any"builtins.list*ã	
pattern˝
¡Union[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],regex.regex.Pattern[builtins.bytes]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*,
maxsplit
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadX"38"39"310"311"312"313"‘
	splititerregex.regex.splititerÉ
	splititerregex.regex.splititer"
Any*Ω
patternØ
5Union[builtins.str,regex.regex.Pattern[builtins.str]]
builtins.str"builtins.strV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*(
string
builtins.str"builtins.str*,
maxsplit
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadXç
	splititerregex.regex.splititer"
Any*ã	
pattern˝
¡Union[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],regex.regex.Pattern[builtins.bytes]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*,
maxsplit
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadX"38"39"310"311"312"313"‰
findallregex.regex.findallÕ
findallregex.regex.findall",
builtins.list[Any]
Any"builtins.list*Ω
patternØ
5Union[builtins.str,regex.regex.Pattern[builtins.str]]
builtins.str"builtins.strV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*(
string
builtins.str"builtins.str*)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *0

overlapped
builtins.bool"builtins.bool *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadX◊
findallregex.regex.findall",
builtins.list[Any]
Any"builtins.list*ã	
pattern˝
¡Union[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],regex.regex.Pattern[builtins.bytes]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *0

overlapped
builtins.bool"builtins.bool *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadX"38"39"310"311"312"313"˛
finditerregex.regex.finditerŸ
finditerregex.regex.finditer"
Any*Ω
patternØ
5Union[builtins.str,regex.regex.Pattern[builtins.str]]
builtins.str"builtins.strV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*(
string
builtins.str"builtins.str*)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *0

overlapped
builtins.bool"builtins.bool *-
partial
builtins.bool"builtins.bool *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadX„
finditerregex.regex.finditer"
Any*ã	
pattern˝
¡Union[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],regex.regex.Pattern[builtins.bytes]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *0

overlapped
builtins.bool"builtins.bool *-
partial
builtins.bool"builtins.bool *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadX"38"39"310"311"312"313"»%
subregex.regex.subﬁ
subregex.regex.sub"
builtins.str"builtins.str*Ω
patternØ
5Union[builtins.str,regex.regex.Pattern[builtins.str]]
builtins.str"builtins.strV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*≠
repl¢
3Union[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function*(
string
builtins.str"builtins.str*)
count
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadX≤
subregex.regex.sub" 
builtins.bytes"builtins.bytes*ã	
pattern˝
¡Union[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],regex.regex.Pattern[builtins.bytes]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*Û
replË
ΩUnion[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],CallableType[builtins.function]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBufferK
CallableType[builtins.function]&
builtins.function"builtins.function*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*)
count
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadX"38"39"310"311"312"313"“%
subfregex.regex.subf‚
subfregex.regex.subf"
builtins.str"builtins.str*Ω
patternØ
5Union[builtins.str,regex.regex.Pattern[builtins.str]]
builtins.str"builtins.strV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*Ø
format¢
3Union[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function*(
string
builtins.str"builtins.str*)
count
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadX∂
subfregex.regex.subf" 
builtins.bytes"builtins.bytes*ã	
pattern˝
¡Union[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],regex.regex.Pattern[builtins.bytes]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*ı
formatË
ΩUnion[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],CallableType[builtins.function]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBufferK
CallableType[builtins.function]&
builtins.function"builtins.function*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*)
count
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadX"38"39"310"311"312"313"ÿ&
subnregex.regex.subn§
subnregex.regex.subn"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*Ω
patternØ
5Union[builtins.str,regex.regex.Pattern[builtins.str]]
builtins.str"builtins.strV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*≠
repl¢
3Union[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function*(
string
builtins.str"builtins.str*)
count
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadX˙
subnregex.regex.subn"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*ã	
pattern˝
¡Union[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],regex.regex.Pattern[builtins.bytes]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*Û
replË
ΩUnion[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],CallableType[builtins.function]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBufferK
CallableType[builtins.function]&
builtins.function"builtins.function*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*)
count
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadX"38"39"310"311"312"313"‚&
subfnregex.regex.subfn®
subfnregex.regex.subfn"`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*Ω
patternØ
5Union[builtins.str,regex.regex.Pattern[builtins.str]]
builtins.str"builtins.strV
!regex.regex.Pattern[builtins.str]
builtins.str"builtins.str"regex.regex.Pattern*Ø
format¢
3Union[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function*(
string
builtins.str"builtins.str*)
count
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadX˛
subfnregex.regex.subfn"f
"Tuple[builtins.bytes,builtins.int] 
builtins.bytes"builtins.bytes
builtins.int"builtins.int*ã	
pattern˝
¡Union[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],regex.regex.Pattern[builtins.bytes]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer\
#regex.regex.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"regex.regex.Pattern*ı
formatË
ΩUnion[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],CallableType[builtins.function]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBufferK
CallableType[builtins.function]&
builtins.function"builtins.function*„
string÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer*)
count
builtins.int"builtins.int *)
flags
builtins.int"builtins.int *O
posD
Union[builtins.int,None]
builtins.int"builtins.int
None *R
endposD
Union[builtins.int,None]
builtins.int"builtins.int
None *Y

concurrentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y
timeoutJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *3
ignore_unused
builtins.bool"builtins.bool *
kwargs
Any0:typing.overloadX"38"39"310"311"312"313"ú
	cache_allregex.regex.cache_alln
	cache_allregex.regex.cache_all"
None*+
value
builtins.bool"builtins.bool 0:typing.overloadXl
	cache_allregex.regex.cache_all"
builtins.bool"builtins.bool*
value
None0:typing.overloadX"38"39"310"311"312"313*£
__annotations__regex.regex.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313*R
Aregex._regex_core.A
builtins.int"builtins.int*38*39*310*311*312*313*Z
ASCIIregex._regex_core.ASCII
builtins.int"builtins.int*38*39*310*311*312*313*R
Bregex._regex_core.B
builtins.int"builtins.int*38*39*310*311*312*313*b
	BESTMATCHregex._regex_core.BESTMATCH
builtins.int"builtins.int*38*39*310*311*312*313*R
Dregex._regex_core.D
builtins.int"builtins.int*38*39*310*311*312*313*Z
DEBUGregex._regex_core.DEBUG
builtins.int"builtins.int*38*39*310*311*312*313*R
Eregex._regex_core.E
builtins.int"builtins.int*38*39*310*311*312*313*h
ENHANCEMATCHregex._regex_core.ENHANCEMATCH
builtins.int"builtins.int*38*39*310*311*312*313*R
Fregex._regex_core.F
builtins.int"builtins.int*38*39*310*311*312*313*`
FULLCASEregex._regex_core.FULLCASE
builtins.int"builtins.int*38*39*310*311*312*313*R
Iregex._regex_core.I
builtins.int"builtins.int*38*39*310*311*312*313*d

IGNORECASEregex._regex_core.IGNORECASE
builtins.int"builtins.int*38*39*310*311*312*313*R
Lregex._regex_core.L
builtins.int"builtins.int*38*39*310*311*312*313*\
LOCALEregex._regex_core.LOCALE
builtins.int"builtins.int*38*39*310*311*312*313*R
Mregex._regex_core.M
builtins.int"builtins.int*38*39*310*311*312*313*b
	MULTILINEregex._regex_core.MULTILINE
builtins.int"builtins.int*38*39*310*311*312*313*R
Pregex._regex_core.P
builtins.int"builtins.int*38*39*310*311*312*313*Z
POSIXregex._regex_core.POSIX
builtins.int"builtins.int*38*39*310*311*312*313*R
Rregex._regex_core.R
builtins.int"builtins.int*38*39*310*311*312*313*^
REVERSEregex._regex_core.REVERSE
builtins.int"builtins.int*38*39*310*311*312*313*R
Tregex._regex_core.T
builtins.int"builtins.int*38*39*310*311*312*313*`
TEMPLATEregex._regex_core.TEMPLATE
builtins.int"builtins.int*38*39*310*311*312*313*R
Sregex._regex_core.S
builtins.int"builtins.int*38*39*310*311*312*313*\
DOTALLregex._regex_core.DOTALL
builtins.int"builtins.int*38*39*310*311*312*313*R
Uregex._regex_core.U
builtins.int"builtins.int*38*39*310*311*312*313*^
UNICODEregex._regex_core.UNICODE
builtins.int"builtins.int*38*39*310*311*312*313*T
V0regex._regex_core.V0
builtins.int"builtins.int*38*39*310*311*312*313*`
VERSION0regex._regex_core.VERSION0
builtins.int"builtins.int*38*39*310*311*312*313*T
V1regex._regex_core.V1
builtins.int"builtins.int*38*39*310*311*312*313*`
VERSION1regex._regex_core.VERSION1
builtins.int"builtins.int*38*39*310*311*312*313*R
Wregex._regex_core.W
builtins.int"builtins.int*38*39*310*311*312*313*X
WORDregex._regex_core.WORD
builtins.int"builtins.int*38*39*310*311*312*313*R
Xregex._regex_core.X
builtins.int"builtins.int*38*39*310*311*312*313*^
VERBOSEregex._regex_core.VERBOSE
builtins.int"builtins.int*38*39*310*311*312*313*n
DEFAULT_VERSION!regex._regex_core.DEFAULT_VERSION
builtins.int"builtins.int*38*39*310*311*312*313*`
__version__regex.regex.__version__
builtins.str"builtins.str*38*39*310*311*312*313*É
Regexregex.regex.RegexK
CallableType[builtins.function]&
builtins.function"builtins.function*38*39*310*311*312*313