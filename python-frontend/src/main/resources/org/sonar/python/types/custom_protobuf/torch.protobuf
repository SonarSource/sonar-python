
torch@
dtypetorch.dtype"*SonarPythonAnalyzerFakeStub.CustomStubBaseB
layouttorch.layout"*SonarPythonAnalyzerFakeStub.CustomStubBaseì
devicetorch.device"*SonarPythonAnalyzerFakeStub.CustomStubBase*Œ
__init__torch.device.__init__"
None*&
self
torch.device"torch.device*&
type
builtins.str"builtins.str*Q
indexD
Union[builtins.int,None]
builtins.int"builtins.int
None ¢
Tensortorch.Tensor"*SonarPythonAnalyzerFakeStub.CustomStubBase*›

new_tensortorch.Tensor.new_tensor"
torch.Tensor"torch.Tensor*&
self
torch.Tensor"torch.Tensor*
data
Any*N
dtypeA
Union[torch.dtype,None]
torch.dtype"torch.dtype
None *}
deviceo
%Union[builtins.str,torch.device,None]
builtins.str"builtins.str
torch.device"torch.device
None *\
requires_gradG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *0

pin_memory
builtins.bool"builtins.bool ˝
tensortorch.tensor"
torch.Tensor"torch.Tensor*
data
Any*N
dtypeA
Union[torch.dtype,None]
torch.dtype"torch.dtype
None *}
deviceo
%Union[builtins.str,torch.device,None]
builtins.str"builtins.str
torch.device"torch.device
None *3
requires_grad
builtins.bool"builtins.bool *0

pin_memory
builtins.bool"builtins.bool Ì
emptytorch.empty"
torch.Tensor"torch.Tensor*Æ
size£
1Union[builtins.int,typing.Sequence[builtins.int]]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence*N
dtypeA
Union[torch.dtype,None]
torch.dtype"torch.dtype
None *R
layoutD
Union[torch.layout,None]
torch.layout"torch.layout
None *}
deviceo
%Union[builtins.str,torch.device,None]
builtins.str"builtins.str
torch.device"torch.device
None *3
requires_grad
builtins.bool"builtins.bool *0

pin_memory
builtins.bool"builtins.bool Ì
zerostorch.zeros"
torch.Tensor"torch.Tensor*Æ
size£
1Union[builtins.int,typing.Sequence[builtins.int]]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence*N
dtypeA
Union[torch.dtype,None]
torch.dtype"torch.dtype
None *R
layoutD
Union[torch.layout,None]
torch.layout"torch.layout
None *}
deviceo
%Union[builtins.str,torch.device,None]
builtins.str"builtins.str
torch.device"torch.device
None *3
requires_grad
builtins.bool"builtins.bool *0

pin_memory
builtins.bool"builtins.bool Î
ones
torch.ones"
torch.Tensor"torch.Tensor*Æ
size£
1Union[builtins.int,typing.Sequence[builtins.int]]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence*N
dtypeA
Union[torch.dtype,None]
torch.dtype"torch.dtype
None *R
layoutD
Union[torch.layout,None]
torch.layout"torch.layout
None *}
deviceo
%Union[builtins.str,torch.device,None]
builtins.str"builtins.str
torch.device"torch.device
None *3
requires_grad
builtins.bool"builtins.bool *0

pin_memory
builtins.bool"builtins.bool ‚
rand
torch.rand"
torch.Tensor"torch.Tensor*&
size
builtins.int"builtins.int*N
dtypeA
Union[torch.dtype,None]
torch.dtype"torch.dtype
None *R
layoutD
Union[torch.layout,None]
torch.layout"torch.layout
None *}
deviceo
%Union[builtins.str,torch.device,None]
builtins.str"builtins.str
torch.device"torch.device
None *3
requires_grad
builtins.bool"builtins.bool *0

pin_memory
builtins.bool"builtins.bool ‰
randntorch.randn"
torch.Tensor"torch.Tensor*&
size
builtins.int"builtins.int*N
dtypeA
Union[torch.dtype,None]
torch.dtype"torch.dtype
None *R
layoutD
Union[torch.layout,None]
torch.layout"torch.layout
None *}
deviceo
%Union[builtins.str,torch.device,None]
builtins.str"builtins.str
torch.device"torch.device
None *3
requires_grad
builtins.bool"builtins.bool *0

pin_memory
builtins.bool"builtins.bool ®
arangetorch.arange"
torch.Tensor"torch.Tensor*q
startf
"Union[builtins.int,builtins.float]
builtins.int"builtins.int 
builtins.float"builtins.float*Ä
endu
'Union[builtins.int,builtins.float,None]
builtins.int"builtins.int 
builtins.float"builtins.float
None *r
stepf
"Union[builtins.int,builtins.float]
builtins.int"builtins.int 
builtins.float"builtins.float *N
dtypeA
Union[torch.dtype,None]
torch.dtype"torch.dtype
None *R
layoutD
Union[torch.layout,None]
torch.layout"torch.layout
None *}
deviceo
%Union[builtins.str,torch.device,None]
builtins.str"builtins.str
torch.device"torch.device
None *3
requires_grad
builtins.bool"builtins.bool *0

pin_memory
builtins.bool"builtins.bool „
full
torch.full"
torch.Tensor"torch.Tensor*Æ
size£
1Union[builtins.int,typing.Sequence[builtins.int]]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence*v

fill_valuef
"Union[builtins.int,builtins.float]
builtins.int"builtins.int 
builtins.float"builtins.float*N
dtypeA
Union[torch.dtype,None]
torch.dtype"torch.dtype
None *R
layoutD
Union[torch.layout,None]
torch.layout"torch.layout
None *}
deviceo
%Union[builtins.str,torch.device,None]
builtins.str"builtins.str
torch.device"torch.device
None *3
requires_grad
builtins.bool"builtins.bool *0

pin_memory
builtins.bool"builtins.bool ¨
eye	torch.eye"
torch.Tensor"torch.Tensor*#
n
builtins.int"builtins.int*M
mD
Union[builtins.int,None]
builtins.int"builtins.int
None *N
dtypeA
Union[torch.dtype,None]
torch.dtype"torch.dtype
None *R
layoutD
Union[torch.layout,None]
torch.layout"torch.layout
None *}
deviceo
%Union[builtins.str,torch.device,None]
builtins.str"builtins.str
torch.device"torch.device
None *3
requires_grad
builtins.bool"builtins.bool *0

pin_memory
builtins.bool"builtins.bool *f
__path__torch.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*Å
__annotations__torch.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
nntorch.nn 