
redis.backoffÛ
AbstractBackoffredis.backoff.AbstractBackoff"abc.ABC*ú
reset#redis.backoff.AbstractBackoff.reset"
None*H
self>
redis.backoff.AbstractBackoff"redis.backoff.AbstractBackoffz38z39z310z311z312z313*¸
compute%redis.backoff.AbstractBackoff.compute" 
builtins.float"builtins.float*H
self>
redis.backoff.AbstractBackoff"redis.backoff.AbstractBackoff**
failures
builtins.int"builtins.int0:abc.abstractmethod@z38z39z310z311z312z313j38j39j310j311j312j313¢
ConstantBackoffredis.backoff.ConstantBackoff"redis.backoff.AbstractBackoff*Õ
__init__&redis.backoff.ConstantBackoff.__init__"
None*H
self>
redis.backoff.ConstantBackoff"redis.backoff.ConstantBackoff*)
backoff
builtins.int"builtins.intz38z39z310z311z312z313*‰
compute%redis.backoff.ConstantBackoff.compute" 
builtins.float"builtins.float*H
self>
redis.backoff.ConstantBackoff"redis.backoff.ConstantBackoff**
failures
builtins.int"builtins.intz38z39z310z311z312z313j38j39j310j311j312j313Ú
	NoBackoffredis.backoff.NoBackoff"redis.backoff.ConstantBackoff*ê
__init__ redis.backoff.NoBackoff.__init__"
None*<
self2
redis.backoff.NoBackoff"redis.backoff.NoBackoffz38z39z310z311z312z313j38j39j310j311j312j313Í
ExponentialBackoff redis.backoff.ExponentialBackoff"redis.backoff.AbstractBackoff*Ü
__init__)redis.backoff.ExponentialBackoff.__init__"
None*N
selfD
 redis.backoff.ExponentialBackoff" redis.backoff.ExponentialBackoff*+
cap 
builtins.float"builtins.float *,
base 
builtins.float"builtins.float z38z39z310z311z312z313*Ì
compute(redis.backoff.ExponentialBackoff.compute" 
builtins.float"builtins.float*N
selfD
 redis.backoff.ExponentialBackoff" redis.backoff.ExponentialBackoff**
failures
builtins.int"builtins.intz38z39z310z311z312z313j38j39j310j311j312j313‚
FullJitterBackoffredis.backoff.FullJitterBackoff"redis.backoff.AbstractBackoff*É
__init__(redis.backoff.FullJitterBackoff.__init__"
None*L
selfB
redis.backoff.FullJitterBackoff"redis.backoff.FullJitterBackoff*+
cap 
builtins.float"builtins.float *,
base 
builtins.float"builtins.float z38z39z310z311z312z313*Í
compute'redis.backoff.FullJitterBackoff.compute" 
builtins.float"builtins.float*L
selfB
redis.backoff.FullJitterBackoff"redis.backoff.FullJitterBackoff**
failures
builtins.int"builtins.intz38z39z310z311z312z313j38j39j310j311j312j313Í
EqualJitterBackoff redis.backoff.EqualJitterBackoff"redis.backoff.AbstractBackoff*Ü
__init__)redis.backoff.EqualJitterBackoff.__init__"
None*N
selfD
 redis.backoff.EqualJitterBackoff" redis.backoff.EqualJitterBackoff*+
cap 
builtins.float"builtins.float *,
base 
builtins.float"builtins.float z38z39z310z311z312z313*Ì
compute(redis.backoff.EqualJitterBackoff.compute" 
builtins.float"builtins.float*N
selfD
 redis.backoff.EqualJitterBackoff" redis.backoff.EqualJitterBackoff**
failures
builtins.int"builtins.intz38z39z310z311z312z313j38j39j310j311j312j313¢
DecorrelatedJitterBackoff'redis.backoff.DecorrelatedJitterBackoff"redis.backoff.AbstractBackoff*õ
__init__0redis.backoff.DecorrelatedJitterBackoff.__init__"
None*\
selfR
'redis.backoff.DecorrelatedJitterBackoff"'redis.backoff.DecorrelatedJitterBackoff*+
cap 
builtins.float"builtins.float *,
base 
builtins.float"builtins.float z38z39z310z311z312z313*Ç
compute/redis.backoff.DecorrelatedJitterBackoff.compute" 
builtins.float"builtins.float*\
selfR
'redis.backoff.DecorrelatedJitterBackoff"'redis.backoff.DecorrelatedJitterBackoff**
failures
builtins.int"builtins.intz38z39z310z311z312z313j38j39j310j311j312j313í
default_backoffredis.backoff.default_backoff"D
 redis.backoff.EqualJitterBackoff" redis.backoff.EqualJitterBackoffz38z39z310z311z312z313*•
__annotations__redis.backoff.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313