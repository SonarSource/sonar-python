
lib2to3.fixer_base˘1
BaseFixlib2to3.fixer_base.BaseFix"builtins.object*†
__init__#lib2to3.fixer_base.BaseFix.__init__"
None*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*™
optionsú
2typing.MutableMapping[builtins.str,TypeAlias[Any]]
builtins.str"builtins.str1
TypeAlias[Any]
Any"_typeshed.Incomplete"typing.MutableMapping*S
logJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listz38z39z310z311z312z313z314*¨
compile_pattern*lib2to3.fixer_base.BaseFix.compile_pattern"
None*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFixz38z39z310z311z312z313z314*°
set_filename'lib2to3.fixer_base.BaseFix.set_filename"
None*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*¯
filenameÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPathz38z39z310z311z312z313z314*≈
match lib2to3.fixer_base.BaseFix.match"Œ
OUnion[Literal[builtins.bool],builtins.dict[builtins.str,lib2to3.fixer_base._N]]:
Literal[builtins.bool]	
builtins.bool"builtins.boolº
1builtins.dict[builtins.str,lib2to3.fixer_base._N]
builtins.str"builtins.strZ
lib2to3.fixer_base._N*
lib2to3.pytree.Base"lib2to3.pytree.Base"lib2to3.pytree.Base"builtins.dict*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*d
nodeZ
lib2to3.fixer_base._N*
lib2to3.pytree.Base"lib2to3.pytree.Base"lib2to3.pytree.Basez38z39z310z311z312z313z314*õ
	transform$lib2to3.fixer_base.BaseFix.transform"ô
3Union[lib2to3.pytree.Node,lib2to3.pytree.Leaf,None]*
lib2to3.pytree.Node"lib2to3.pytree.Node*
lib2to3.pytree.Leaf"lib2to3.pytree.Leaf
None*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*4
node*
lib2to3.pytree.Base"lib2to3.pytree.Base*ò
resultsä
/builtins.dict[builtins.str,lib2to3.pytree.Base]
builtins.str"builtins.str*
lib2to3.pytree.Base"lib2to3.pytree.Base"builtins.dict0:abc.abstractmethod@z38z39z310z311z312z313z314*‡
new_name#lib2to3.fixer_base.BaseFix.new_name"
builtins.str"builtins.str*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*,
template
builtins.str"builtins.str z38z39z310z311z312z313z314*œ
log_message&lib2to3.fixer_base.BaseFix.log_message"
None*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*)
message
builtins.str"builtins.strz38z39z310z311z312z313z314*¥
cannot_convert)lib2to3.fixer_base.BaseFix.cannot_convert"
None*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*4
node*
lib2to3.pytree.Base"lib2to3.pytree.Base*R
reasonD
Union[builtins.str,None]
builtins.str"builtins.str
None z38z39z310z311z312z313z314*¸
warning"lib2to3.fixer_base.BaseFix.warning"
None*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*4
node*
lib2to3.pytree.Base"lib2to3.pytree.Base*(
reason
builtins.str"builtins.strz38z39z310z311z312z313z314*”

start_tree%lib2to3.fixer_base.BaseFix.start_tree"
None*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*4
tree*
lib2to3.pytree.Node"lib2to3.pytree.Node*¯
filenameÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPathz38z39z310z311z312z313z314*’
finish_tree&lib2to3.fixer_base.BaseFix.finish_tree"
None*B
self8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix*4
tree*
lib2to3.pytree.Node"lib2to3.pytree.Node*¯
filenameÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPathz38z39z310z311z312z313z314j38j39j310j311j312j313j314rî
PATTERN"lib2to3.fixer_base.BaseFix.PATTERND
Union[builtins.str,None]
builtins.str"builtins.str
None*38*39*310*311*312*313*314r´
pattern"lib2to3.fixer_base.BaseFix.pattern[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None*38*39*310*311*312*313*314rµ
pattern_tree'lib2to3.fixer_base.BaseFix.pattern_tree[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None*38*39*310*311*312*313*314r´
options"lib2to3.fixer_base.BaseFix.options[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None*38*39*310*311*312*313*314r≠
filename#lib2to3.fixer_base.BaseFix.filename[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None*38*39*310*311*312*313*314rÅ
numbers"lib2to3.fixer_base.BaseFix.numbers1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rá

used_names%lib2to3.fixer_base.BaseFix.used_names1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rı
order lib2to3.fixer_base.BaseFix.order®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*38*39*310*311*312*313*314rp
explicit#lib2to3.fixer_base.BaseFix.explicit
builtins.bool"builtins.bool*38*39*310*311*312*313*314rp
	run_order$lib2to3.fixer_base.BaseFix.run_order
builtins.int"builtins.int*38*39*310*311*312*313*314r~
keep_line_order*lib2to3.fixer_base.BaseFix.keep_line_order
builtins.bool"builtins.bool*38*39*310*311*312*313*314rz
BM_compatible(lib2to3.fixer_base.BaseFix.BM_compatible
builtins.bool"builtins.bool*38*39*310*311*312*313*314r{
symslib2to3.fixer_base.BaseFix.syms1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314ry
loglib2to3.fixer_base.BaseFix.log1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313*314rr
	first_log$lib2to3.fixer_base.BaseFix.first_log
builtins.bool"builtins.bool*38*39*310*311*312*313*314¸
ConditionalFix!lib2to3.fixer_base.ConditionalFix"lib2to3.fixer_base.BaseFix*‘

start_tree,lib2to3.fixer_base.ConditionalFix.start_tree"
None*P
selfF
!lib2to3.fixer_base.ConditionalFix"!lib2to3.fixer_base.ConditionalFix*,*
lib2to3.pytree.Node"lib2to3.pytree.Node*ÏÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPathz38z39z310z311z312z313z314*Ö
should_skip-lib2to3.fixer_base.ConditionalFix.should_skip"
builtins.bool"builtins.bool*P
selfF
!lib2to3.fixer_base.ConditionalFix"!lib2to3.fixer_base.ConditionalFix*4
node*
lib2to3.pytree.Base"lib2to3.pytree.Basez38z39z310z311z312z313z314@babc.ABCMetaj38j39j310j311j312j313j314rõ
skip_on)lib2to3.fixer_base.ConditionalFix.skip_onD
Union[builtins.str,None]
builtins.str"builtins.str
None*38*39*310*311*312*313*314*Ø
__annotations__"lib2to3.fixer_base.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313*314