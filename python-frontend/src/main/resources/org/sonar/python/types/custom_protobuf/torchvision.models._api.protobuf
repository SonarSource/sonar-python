
torchvision.models._api°
Weightstorchvision.models._api.Weights"*SonarPythonAnalyzerFakeStub.CustomStubBase*°
__eq__&torchvision.models._api.Weights.__eq__"
builtins.bool"builtins.bool*DB
torchvision.models._api.Weights"torchvision.models._api.Weights*	
Any* 
__init__(torchvision.models._api.Weights.__init__"
None*L
selfB
torchvision.models._api.Weights"torchvision.models._api.Weights*
url
Any*

transforms
Any*
meta
AnyrH
url#torchvision.models._api.Weights.url
builtins.str"builtins.strrÖ

transforms*torchvision.models._api.Weights.transformsK
CallableType[builtins.function]&
builtins.function"builtins.functionrÖ
meta$torchvision.models._api.Weights.metaW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictŸ
WeightsEnum#torchvision.models._api.WeightsEnum"	enum.Enum*Ù
verify*torchvision.models._api.WeightsEnum.verify"
Any*à
cls
)Type[torchvision.models._api.WeightsEnum]J
#torchvision.models._api.WeightsEnum"#torchvision.models._api.WeightsEnum"type*
obj
Any0:builtins.classmethodp*ù
get_state_dict2torchvision.models._api.WeightsEnum.get_state_dict"Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping*T
selfJ
#torchvision.models._api.WeightsEnum"#torchvision.models._api.WeightsEnum*
args
Any*
kwargs
Any*O
url'torchvision.models._api.WeightsEnum.url*
self0:builtins.property`*]

transforms.torchvision.models._api.WeightsEnum.transforms*
self0:builtins.property`*Q
meta(torchvision.models._api.WeightsEnum.meta*
self0:builtins.property`H§

get_weight"torchvision.models._api.get_weight"J
#torchvision.models._api.WeightsEnum"#torchvision.models._api.WeightsEnum*&
name
builtins.str"builtins.strÔ
get_model_weights)torchvision.models._api.get_model_weights"
)Type[torchvision.models._api.WeightsEnum]J
#torchvision.models._api.WeightsEnum"#torchvision.models._api.WeightsEnum"type*≠
name¢
3Union[CallableType[builtins.function],builtins.str]K
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.strË
list_models#torchvision.models._api.list_models"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*^
moduleP
Union[types.ModuleType,None]$
types.ModuleType"types.ModuleType
None *¬
include≤
6Union[typing.Iterable[builtins.str],builtins.str,None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
builtins.str"builtins.str
None *¬
exclude≤
6Union[typing.Iterable[builtins.str],builtins.str,None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
builtins.str"builtins.str
None ≥
get_model_builder)torchvision.models._api.get_model_builder"K
CallableType[builtins.function]&
builtins.function"builtins.function*&
name
builtins.str"builtins.str≠
	get_model!torchvision.models._api.get_model"@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*&
name
builtins.str"builtins.str*
config
Any*ì
__annotations__'torchvision.models._api.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict