
pyspark.pandas.series™r
PySparkColumnpyspark.sql.column.Column"builtins.object*ã
__init__"pyspark.sql.column.Column.__init__"
None*@
self6
pyspark.sql.column.Column"pyspark.sql.column.Column*
jc
Any*∏
__eq__ pyspark.sql.column.Column.__eq__"6
pyspark.sql.column.Column"pyspark.sql.column.Column*86
pyspark.sql.column.Column"pyspark.sql.column.Column*ôñ
∑Union[pyspark.sql.column.Column,TypeAlias[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]],_decimal.Decimal,TypeAlias[Union[datetime.datetime,datetime.date]]]6
pyspark.sql.column.Column"pyspark.sql.column.Column®
STypeAlias[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]]≠
HTypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]ø
=Union[builtins.bool,builtins.float,builtins.int,builtins.str]
builtins.bool"builtins.bool 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str"pyspark._typing.PrimitiveType"pyspark.sql._typing.LiteralType$
_decimal.Decimal"_decimal.DecimalŒ
1TypeAlias[Union[datetime.datetime,datetime.date]]r
&Union[datetime.datetime,datetime.date]&
datetime.datetime"datetime.datetime
datetime.date"datetime.date"#pyspark.sql._typing.DateTimeLiteral*ß
__ne__ pyspark.sql.column.Column.__ne__"6
pyspark.sql.column.Column"pyspark.sql.column.Column*86
pyspark.sql.column.Column"pyspark.sql.column.Column*	
Any*Ö
__contains__&pyspark.sql.column.Column.__contains__"
None*86
pyspark.sql.column.Column"pyspark.sql.column.Column*	
Any*∏
getItem!pyspark.sql.column.Column.getItem"6
pyspark.sql.column.Column"pyspark.sql.column.Column*@
self6
pyspark.sql.column.Column"pyspark.sql.column.Column*
key
Any*ª
getField"pyspark.sql.column.Column.getField"6
pyspark.sql.column.Column"pyspark.sql.column.Column*@
self6
pyspark.sql.column.Column"pyspark.sql.column.Column*
name
Any*ò
	withField#pyspark.sql.column.Column.withField"6
pyspark.sql.column.Column"pyspark.sql.column.Column*@
self6
pyspark.sql.column.Column"pyspark.sql.column.Column*+
	fieldName
builtins.str"builtins.str*?
col6
pyspark.sql.column.Column"pyspark.sql.column.Column*⁄

dropFields$pyspark.sql.column.Column.dropFields"6
pyspark.sql.column.Column"pyspark.sql.column.Column*@
self6
pyspark.sql.column.Column"pyspark.sql.column.Column*,

fieldNames
builtins.str"builtins.str*±
__getattr__%pyspark.sql.column.Column.__getattr__"6
pyspark.sql.column.Column"pyspark.sql.column.Column*86
pyspark.sql.column.Column"pyspark.sql.column.Column*	
Any*±
__getitem__%pyspark.sql.column.Column.__getitem__"6
pyspark.sql.column.Column"pyspark.sql.column.Column*86
pyspark.sql.column.Column"pyspark.sql.column.Column*	
Any*r
__iter__"pyspark.sql.column.Column.__iter__"
None*86
pyspark.sql.column.Column"pyspark.sql.column.Column*…
likepyspark.sql.column.Column.like"6
pyspark.sql.column.Column"pyspark.sql.column.Column*@
self6
pyspark.sql.column.Column"pyspark.sql.column.Column*'
other
builtins.str"builtins.str*À
rlikepyspark.sql.column.Column.rlike"6
pyspark.sql.column.Column"pyspark.sql.column.Column*@
self6
pyspark.sql.column.Column"pyspark.sql.column.Column*'
other
builtins.str"builtins.str*À
ilikepyspark.sql.column.Column.ilike"6
pyspark.sql.column.Column"pyspark.sql.column.Column*@
self6
pyspark.sql.column.Column"pyspark.sql.column.Column*'
other
builtins.str"builtins.str*≥
isinpyspark.sql.column.Column.isin"6
pyspark.sql.column.Column"pyspark.sql.column.Column*@
self6
pyspark.sql.column.Column"pyspark.sql.column.Column*
cols
Any*‡
aliaspyspark.sql.column.Column.alias"6
pyspark.sql.column.Column"pyspark.sql.column.Column*@
self6
pyspark.sql.column.Column"pyspark.sql.column.Column*'
alias
builtins.str"builtins.str*
kwargs
Any*º
castpyspark.sql.column.Column.cast"6
pyspark.sql.column.Column"pyspark.sql.column.Column*@
self6
pyspark.sql.column.Column"pyspark.sql.column.Column*ô
dataTypeä
.Union[pyspark.sql.types.DataType,builtins.str]8
pyspark.sql.types.DataType"pyspark.sql.types.DataType
builtins.str"builtins.str*˙
between!pyspark.sql.column.Column.between"6
pyspark.sql.column.Column"pyspark.sql.column.Column*@
self6
pyspark.sql.column.Column"pyspark.sql.column.Column*ß

lowerBoundñ
∑Union[pyspark.sql.column.Column,TypeAlias[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]],TypeAlias[Union[datetime.datetime,datetime.date]],_decimal.Decimal]6
pyspark.sql.column.Column"pyspark.sql.column.Column®
STypeAlias[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]]≠
HTypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]ø
=Union[builtins.bool,builtins.float,builtins.int,builtins.str]
builtins.bool"builtins.bool 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str"pyspark._typing.PrimitiveType"pyspark.sql._typing.LiteralTypeŒ
1TypeAlias[Union[datetime.datetime,datetime.date]]r
&Union[datetime.datetime,datetime.date]&
datetime.datetime"datetime.datetime
datetime.date"datetime.date"#pyspark.sql._typing.DateTimeLiteral$
_decimal.Decimal"_decimal.Decimal*ß

upperBoundñ
∑Union[pyspark.sql.column.Column,TypeAlias[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]],TypeAlias[Union[datetime.datetime,datetime.date]],_decimal.Decimal]6
pyspark.sql.column.Column"pyspark.sql.column.Column®
STypeAlias[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]]≠
HTypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]ø
=Union[builtins.bool,builtins.float,builtins.int,builtins.str]
builtins.bool"builtins.bool 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str"pyspark._typing.PrimitiveType"pyspark.sql._typing.LiteralTypeŒ
1TypeAlias[Union[datetime.datetime,datetime.date]]r
&Union[datetime.datetime,datetime.date]&
datetime.datetime"datetime.datetime
datetime.date"datetime.date"#pyspark.sql._typing.DateTimeLiteral$
_decimal.Decimal"_decimal.Decimal*˚
whenpyspark.sql.column.Column.when"6
pyspark.sql.column.Column"pyspark.sql.column.Column*@
self6
pyspark.sql.column.Column"pyspark.sql.column.Column*E
	condition6
pyspark.sql.column.Column"pyspark.sql.column.Column*
value
Any*æ
	otherwise#pyspark.sql.column.Column.otherwise"6
pyspark.sql.column.Column"pyspark.sql.column.Column*@
self6
pyspark.sql.column.Column"pyspark.sql.column.Column*
value
Any*Ï
overpyspark.sql.column.Column.over"6
pyspark.sql.column.Column"pyspark.sql.column.Column*@
self6
pyspark.sql.column.Column"pyspark.sql.column.Column*J
window>
pyspark.sql.window.WindowSpec"pyspark.sql.window.WindowSpec*Ä
__nonzero__%pyspark.sql.column.Column.__nonzero__"
None*@
self6
pyspark.sql.column.Column"pyspark.sql.column.Column*Ü
__repr__"pyspark.sql.column.Column.__repr__"
builtins.str"builtins.str*86
pyspark.sql.column.Column"pyspark.sql.column.Column2Ç
substr pyspark.sql.column.Column.substrè
substr pyspark.sql.column.Column.substr"6
pyspark.sql.column.Column"pyspark.sql.column.Column*@
self6
pyspark.sql.column.Column"pyspark.sql.column.Column**
startPos
builtins.int"builtins.int*(
length
builtins.int"builtins.int0:typing.overloadX√
substr pyspark.sql.column.Column.substr"6
pyspark.sql.column.Column"pyspark.sql.column.Column*@
self6
pyspark.sql.column.Column"pyspark.sql.column.Column*D
startPos6
pyspark.sql.column.Column"pyspark.sql.column.Column*B
length6
pyspark.sql.column.Column"pyspark.sql.column.Column0:typing.overloadXry
__neg__!pyspark.sql.column.Column.__neg__K
CallableType[builtins.function]&
builtins.function"builtins.functionry
__add__!pyspark.sql.column.Column.__add__K
CallableType[builtins.function]&
builtins.function"builtins.functionry
__sub__!pyspark.sql.column.Column.__sub__K
CallableType[builtins.function]&
builtins.function"builtins.functionry
__mul__!pyspark.sql.column.Column.__mul__K
CallableType[builtins.function]&
builtins.function"builtins.functionry
__div__!pyspark.sql.column.Column.__div__K
CallableType[builtins.function]&
builtins.function"builtins.functionrÅ
__truediv__%pyspark.sql.column.Column.__truediv__K
CallableType[builtins.function]&
builtins.function"builtins.functionry
__mod__!pyspark.sql.column.Column.__mod__K
CallableType[builtins.function]&
builtins.function"builtins.functionr{
__radd__"pyspark.sql.column.Column.__radd__K
CallableType[builtins.function]&
builtins.function"builtins.functionr{
__rsub__"pyspark.sql.column.Column.__rsub__K
CallableType[builtins.function]&
builtins.function"builtins.functionr{
__rmul__"pyspark.sql.column.Column.__rmul__K
CallableType[builtins.function]&
builtins.function"builtins.functionr{
__rdiv__"pyspark.sql.column.Column.__rdiv__K
CallableType[builtins.function]&
builtins.function"builtins.functionrÉ
__rtruediv__&pyspark.sql.column.Column.__rtruediv__K
CallableType[builtins.function]&
builtins.function"builtins.functionr{
__rmod__"pyspark.sql.column.Column.__rmod__K
CallableType[builtins.function]&
builtins.function"builtins.functionry
__pow__!pyspark.sql.column.Column.__pow__K
CallableType[builtins.function]&
builtins.function"builtins.functionr{
__rpow__"pyspark.sql.column.Column.__rpow__K
CallableType[builtins.function]&
builtins.function"builtins.functionrw
__lt__ pyspark.sql.column.Column.__lt__K
CallableType[builtins.function]&
builtins.function"builtins.functionrw
__le__ pyspark.sql.column.Column.__le__K
CallableType[builtins.function]&
builtins.function"builtins.functionrw
__ge__ pyspark.sql.column.Column.__ge__K
CallableType[builtins.function]&
builtins.function"builtins.functionrw
__gt__ pyspark.sql.column.Column.__gt__K
CallableType[builtins.function]&
builtins.function"builtins.functionrZ
_eqNullSafe_doc)pyspark.sql.column.Column._eqNullSafe_doc
builtins.str"builtins.strr

eqNullSafe$pyspark.sql.column.Column.eqNullSafeK
CallableType[builtins.function]&
builtins.function"builtins.functionry
__and__!pyspark.sql.column.Column.__and__K
CallableType[builtins.function]&
builtins.function"builtins.functionrw
__or__ pyspark.sql.column.Column.__or__K
CallableType[builtins.function]&
builtins.function"builtins.functionr

__invert__$pyspark.sql.column.Column.__invert__K
CallableType[builtins.function]&
builtins.function"builtins.functionr{
__rand__"pyspark.sql.column.Column.__rand__K
CallableType[builtins.function]&
builtins.function"builtins.functionry
__ror__!pyspark.sql.column.Column.__ror__K
CallableType[builtins.function]&
builtins.function"builtins.functionrX
_bitwiseOR_doc(pyspark.sql.column.Column._bitwiseOR_doc
builtins.str"builtins.strrZ
_bitwiseAND_doc)pyspark.sql.column.Column._bitwiseAND_doc
builtins.str"builtins.strrZ
_bitwiseXOR_doc)pyspark.sql.column.Column._bitwiseXOR_doc
builtins.str"builtins.strr}
	bitwiseOR#pyspark.sql.column.Column.bitwiseORK
CallableType[builtins.function]&
builtins.function"builtins.functionr

bitwiseAND$pyspark.sql.column.Column.bitwiseANDK
CallableType[builtins.function]&
builtins.function"builtins.functionr

bitwiseXOR$pyspark.sql.column.Column.bitwiseXORK
CallableType[builtins.function]&
builtins.function"builtins.functionrV
_contains_doc'pyspark.sql.column.Column._contains_doc
builtins.str"builtins.strrZ
_startswith_doc)pyspark.sql.column.Column._startswith_doc
builtins.str"builtins.strrV
_endswith_doc'pyspark.sql.column.Column._endswith_doc
builtins.str"builtins.strr{
contains"pyspark.sql.column.Column.containsK
CallableType[builtins.function]&
builtins.function"builtins.functionr

startswith$pyspark.sql.column.Column.startswithK
CallableType[builtins.function]&
builtins.function"builtins.functionr{
endswith"pyspark.sql.column.Column.endswithK
CallableType[builtins.function]&
builtins.function"builtins.functionrL
_asc_doc"pyspark.sql.column.Column._asc_doc
builtins.str"builtins.strrd
_asc_nulls_first_doc.pyspark.sql.column.Column._asc_nulls_first_doc
builtins.str"builtins.strrb
_asc_nulls_last_doc-pyspark.sql.column.Column._asc_nulls_last_doc
builtins.str"builtins.strrN
	_desc_doc#pyspark.sql.column.Column._desc_doc
builtins.str"builtins.strrf
_desc_nulls_first_doc/pyspark.sql.column.Column._desc_nulls_first_doc
builtins.str"builtins.strrd
_desc_nulls_last_doc.pyspark.sql.column.Column._desc_nulls_last_doc
builtins.str"builtins.strrq
ascpyspark.sql.column.Column.ascK
CallableType[builtins.function]&
builtins.function"builtins.functionrâ
asc_nulls_first)pyspark.sql.column.Column.asc_nulls_firstK
CallableType[builtins.function]&
builtins.function"builtins.functionrá
asc_nulls_last(pyspark.sql.column.Column.asc_nulls_lastK
CallableType[builtins.function]&
builtins.function"builtins.functionrs
descpyspark.sql.column.Column.descK
CallableType[builtins.function]&
builtins.function"builtins.functionrã
desc_nulls_first*pyspark.sql.column.Column.desc_nulls_firstK
CallableType[builtins.function]&
builtins.function"builtins.functionrâ
desc_nulls_last)pyspark.sql.column.Column.desc_nulls_lastK
CallableType[builtins.function]&
builtins.function"builtins.functionrR
_isNull_doc%pyspark.sql.column.Column._isNull_doc
builtins.str"builtins.strrX
_isNotNull_doc(pyspark.sql.column.Column._isNotNull_doc
builtins.str"builtins.strrw
isNull pyspark.sql.column.Column.isNullK
CallableType[builtins.function]&
builtins.function"builtins.functionr}
	isNotNull#pyspark.sql.column.Column.isNotNullK
CallableType[builtins.function]&
builtins.function"builtins.functionrs
namepyspark.sql.column.Column.nameK
CallableType[builtins.function]&
builtins.function"builtins.functionrw
astype pyspark.sql.column.Column.astypeK
CallableType[builtins.function]&
builtins.function"builtins.functionr{
__bool__"pyspark.sql.column.Column.__bool__K
CallableType[builtins.function]&
builtins.function"builtins.functionr-
_jcpyspark.sql.column.Column._jc
Any€ü
SparkDataFramepyspark.sql.dataframe.DataFrame",pyspark.sql.pandas.map_ops.PandasMapOpsMixin"3pyspark.sql.pandas.conversion.PandasConversionMixin*Å
__init__(pyspark.sql.dataframe.DataFrame.__init__"
None*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*
jdf
Any*‡
sql_ctx“
FUnion[pyspark.sql.context.SQLContext,pyspark.sql.session.SparkSession]@
pyspark.sql.context.SQLContext"pyspark.sql.context.SQLContextD
 pyspark.sql.session.SparkSession" pyspark.sql.session.SparkSession*Ÿ
sql_ctx'pyspark.sql.dataframe.DataFrame.sql_ctx"@
pyspark.sql.context.SQLContext"pyspark.sql.context.SQLContext*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame0:builtins.property`*Á
sparkSession,pyspark.sql.dataframe.DataFrame.sparkSession"D
 pyspark.sql.session.SparkSession" pyspark.sql.session.SparkSession*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame0:builtins.property`*˙
rdd#pyspark.sql.dataframe.DataFrame.rdd"i
&pyspark.rdd.RDD[pyspark.sql.types.Row].
pyspark.sql.types.Row"pyspark.sql.types.Row"pyspark.rdd.RDD*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame0:builtins.property`*Á
na"pyspark.sql.dataframe.DataFrame.na"X
*pyspark.sql.dataframe.DataFrameNaFunctions"*pyspark.sql.dataframe.DataFrameNaFunctions*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame0:builtins.property`*Ô
stat$pyspark.sql.dataframe.DataFrame.stat"\
,pyspark.sql.dataframe.DataFrameStatFunctions",pyspark.sql.dataframe.DataFrameStatFunctions*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame0:builtins.property`*Å
toJSON&pyspark.sql.dataframe.DataFrame.toJSON"N
pyspark.rdd.RDD[builtins.str]
builtins.str"builtins.str"pyspark.rdd.RDD*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*1
use_unicode
builtins.bool"builtins.bool *∆
registerTempTable1pyspark.sql.dataframe.DataFrame.registerTempTable"
None*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*&
name
builtins.str"builtins.str*¿
createTempView.pyspark.sql.dataframe.DataFrame.createTempView"
None*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*&
name
builtins.str"builtins.str*“
createOrReplaceTempView7pyspark.sql.dataframe.DataFrame.createOrReplaceTempView"
None*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*&
name
builtins.str"builtins.str*Ã
createGlobalTempView4pyspark.sql.dataframe.DataFrame.createGlobalTempView"
None*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*&
name
builtins.str"builtins.str*ﬁ
createOrReplaceGlobalTempView=pyspark.sql.dataframe.DataFrame.createOrReplaceGlobalTempView"
None*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*&
name
builtins.str"builtins.str*Â
write%pyspark.sql.dataframe.DataFrame.write"P
&pyspark.sql.readwriter.DataFrameWriter"&pyspark.sql.readwriter.DataFrameWriter*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame0:builtins.property`*á
writeStream+pyspark.sql.dataframe.DataFrame.writeStream"f
1pyspark.sql.streaming.readwriter.DataStreamWriter"1pyspark.sql.streaming.readwriter.DataStreamWriter*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame0:builtins.property`*”
schema&pyspark.sql.dataframe.DataFrame.schema"<
pyspark.sql.types.StructType"pyspark.sql.types.StructType*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame0:builtins.property`*Â
printSchema+pyspark.sql.dataframe.DataFrame.printSchema"
None*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Q
levelD
Union[builtins.int,None]
builtins.int"builtins.int
None *·
explain'pyspark.sql.dataframe.DataFrame.explain"
None*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Ç
extendedr
&Union[builtins.bool,builtins.str,None]
builtins.bool"builtins.bool
builtins.str"builtins.str
None *P
modeD
Union[builtins.str,None]
builtins.str"builtins.str
None *ó
	exceptAll)pyspark.sql.dataframe.DataFrame.exceptAll"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*M
otherB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*†
isLocal'pyspark.sql.dataframe.DataFrame.isLocal"
builtins.bool"builtins.bool*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*ø
isStreaming+pyspark.sql.dataframe.DataFrame.isStreaming"
builtins.bool"builtins.bool*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame0:builtins.property`*†
isEmpty'pyspark.sql.dataframe.DataFrame.isEmpty"
builtins.bool"builtins.bool*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*–
show$pyspark.sql.dataframe.DataFrame.show"
None*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*%
n
builtins.int"builtins.int *s
truncatec
!Union[builtins.bool,builtins.int]
builtins.bool"builtins.bool
builtins.int"builtins.int *.
vertical
builtins.bool"builtins.bool *Ù
_show_string,pyspark.sql.dataframe.DataFrame._show_string"
builtins.str"builtins.str*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*%
n
builtins.int"builtins.int *s
truncatec
!Union[builtins.bool,builtins.int]
builtins.bool"builtins.bool
builtins.int"builtins.int *.
vertical
builtins.bool"builtins.bool *ò
__repr__(pyspark.sql.dataframe.DataFrame.__repr__"
builtins.str"builtins.str*DB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Œ
_repr_html_+pyspark.sql.dataframe.DataFrame._repr_html_"D
Union[builtins.str,None]
builtins.str"builtins.str
None*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*˜

checkpoint*pyspark.sql.dataframe.DataFrame.checkpoint"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*+
eager
builtins.bool"builtins.bool *Å
localCheckpoint/pyspark.sql.dataframe.DataFrame.localCheckpoint"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*+
eager
builtins.bool"builtins.bool *Ø
withWatermark-pyspark.sql.dataframe.DataFrame.withWatermark"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*+
	eventTime
builtins.str"builtins.str*0
delayThreshold
builtins.str"builtins.str*ø
hint$pyspark.sql.dataframe.DataFrame.hint"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*&
name
builtins.str"builtins.str*÷

parameters≈
fUnion[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]],builtins.list[Unknown]]≠
HTypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]ø
=Union[builtins.bool,builtins.float,builtins.int,builtins.str]
builtins.bool"builtins.bool 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str"pyspark._typing.PrimitiveType)
builtins.list[Unknown] "builtins.list*ö
count%pyspark.sql.dataframe.DataFrame.count"
builtins.int"builtins.int*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Á
collect'pyspark.sql.dataframe.DataFrame.collect"e
$builtins.list[pyspark.sql.types.Row].
pyspark.sql.types.Row"pyspark.sql.types.Row"builtins.list*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*µ
toLocalIterator/pyspark.sql.dataframe.DataFrame.toLocalIterator"i
&typing.Iterator[pyspark.sql.types.Row].
pyspark.sql.types.Row"pyspark.sql.types.Row"typing.Iterator*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*8
prefetchPartitions
builtins.bool"builtins.bool *Á
limit%pyspark.sql.dataframe.DataFrame.limit"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*%
num
builtins.int"builtins.int*È
offset&pyspark.sql.dataframe.DataFrame.offset"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*%
num
builtins.int"builtins.int*à
take$pyspark.sql.dataframe.DataFrame.take"e
$builtins.list[pyspark.sql.types.Row].
pyspark.sql.types.Row"pyspark.sql.types.Row"builtins.list*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*%
num
builtins.int"builtins.int*à
tail$pyspark.sql.dataframe.DataFrame.tail"e
$builtins.list[pyspark.sql.types.Row].
pyspark.sql.types.Row"pyspark.sql.types.Row"builtins.list*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*%
num
builtins.int"builtins.int*ﬁ
foreach'pyspark.sql.dataframe.DataFrame.foreach"
None*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*R
fK
CallableType[builtins.function]&
builtins.function"builtins.function*
foreachPartition0pyspark.sql.dataframe.DataFrame.foreachPartition"
None*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*R
fK
CallableType[builtins.function]&
builtins.function"builtins.function*¿
cache%pyspark.sql.dataframe.DataFrame.cache"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*†
persist'pyspark.sql.dataframe.DataFrame.persist"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Z
storageLevelF
!pyspark.storagelevel.StorageLevel"!pyspark.storagelevel.StorageLevel *È
storageLevel,pyspark.sql.dataframe.DataFrame.storageLevel"F
!pyspark.storagelevel.StorageLevel"!pyspark.storagelevel.StorageLevel*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame0:builtins.property`*¯
	unpersist)pyspark.sql.dataframe.DataFrame.unpersist"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*.
blocking
builtins.bool"builtins.bool *˜
coalesce(pyspark.sql.dataframe.DataFrame.coalesce"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*/
numPartitions
builtins.int"builtins.int*∆
distinct(pyspark.sql.dataframe.DataFrame.distinct"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*˚
sampleBy(pyspark.sql.dataframe.DataFrame.sampleBy"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Ú
colË
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName*l
	fractions]
!builtins.dict[Any,builtins.float]
Any 
builtins.float"builtins.float"builtins.dict*P
seedD
Union[builtins.int,None]
builtins.int"builtins.int
None *ø
randomSplit+pyspark.sql.dataframe.DataFrame.randomSplit"É
.builtins.list[pyspark.sql.dataframe.DataFrame]B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame"builtins.list*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*]
weightsP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.list*P
seedD
Union[builtins.int,None]
builtins.int"builtins.int
None *∫
dtypes&pyspark.sql.dataframe.DataFrame.dtypes"¢
/builtins.list[Tuple[builtins.str,builtins.str]]`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.list*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame0:builtins.property`*„
columns'pyspark.sql.dataframe.DataFrame.columns"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame0:builtins.property`*Â
colRegex(pyspark.sql.dataframe.DataFrame.colRegex"6
pyspark.sql.column.Column"pyspark.sql.column.Column*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*)
colName
builtins.str"builtins.str*Ñ
to"pyspark.sql.dataframe.DataFrame.to"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*H
schema<
pyspark.sql.types.StructType"pyspark.sql.types.StructType*È
alias%pyspark.sql.dataframe.DataFrame.alias"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*'
alias
builtins.str"builtins.str*ó
	crossJoin)pyspark.sql.dataframe.DataFrame.crossJoin"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*M
otherB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Ü
join$pyspark.sql.dataframe.DataFrame.join"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*M
otherB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*•
onö
wUnion[builtins.str,builtins.list[builtins.str],pyspark.sql.column.Column,builtins.list[pyspark.sql.column.Column],None]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list6
pyspark.sql.column.Column"pyspark.sql.column.Columnq
(builtins.list[pyspark.sql.column.Column]6
pyspark.sql.column.Column"pyspark.sql.column.Column"builtins.list
None *O
howD
Union[builtins.str,None]
builtins.str"builtins.str
None *µ

	_joinAsOf)pyspark.sql.dataframe.DataFrame._joinAsOf"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*M
otherB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*ú
leftAsOfColumná
-Union[builtins.str,pyspark.sql.column.Column]
builtins.str"builtins.str6
pyspark.sql.column.Column"pyspark.sql.column.Column*ù
rightAsOfColumná
-Union[builtins.str,pyspark.sql.column.Column]
builtins.str"builtins.str6
pyspark.sql.column.Column"pyspark.sql.column.Column*•
onö
wUnion[builtins.str,builtins.list[builtins.str],pyspark.sql.column.Column,builtins.list[pyspark.sql.column.Column],None]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list6
pyspark.sql.column.Column"pyspark.sql.column.Columnq
(builtins.list[pyspark.sql.column.Column]6
pyspark.sql.column.Column"pyspark.sql.column.Column"builtins.list
None *O
howD
Union[builtins.str,None]
builtins.str"builtins.str
None *|
	tolerancek
%Union[pyspark.sql.column.Column,None]6
pyspark.sql.column.Column"pyspark.sql.column.Column
None *7
allowExactMatches
builtins.bool"builtins.bool *-
	direction
builtins.str"builtins.str *ü
sortWithinPartitions4pyspark.sql.dataframe.DataFrame.sortWithinPartitions"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*©
colsû
jUnion[builtins.str,pyspark.sql.column.Column,builtins.list[Union[builtins.str,pyspark.sql.column.Column]]]
builtins.str"builtins.str6
pyspark.sql.column.Column"pyspark.sql.column.Column◊
<builtins.list[Union[builtins.str,pyspark.sql.column.Column]]á
-Union[builtins.str,pyspark.sql.column.Column]
builtins.str"builtins.str6
pyspark.sql.column.Column"pyspark.sql.column.Column"builtins.list*
kwargs
Any*ˇ
sort$pyspark.sql.dataframe.DataFrame.sort"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*©
colsû
jUnion[builtins.str,pyspark.sql.column.Column,builtins.list[Union[builtins.str,pyspark.sql.column.Column]]]
builtins.str"builtins.str6
pyspark.sql.column.Column"pyspark.sql.column.Column◊
<builtins.list[Union[builtins.str,pyspark.sql.column.Column]]á
-Union[builtins.str,pyspark.sql.column.Column]
builtins.str"builtins.str6
pyspark.sql.column.Column"pyspark.sql.column.Column"builtins.list*
kwargs
Any*‹
_jseq%pyspark.sql.dataframe.DataFrame._jseq"
Any*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*:
cols0
typing.Sequence[Any]
Any"typing.Sequence*ò
	converterÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *»
_jmap%pyspark.sql.dataframe.DataFrame._jmap"
Any*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*A
jm9
builtins.dict[Any,Any]
Any
Any"builtins.dict*˝
_jcols&pyspark.sql.dataframe.DataFrame._jcols"
Any*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Û
colsË
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName*±

_sort_cols*pyspark.sql.dataframe.DataFrame._sort_cols"
Any*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*∫
colsØ
{typing.Sequence[Union[builtins.str,pyspark.sql.column.Column,builtins.list[Union[builtins.str,pyspark.sql.column.Column]]]]û
jUnion[builtins.str,pyspark.sql.column.Column,builtins.list[Union[builtins.str,pyspark.sql.column.Column]]]
builtins.str"builtins.str6
pyspark.sql.column.Column"pyspark.sql.column.Column◊
<builtins.list[Union[builtins.str,pyspark.sql.column.Column]]á
-Union[builtins.str,pyspark.sql.column.Column]
builtins.str"builtins.str6
pyspark.sql.column.Column"pyspark.sql.column.Column"builtins.list"typing.Sequence*c
kwargsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Ò
describe(pyspark.sql.dataframe.DataFrame.describe"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*®
colsù
/Union[builtins.str,builtins.list[builtins.str]]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*Ú
summary'pyspark.sql.dataframe.DataFrame.summary"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*,

statistics
builtins.str"builtins.str*›
first%pyspark.sql.dataframe.DataFrame.first"_
!Union[pyspark.sql.types.Row,None].
pyspark.sql.types.Row"pyspark.sql.types.Row
None*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*ÿ
__getattr__+pyspark.sql.dataframe.DataFrame.__getattr__"6
pyspark.sql.column.Column"pyspark.sql.column.Column*DB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*
builtins.str"builtins.str*Ã
__dir__'pyspark.sql.dataframe.DataFrame.__dir__"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Ω
filter&pyspark.sql.dataframe.DataFrame.filter"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*¯
	conditionË
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName*√	
unpivot'pyspark.sql.dataframe.DataFrame.unpivot"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*ø
idsµ
nUnion[TypeAlias[Union[pyspark.sql.column.Column,builtins.str]],builtins.list[Unknown],builtins.tuple[Unknown]]Ë
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName)
builtins.list[Unknown] "builtins.list+
builtins.tuple[Unknown] "builtins.tuple*—
valuesƒ
sUnion[TypeAlias[Union[pyspark.sql.column.Column,builtins.str]],builtins.list[Unknown],builtins.tuple[Unknown],None]Ë
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName)
builtins.list[Unknown] "builtins.list+
builtins.tuple[Unknown] "builtins.tuple
None*4
variableColumnName
builtins.str"builtins.str*1
valueColumnName
builtins.str"builtins.str*Ω	
melt$pyspark.sql.dataframe.DataFrame.melt"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*ø
idsµ
nUnion[TypeAlias[Union[pyspark.sql.column.Column,builtins.str]],builtins.list[Unknown],builtins.tuple[Unknown]]Ë
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName)
builtins.list[Unknown] "builtins.list+
builtins.tuple[Unknown] "builtins.tuple*—
valuesƒ
sUnion[TypeAlias[Union[pyspark.sql.column.Column,builtins.str]],builtins.list[Unknown],builtins.tuple[Unknown],None]Ë
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName)
builtins.list[Unknown] "builtins.list+
builtins.tuple[Unknown] "builtins.tuple
None*4
variableColumnName
builtins.str"builtins.str*1
valueColumnName
builtins.str"builtins.str*«
agg#pyspark.sql.dataframe.DataFrame.agg"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*à
exprs¸
IUnion[pyspark.sql.column.Column,builtins.dict[builtins.str,builtins.str]]6
pyspark.sql.column.Column"pyspark.sql.column.Columnu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict*¡
observe'pyspark.sql.dataframe.DataFrame.observe"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*∑
observation•
7Union[pyspark.sql.observation.Observation,builtins.str]J
#pyspark.sql.observation.Observation"#pyspark.sql.observation.Observation
builtins.str"builtins.str*A
exprs6
pyspark.sql.column.Column"pyspark.sql.column.Column*è
union%pyspark.sql.dataframe.DataFrame.union"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*M
otherB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*ï
unionAll(pyspark.sql.dataframe.DataFrame.unionAll"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*M
otherB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*÷
unionByName+pyspark.sql.dataframe.DataFrame.unionByName"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*M
otherB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*9
allowMissingColumns
builtins.bool"builtins.bool *ó
	intersect)pyspark.sql.dataframe.DataFrame.intersect"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*M
otherB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*ù
intersectAll,pyspark.sql.dataframe.DataFrame.intersectAll"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*M
otherB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*ï
subtract(pyspark.sql.dataframe.DataFrame.subtract"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*M
otherB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Â
dropDuplicates.pyspark.sql.dataframe.DataFrame.dropDuplicates"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*ê
subsetÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *É
dropDuplicatesWithinWatermark=pyspark.sql.dataframe.DataFrame.dropDuplicatesWithinWatermark"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*ê
subsetÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *Ë
dropna&pyspark.sql.dataframe.DataFrame.dropna"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*'
how
builtins.str"builtins.str *R
threshD
Union[builtins.int,None]
builtins.int"builtins.int
None *¶
subsetó
QUnion[builtins.str,builtins.tuple[builtins.str],builtins.list[builtins.str],None]
builtins.str"builtins.strL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *¿
corr$pyspark.sql.dataframe.DataFrame.corr" 
builtins.float"builtins.float*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*&
col1
builtins.str"builtins.str*&
col2
builtins.str"builtins.str*R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None *Í
cov#pyspark.sql.dataframe.DataFrame.cov" 
builtins.float"builtins.float*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*&
col1
builtins.str"builtins.str*&
col2
builtins.str"builtins.str*ñ
crosstab(pyspark.sql.dataframe.DataFrame.crosstab"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*&
col1
builtins.str"builtins.str*&
col2
builtins.str"builtins.str*Ó
	freqItems)pyspark.sql.dataframe.DataFrame.freqItems"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*»
colsΩ
6Union[builtins.list[builtins.str],Tuple[builtins.str]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list5
Tuple[builtins.str]
builtins.str"builtins.str*Y
supportJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *
_ipython_key_completions_9pyspark.sql.dataframe.DataFrame._ipython_key_completions_"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*˘
withColumns+pyspark.sql.dataframe.DataFrame.withColumns"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*™
colsMapú
5builtins.dict[builtins.str,pyspark.sql.column.Column]
builtins.str"builtins.str6
pyspark.sql.column.Column"pyspark.sql.column.Column"builtins.dict*∂

withColumn*pyspark.sql.dataframe.DataFrame.withColumn"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*)
colName
builtins.str"builtins.str*?
col6
pyspark.sql.column.Column"pyspark.sql.column.Column*´
withColumnRenamed1pyspark.sql.dataframe.DataFrame.withColumnRenamed"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame**
existing
builtins.str"builtins.str*%
new
builtins.str"builtins.str*ﬂ
withColumnsRenamed2pyspark.sql.dataframe.DataFrame.withColumnsRenamed"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Ç
colsMapu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict*„
withMetadata,pyspark.sql.dataframe.DataFrame.withMetadata"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*,

columnName
builtins.str"builtins.str*e
metadataW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Ê
toDF$pyspark.sql.dataframe.DataFrame.toDF"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*&
cols
builtins.str"builtins.str*«
	transform)pyspark.sql.dataframe.DataFrame.transform"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any*˚
sameSemantics-pyspark.sql.dataframe.DataFrame.sameSemantics"
builtins.bool"builtins.bool*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*M
otherB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*®
semanticHash,pyspark.sql.dataframe.DataFrame.semanticHash"
builtins.int"builtins.int*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*“

inputFiles*pyspark.sql.dataframe.DataFrame.inputFiles"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*ˇ
writeTo'pyspark.sql.dataframe.DataFrame.writeTo"T
(pyspark.sql.readwriter.DataFrameWriterV2"(pyspark.sql.readwriter.DataFrameWriterV2*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*'
table
builtins.str"builtins.str*ß
to_pandas_on_spark2pyspark.sql.dataframe.DataFrame.to_pandas_on_spark"N
#pyspark.pandas.frame.DataFrame[Any]
Any"pyspark.pandas.frame.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*æ
	index_col¨
4Union[builtins.str,builtins.list[builtins.str],None]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *ó

pandas_api*pyspark.sql.dataframe.DataFrame.pandas_api"N
#pyspark.pandas.frame.DataFrame[Any]
Any"pyspark.pandas.frame.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*æ
	index_col¨
4Union[builtins.str,builtins.list[builtins.str],None]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *ï
	to_koalas)pyspark.sql.dataframe.DataFrame.to_koalas"N
#pyspark.pandas.frame.DataFrame[Any]
Any"pyspark.pandas.frame.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*æ
	index_col¨
4Union[builtins.str,builtins.list[builtins.str],None]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None 2ü
repartition+pyspark.sql.dataframe.DataFrame.repartitionà
repartition+pyspark.sql.dataframe.DataFrame.repartition"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*/
numPartitions
builtins.int"builtins.int*Û
colsË
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName0:typing.overloadX◊
repartition+pyspark.sql.dataframe.DataFrame.repartition"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Û
colsË
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName0:typing.overloadX2…
repartitionByRange2pyspark.sql.dataframe.DataFrame.repartitionByRangeñ
repartitionByRange2pyspark.sql.dataframe.DataFrame.repartitionByRange"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*/
numPartitions
builtins.int"builtins.int*Û
colsË
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName0:typing.overloadXÂ
repartitionByRange2pyspark.sql.dataframe.DataFrame.repartitionByRange"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Û
colsË
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName0:typing.overloadX2∆
sample&pyspark.sql.dataframe.DataFrame.sampleŸ
sample&pyspark.sql.dataframe.DataFrame.sample"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*.
fraction 
builtins.float"builtins.float*P
seedD
Union[builtins.int,None]
builtins.int"builtins.int
None 0:typing.overloadX∑
sample&pyspark.sql.dataframe.DataFrame.sample"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*\
withReplacementG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*.
fraction 
builtins.float"builtins.float*P
seedD
Union[builtins.int,None]
builtins.int"builtins.int
None 0:typing.overloadX2Ω
head$pyspark.sql.dataframe.DataFrame.head
head$pyspark.sql.dataframe.DataFrame.head"_
!Union[pyspark.sql.types.Row,None].
pyspark.sql.types.Row"pyspark.sql.types.Row
None*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame0:typing.overloadXõ
head$pyspark.sql.dataframe.DataFrame.head"e
$builtins.list[pyspark.sql.types.Row].
pyspark.sql.types.Row"pyspark.sql.types.Row"builtins.list*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*#
n
builtins.int"builtins.int0:typing.overloadX2±
__getitem__+pyspark.sql.dataframe.DataFrame.__getitem__±
__getitem__+pyspark.sql.dataframe.DataFrame.__getitem__"6
pyspark.sql.column.Column"pyspark.sql.column.Column*DB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*b`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str0:typing.overloadX¿
__getitem__+pyspark.sql.dataframe.DataFrame.__getitem__"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*DB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*‰·
GUnion[pyspark.sql.column.Column,builtins.list[Any],builtins.tuple[Any]]6
pyspark.sql.column.Column"pyspark.sql.column.Column,
builtins.list[Any]
Any"builtins.list.
builtins.tuple[Any]
Any"builtins.tuple0:typing.overloadX2Ó
select&pyspark.sql.dataframe.DataFrame.selectÕ
select&pyspark.sql.dataframe.DataFrame.select"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Û
colsË
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName0:typing.overloadXÎ
select&pyspark.sql.dataframe.DataFrame.select"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*ëé
KUnion[builtins.list[pyspark.sql.column.Column],builtins.list[builtins.str]]q
(builtins.list[pyspark.sql.column.Column]6
pyspark.sql.column.Column"pyspark.sql.column.Column"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list0:typing.overloadX2˙

selectExpr*pyspark.sql.dataframe.DataFrame.selectExprá

selectExpr*pyspark.sql.dataframe.DataFrame.selectExpr"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*&
expr
builtins.str"builtins.str0:typing.overloadXµ

selectExpr*pyspark.sql.dataframe.DataFrame.selectExpr"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*T
exprJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list0:typing.overloadX2Ï
groupBy'pyspark.sql.dataframe.DataFrame.groupByÀ
groupBy'pyspark.sql.dataframe.DataFrame.groupBy">
pyspark.sql.group.GroupedData"pyspark.sql.group.GroupedData*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Û
colsË
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName0:typing.overloadXÈ
groupBy'pyspark.sql.dataframe.DataFrame.groupBy">
pyspark.sql.group.GroupedData"pyspark.sql.group.GroupedData*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*ëé
KUnion[builtins.list[pyspark.sql.column.Column],builtins.list[builtins.str]]q
(builtins.list[pyspark.sql.column.Column]6
pyspark.sql.column.Column"pyspark.sql.column.Column"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list0:typing.overloadX2Ê
rollup&pyspark.sql.dataframe.DataFrame.rollup…
rollup&pyspark.sql.dataframe.DataFrame.rollup">
pyspark.sql.group.GroupedData"pyspark.sql.group.GroupedData*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Û
colsË
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName0:typing.overloadXÁ
rollup&pyspark.sql.dataframe.DataFrame.rollup">
pyspark.sql.group.GroupedData"pyspark.sql.group.GroupedData*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*ëé
KUnion[builtins.list[pyspark.sql.column.Column],builtins.list[builtins.str]]q
(builtins.list[pyspark.sql.column.Column]6
pyspark.sql.column.Column"pyspark.sql.column.Column"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list0:typing.overloadX2⁄
cube$pyspark.sql.dataframe.DataFrame.cube≈
cube$pyspark.sql.dataframe.DataFrame.cube">
pyspark.sql.group.GroupedData"pyspark.sql.group.GroupedData*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Û
colsË
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName0:typing.overloadX„
cube$pyspark.sql.dataframe.DataFrame.cube">
pyspark.sql.group.GroupedData"pyspark.sql.group.GroupedData*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*ëé
KUnion[builtins.list[pyspark.sql.column.Column],builtins.list[builtins.str]]q
(builtins.list[pyspark.sql.column.Column]6
pyspark.sql.column.Column"pyspark.sql.column.Column"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list0:typing.overloadX2ú
fillna&pyspark.sql.dataframe.DataFrame.fillna∑
fillna&pyspark.sql.dataframe.DataFrame.fillna"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*¥
value®
STypeAlias[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]]≠
HTypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]ø
=Union[builtins.bool,builtins.float,builtins.int,builtins.str]
builtins.bool"builtins.bool 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str"pyspark._typing.PrimitiveType"pyspark.sql._typing.LiteralType*¶
subsetó
QUnion[builtins.str,builtins.tuple[builtins.str],builtins.list[builtins.str],None]
builtins.str"builtins.strL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None 0:typing.overloadXØ
fillna&pyspark.sql.dataframe.DataFrame.fillna"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*’
value…
obuiltins.dict[builtins.str,TypeAlias[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]]]
builtins.str"builtins.str®
STypeAlias[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]]≠
HTypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]ø
=Union[builtins.bool,builtins.float,builtins.int,builtins.str]
builtins.bool"builtins.bool 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str"pyspark._typing.PrimitiveType"pyspark.sql._typing.LiteralType"builtins.dict0:typing.overloadX2„(
replace'pyspark.sql.dataframe.DataFrame.replaceÑ	
replace'pyspark.sql.dataframe.DataFrame.replace"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*π

to_replace®
STypeAlias[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]]≠
HTypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]ø
=Union[builtins.bool,builtins.float,builtins.int,builtins.str]
builtins.bool"builtins.bool 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str"pyspark._typing.PrimitiveType"pyspark.sql._typing.LiteralType*Ÿ
valueÕ
MTypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str,None]]Œ
BUnion[builtins.bool,builtins.float,builtins.int,builtins.str,None]
builtins.bool"builtins.bool 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str
None")pyspark.sql._typing.OptionalPrimitiveType*ê
subsetÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None 0:typing.overloadXÍ

replace'pyspark.sql.dataframe.DataFrame.replace"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Ø

to_replaceû
bbuiltins.list[TypeAlias[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]]]®
STypeAlias[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]]≠
HTypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]ø
=Union[builtins.bool,builtins.float,builtins.int,builtins.str]
builtins.bool"builtins.bool 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str"pyspark._typing.PrimitiveType"pyspark.sql._typing.LiteralType"builtins.list*…
valueΩ
\builtins.list[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str,None]]]Õ
MTypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str,None]]Œ
BUnion[builtins.bool,builtins.float,builtins.int,builtins.str,None]
builtins.bool"builtins.bool 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str
None")pyspark.sql._typing.OptionalPrimitiveType"builtins.list*ê
subsetÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None 0:typing.overloadXΩ

replace'pyspark.sql.dataframe.DataFrame.replace"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Œ

to_replaceΩ
∞builtins.dict[TypeAlias[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]],TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str,None]]]®
STypeAlias[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]]≠
HTypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]ø
=Union[builtins.bool,builtins.float,builtins.int,builtins.str]
builtins.bool"builtins.bool 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str"pyspark._typing.PrimitiveType"pyspark.sql._typing.LiteralTypeÕ
MTypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str,None]]Œ
BUnion[builtins.bool,builtins.float,builtins.int,builtins.str,None]
builtins.bool"builtins.bool 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str
None")pyspark.sql._typing.OptionalPrimitiveType"builtins.dict*ê
subsetÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None 0:typing.overloadX˙	
replace'pyspark.sql.dataframe.DataFrame.replace"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Ø

to_replaceû
bbuiltins.list[TypeAlias[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]]]®
STypeAlias[TypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]]≠
HTypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str]]ø
=Union[builtins.bool,builtins.float,builtins.int,builtins.str]
builtins.bool"builtins.bool 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str"pyspark._typing.PrimitiveType"pyspark.sql._typing.LiteralType"builtins.list*Ÿ
valueÕ
MTypeAlias[Union[builtins.bool,builtins.float,builtins.int,builtins.str,None]]Œ
BUnion[builtins.bool,builtins.float,builtins.int,builtins.str,None]
builtins.bool"builtins.bool 
builtins.float"builtins.float
builtins.int"builtins.int
builtins.str"builtins.str
None")pyspark.sql._typing.OptionalPrimitiveType*ê
subsetÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None 0:typing.overloadX2ì
approxQuantile.pyspark.sql.dataframe.DataFrame.approxQuantileµ
approxQuantile.pyspark.sql.dataframe.DataFrame.approxQuantile"P
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.list*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*%
col
builtins.str"builtins.str*·
probabilitiesÕ
:Union[builtins.list[builtins.float],Tuple[builtins.float]]P
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.list;
Tuple[builtins.float] 
builtins.float"builtins.float*3
relativeError 
builtins.float"builtins.float0:typing.overloadXò
approxQuantile.pyspark.sql.dataframe.DataFrame.approxQuantile"è
,builtins.list[builtins.list[builtins.float]]P
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.list"builtins.list*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*«
colΩ
6Union[builtins.list[builtins.str],Tuple[builtins.str]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list5
Tuple[builtins.str]
builtins.str"builtins.str*·
probabilitiesÕ
:Union[builtins.list[builtins.float],Tuple[builtins.float]]P
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.list;
Tuple[builtins.float] 
builtins.float"builtins.float*3
relativeError 
builtins.float"builtins.float0:typing.overloadX2ˆ
drop$pyspark.sql.dataframe.DataFrame.drop…
drop$pyspark.sql.dataframe.DataFrame.drop"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*Û
colsË
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName0:typing.overloadX˚
drop$pyspark.sql.dataframe.DataFrame.drop"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*L
selfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*&
cols
builtins.str"builtins.str0:typing.overloadXr
orderBy'pyspark.sql.dataframe.DataFrame.orderByK
CallableType[builtins.function]&
builtins.function"builtins.functionr{
where%pyspark.sql.dataframe.DataFrame.whereK
CallableType[builtins.function]&
builtins.function"builtins.functionrí
groupby'pyspark.sql.dataframe.DataFrame.groupby^
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.functionrè
drop_duplicates/pyspark.sql.dataframe.DataFrame.drop_duplicatesK
CallableType[builtins.function]&
builtins.function"builtins.functionr∞
_sql_ctx(pyspark.sql.dataframe.DataFrame._sql_ctxz
*Union[pyspark.sql.context.SQLContext,None]@
pyspark.sql.context.SQLContext"pyspark.sql.context.SQLContext
Nonerz
_session(pyspark.sql.dataframe.DataFrame._sessionD
 pyspark.sql.session.SparkSession" pyspark.sql.session.SparkSessionrh
_sc#pyspark.sql.dataframe.DataFrame._sc<
pyspark.context.SparkContext"pyspark.context.SparkContextr5
_jdf$pyspark.sql.dataframe.DataFrame._jdf
AnyrV
	is_cached)pyspark.sql.dataframe.DataFrame.is_cached
builtins.bool"builtins.boolr®
_schema'pyspark.sql.dataframe.DataFrame._schemat
(Union[pyspark.sql.types.StructType,None]<
pyspark.sql.types.StructType"pyspark.sql.types.StructType
Noner‰
	_lazy_rdd)pyspark.sql.dataframe.DataFrame._lazy_rdd´
2Union[pyspark.rdd.RDD[pyspark.sql.types.Row],None]i
&pyspark.rdd.RDD[pyspark.sql.types.Row].
pyspark.sql.types.Row"pyspark.sql.types.Row"pyspark.rdd.RDD
Nonerh
_support_repr_html2pyspark.sql.dataframe.DataFrame._support_repr_html
builtins.bool"builtins.boolü¸
Seriespyspark.pandas.series.Series"pyspark.pandas.generic.Frame"!pyspark.pandas.base.IndexOpsMixin*â
__init__%pyspark.pandas.series.Series.__init__*
self*

data *
index *
dtype *

name *

copy *
fastpath *…
_psdf"pyspark.pandas.series.Series._psdf"N
#pyspark.pandas.frame.DataFrame[Any]
Any"pyspark.pandas.frame.DataFrame*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series0:builtins.property`*—
	_internal&pyspark.pandas.series.Series._internal"N
%pyspark.pandas.internal.InternalFrame"%pyspark.pandas.internal.InternalFrame*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series0:builtins.property`*∂
_column_label*pyspark.pandas.series.Series._column_label"™
*Union[TypeAlias[builtins.tuple[Any]],None]p
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label
None*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series0:builtins.property`*ÿ
_update_anchor+pyspark.pandas.series.Series._update_anchor"
None*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*X
psdfN
#pyspark.pandas.frame.DataFrame[Any]
Any"pyspark.pandas.frame.DataFrame*¢
_with_new_scol+pyspark.pandas.series.Series._with_new_scol"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*@
scol6
pyspark.sql.column.Column"pyspark.sql.column.Column*ù
fieldè
1Union[pyspark.pandas.internal.InternalField,None]N
%pyspark.pandas.internal.InternalField"%pyspark.pandas.internal.InternalField
None *™
dtypes#pyspark.pandas.series.Series.dtypes"¨
ITypeAlias[Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype]]æ
>Union[numpy.dtype[Any],pandas.core.dtypes.base.ExtensionDtype](
numpy.dtype[Any]
Any"numpy.dtypeP
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype"pyspark.pandas._typing.Dtype*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series0:builtins.property`*É
axes!pyspark.pandas.series.Series.axes"â
0builtins.list[pyspark.pandas.indexes.base.Index]F
!pyspark.pandas.indexes.base.Index"!pyspark.pandas.indexes.base.Index"builtins.list*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series0:builtins.property`*Â
add pyspark.pandas.series.Series.add"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*§

fill_valueë
/Union[builtins.int,builtins.str,builtins.float]
builtins.int"builtins.int
builtins.str"builtins.str 
builtins.float"builtins.float *Á
radd!pyspark.pandas.series.Series.radd"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*§

fill_valueë
/Union[builtins.int,builtins.str,builtins.float]
builtins.int"builtins.int
builtins.str"builtins.str 
builtins.float"builtins.float *æ
div pyspark.pandas.series.Series.div"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*¿
rdiv!pyspark.pandas.series.Series.rdiv"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*∆
truediv$pyspark.pandas.series.Series.truediv"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*»
rtruediv%pyspark.pandas.series.Series.rtruediv"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*æ
mul pyspark.pandas.series.Series.mul"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*¿
rmul!pyspark.pandas.series.Series.rmul"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*æ
sub pyspark.pandas.series.Series.sub"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*¿
rsub!pyspark.pandas.series.Series.rsub"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*æ
mod pyspark.pandas.series.Series.mod"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*¿
rmod!pyspark.pandas.series.Series.rmod"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*æ
pow pyspark.pandas.series.Series.pow"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*¿
rpow!pyspark.pandas.series.Series.rpow"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*»
floordiv%pyspark.pandas.series.Series.floordiv"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any* 
	rfloordiv&pyspark.pandas.series.Series.rfloordiv"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*º
eqpyspark.pandas.series.Series.eq"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*º
gtpyspark.pandas.series.Series.gt"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*º
gepyspark.pandas.series.Series.ge"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*º
ltpyspark.pandas.series.Series.lt"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*º
lepyspark.pandas.series.Series.le"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*º
nepyspark.pandas.series.Series.ne"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*·
divmod#pyspark.pandas.series.Series.divmod"Ê
JTuple[pyspark.pandas.series.Series[Any],pyspark.pandas.series.Series[Any]]J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.SeriesJ
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*„
rdivmod$pyspark.pandas.series.Series.rdivmod"Ê
JTuple[pyspark.pandas.series.Series[Any],pyspark.pandas.series.Series[Any]]J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.SeriesJ
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
other
Any*œ
between$pyspark.pandas.series.Series.between"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
left
Any*
right
Any*t
	inclusivec
!Union[builtins.bool,builtins.str]
builtins.bool"builtins.bool
builtins.str"builtins.str *⁄
cov pyspark.pandas.series.Series.cov" 
builtins.float"builtins.float*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*U
otherJ
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*W
min_periodsD
Union[builtins.int,None]
builtins.int"builtins.int
None *(
ddof
builtins.int"builtins.int *º
map pyspark.pandas.series.Series.map"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*∏
argÆ
\Union[builtins.dict[Any,Any],CallableType[builtins.function],pandas.core.series.Series[Any]]9
builtins.dict[Any,Any]
Any
Any"builtins.dictK
CallableType[builtins.function]&
builtins.function"builtins.functionD
pandas.core.series.Series[Any]
Any"pandas.core.series.Series*U
	na_actionD
Union[builtins.str,None]
builtins.str"builtins.str
None *∞
shape"pyspark.pandas.series.Series.shape"5
Tuple[builtins.int]
builtins.int"builtins.int*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series0:builtins.property`*î
rename#pyspark.pandas.series.Series.rename"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*Ã
indexæ
`Union[TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]],CallableType[builtins.function],None]Ä
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.NameK
CallableType[builtins.function]&
builtins.function"builtins.function
None *
kwargs
Any*í
rename_axis(pyspark.pandas.series.Series.rename_axis"á
-Union[pyspark.pandas.series.Series[Any],None]J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series
None*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*4
mapper&
Union[Any,None]
Any
None *3
index&
Union[Any,None]
Any
None *-
inplace
builtins.bool"builtins.bool *¡
index"pyspark.pandas.series.Series.index"F
!pyspark.pandas.indexes.base.Index"!pyspark.pandas.indexes.base.Index*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series0:builtins.property`*°
	is_unique&pyspark.pandas.series.Series.is_unique"
builtins.bool"builtins.bool*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series0:builtins.property`*À

reset_index(pyspark.pandas.series.Series.reset_index"˚
QUnion[pyspark.pandas.series.Series[Any],pyspark.pandas.frame.DataFrame[Any],None]J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.SeriesN
#pyspark.pandas.frame.DataFrame[Any]
Any"pyspark.pandas.frame.DataFrame
None*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*∫
level¨
zUnion[builtins.int,TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]],typing.Sequence[Union[builtins.int,Unknown]],None]
builtins.int"builtins.intÄ
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.NameÄ
,typing.Sequence[Union[builtins.int,Unknown]]?
Union[builtins.int,Unknown]
builtins.int"builtins.int "typing.Sequence
None **
drop
builtins.bool"builtins.bool *ƒ
name∑
.Union[Any,TypeAlias[builtins.tuple[Any]],None]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label
None *-
inplace
builtins.bool"builtins.bool *ˇ
to_frame%pyspark.pandas.series.Series.to_frame"N
#pyspark.pandas.frame.DataFrame[Any]
Any"pyspark.pandas.frame.DataFrame*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*ƒ
name∑
.Union[Any,TypeAlias[builtins.tuple[Any]],None]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label
None *µ
	to_string&pyspark.pandas.series.Series.to_string"D
Union[builtins.str,None]
builtins.str"builtins.str
None*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*Ä
bufu
#Union[typing.IO[builtins.str],None]B
typing.IO[builtins.str]
builtins.str"builtins.str"	typing.IO
None **
na_rep
builtins.str"builtins.str *õ
float_formatÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *,
header
builtins.bool"builtins.bool *+
index
builtins.bool"builtins.bool *,
length
builtins.bool"builtins.bool *+
dtype
builtins.bool"builtins.bool **
name
builtins.bool"builtins.bool *T
max_rowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *ç
to_clipboard)pyspark.pandas.series.Series.to_clipboard"
None*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*+
excel
builtins.bool"builtins.bool *O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *
kwargs
Any*Õ
to_dict$pyspark.pandas.series.Series.to_dict";
typing.Mapping[Any,Any]
Any
Any"typing.Mapping*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*(
into
	Type[Any]
Any"type *Ò
to_latex%pyspark.pandas.series.Series.to_latex"D
Union[builtins.str,None]
builtins.str"builtins.str
None*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*Ä
bufu
#Union[typing.IO[builtins.str],None]B
typing.IO[builtins.str]
builtins.str"builtins.str"	typing.IO
None *«
columns∑
OUnion[builtins.list[TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]],None]◊
Cbuiltins.list[TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]]Ä
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.Name"builtins.list
None *U
	col_spaceD
Union[builtins.int,None]
builtins.int"builtins.int
None *,
header
builtins.bool"builtins.bool *+
index
builtins.bool"builtins.bool **
na_rep
builtins.str"builtins.str *ñ

formattersÉ
ûUnion[builtins.list[CallableType[builtins.function]],builtins.dict[TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]],CallableType[builtins.function]],None]å
.builtins.list[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.listƒ
cbuiltins.dict[TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]],CallableType[builtins.function]]Ä
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.NameK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict
None *õ
float_formatÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *W
sparsifyG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *1
index_names
builtins.bool"builtins.bool */
	bold_rows
builtins.bool"builtins.bool *Y
column_formatD
Union[builtins.str,None]
builtins.str"builtins.str
None *X
	longtableG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
escapeG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
decimal
builtins.str"builtins.str *Z
multicolumnG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *^
multicolumn_formatD
Union[builtins.str,None]
builtins.str"builtins.str
None *W
multirowG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *∞
	to_pandas&pyspark.pandas.series.Series.to_pandas"D
pandas.core.series.Series[Any]
Any"pandas.core.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*≤

_to_pandas'pyspark.pandas.series.Series._to_pandas"D
pandas.core.series.Series[Any]
Any"pandas.core.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*î
to_list$pyspark.pandas.series.Series.to_list",
builtins.list[Any]
Any"builtins.list*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*©

duplicated'pyspark.pandas.series.Series.duplicated"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*o
keepc
!Union[builtins.bool,builtins.str]
builtins.bool"builtins.bool
builtins.str"builtins.str *†
drop_duplicates,pyspark.pandas.series.Series.drop_duplicates"á
-Union[pyspark.pandas.series.Series[Any],None]J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series
None*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*o
keepc
!Union[builtins.bool,builtins.str]
builtins.bool"builtins.bool
builtins.str"builtins.str *-
inplace
builtins.bool"builtins.bool *°
reindex$pyspark.pandas.series.Series.reindex"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*3
index&
Union[Any,None]
Any
None *8

fill_value&
Union[Any,None]
Any
None *∑
reindex_like)pyspark.pandas.series.Series.reindex_like"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*¯
otherÏ
LUnion[pyspark.pandas.series.Series[Any],pyspark.pandas.frame.DataFrame[Any]]J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.SeriesN
#pyspark.pandas.frame.DataFrame[Any]
Any"pyspark.pandas.frame.DataFrame*ˆ
fillna#pyspark.pandas.series.Series.fillna"á
-Union[pyspark.pandas.series.Series[Any],None]J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series
None*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*3
value&
Union[Any,None]
Any
None *R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None *{
axiso
%Union[builtins.int,builtins.str,None]
builtins.int"builtins.int
builtins.str"builtins.str
None *-
inplace
builtins.bool"builtins.bool *Q
limitD
Union[builtins.int,None]
builtins.int"builtins.int
None *Á
_fillna$pyspark.pandas.series.Series._fillna"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*3
value&
Union[Any,None]
Any
None *R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None *{
axiso
%Union[builtins.int,builtins.str,None]
builtins.int"builtins.int
builtins.str"builtins.str
None *Q
limitD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ÿ
	part_cols«
Ityping.Sequence[TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]]Ë
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName"typing.Sequence *Ó
interpolate(pyspark.pandas.series.Series.interpolate"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series**
method
builtins.str"builtins.str *Q
limitD
Union[builtins.int,None]
builtins.int"builtins.int
None *[
limit_directionD
Union[builtins.str,None]
builtins.str"builtins.str
None *V

limit_areaD
Union[builtins.str,None]
builtins.str"builtins.str
None *
_interpolate)pyspark.pandas.series.Series._interpolate"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series**
method
builtins.str"builtins.str *Q
limitD
Union[builtins.int,None]
builtins.int"builtins.int
None *[
limit_directionD
Union[builtins.str,None]
builtins.str"builtins.str
None *V

limit_areaD
Union[builtins.str,None]
builtins.str"builtins.str
None *
dropna#pyspark.pandas.series.Series.dropna"á
-Union[pyspark.pandas.series.Series[Any],None]J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series
None*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*ª
axisÆ
+TypeAlias[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"pyspark.pandas._typing.Axis *-
inplace
builtins.bool"builtins.bool *
kwargs
Any*≈
clip!pyspark.pandas.series.Series.clip"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*s
lowerf
"Union[builtins.float,builtins.int] 
builtins.float"builtins.float
builtins.int"builtins.int *s
upperf
"Union[builtins.float,builtins.int] 
builtins.float"builtins.float
builtins.int"builtins.int *-
inplace
builtins.bool"builtins.bool *ù
drop!pyspark.pandas.series.Series.drop"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*¢
labelsì
WUnion[TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]],builtins.list[Unknown],None]Ä
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.Name)
builtins.list[Unknown] "builtins.list
None *°
indexì
WUnion[TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]],builtins.list[Unknown],None]Ä
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.Name)
builtins.list[Unknown] "builtins.list
None *£
columnsì
WUnion[TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]],builtins.list[Unknown],None]Ä
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.Name)
builtins.list[Unknown] "builtins.list
None *Q
levelD
Union[builtins.int,None]
builtins.int"builtins.int
None *-
inplace
builtins.bool"builtins.bool *„
_drop"pyspark.pandas.series.Series._drop"ç
/Union[pyspark.pandas.frame.DataFrame[Any],None]N
#pyspark.pandas.frame.DataFrame[Any]
Any"pyspark.pandas.frame.DataFrame
None*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*¢
labelsì
WUnion[TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]],builtins.list[Unknown],None]Ä
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.Name)
builtins.list[Unknown] "builtins.list
None *°
indexì
WUnion[TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]],builtins.list[Unknown],None]Ä
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.Name)
builtins.list[Unknown] "builtins.list
None *Q
levelD
Union[builtins.int,None]
builtins.int"builtins.int
None *-
inplace
builtins.bool"builtins.bool *£
columnsì
WUnion[TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]],builtins.list[Unknown],None]Ä
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.Name)
builtins.list[Unknown] "builtins.list
None *”
head!pyspark.pandas.series.Series.head"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*%
n
builtins.int"builtins.int *Í
last!pyspark.pandas.series.Series.last"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*ª
offsetÆ
:Union[builtins.str,pandas._libs.tslibs.offsets.DateOffset]
builtins.str"builtins.strP
&pandas._libs.tslibs.offsets.DateOffset"&pandas._libs.tslibs.offsets.DateOffset*Ï
first"pyspark.pandas.series.Series.first"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*ª
offsetÆ
:Union[builtins.str,pandas._libs.tslibs.offsets.DateOffset]
builtins.str"builtins.strP
&pandas._libs.tslibs.offsets.DateOffset"&pandas._libs.tslibs.offsets.DateOffset*∞
unique#pyspark.pandas.series.Series.unique"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*Ω
sort_values(pyspark.pandas.series.Series.sort_values"á
-Union[pyspark.pandas.series.Series[Any],None]J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series
None*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*/
	ascending
builtins.bool"builtins.bool *-
inplace
builtins.bool"builtins.bool */
na_position
builtins.str"builtins.str *2
ignore_index
builtins.bool"builtins.bool *‡

sort_index'pyspark.pandas.series.Series.sort_index"á
-Union[pyspark.pandas.series.Series[Any],None]J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series
None*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*ª
axisÆ
+TypeAlias[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"pyspark.pandas._typing.Axis *∫
level¨
4Union[builtins.int,builtins.list[builtins.int],None]
builtins.int"builtins.intJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list
None */
	ascending
builtins.bool"builtins.bool *-
inplace
builtins.bool"builtins.bool *(
kind
builtins.str"builtins.str */
na_position
builtins.str"builtins.str *2
ignore_index
builtins.bool"builtins.bool *÷
	swaplevel&pyspark.pandas.series.Series.swaplevel"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*˜
iÌ
HUnion[builtins.int,TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]]
builtins.int"builtins.intÄ
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.Name *˜
jÌ
HUnion[builtins.int,TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]]
builtins.int"builtins.intÄ
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.Name **
copy
builtins.bool"builtins.bool *“
swapaxes%pyspark.pandas.series.Series.swapaxes"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*∂
iÆ
+TypeAlias[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"pyspark.pandas._typing.Axis*∂
jÆ
+TypeAlias[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"pyspark.pandas._typing.Axis**
copy
builtins.bool"builtins.bool *‚

add_prefix'pyspark.pandas.series.Series.add_prefix"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*(
prefix
builtins.str"builtins.str*‚

add_suffix'pyspark.pandas.series.Series.add_suffix"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*(
suffix
builtins.str"builtins.str*≥
autocorr%pyspark.pandas.series.Series.autocorr" 
builtins.float"builtins.float*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*'
lag
builtins.int"builtins.int *ﬁ
corr!pyspark.pandas.series.Series.corr" 
builtins.float"builtins.float*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*U
otherJ
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series**
method
builtins.str"builtins.str *W
min_periodsD
Union[builtins.int,None]
builtins.int"builtins.int
None *›
	nsmallest&pyspark.pandas.series.Series.nsmallest"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*%
n
builtins.int"builtins.int *€
nlargest%pyspark.pandas.series.Series.nlargest"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*%
n
builtins.int"builtins.int *˜
append#pyspark.pandas.series.Series.append"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*Y
	to_appendJ
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*2
ignore_index
builtins.bool"builtins.bool *6
verify_integrity
builtins.bool"builtins.bool *î
sample#pyspark.pandas.series.Series.sample"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*M
nD
Union[builtins.int,None]
builtins.int"builtins.int
None *V
fracJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *-
replace
builtins.bool"builtins.bool *X
random_stateD
Union[builtins.int,None]
builtins.int"builtins.int
None *2
ignore_index
builtins.bool"builtins.bool *a
hist!pyspark.pandas.series.Series.hist*
self*

bins *
kwds0:typing.no_type_check*÷
apply"pyspark.pandas.series.Series.apply"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*<
args0
typing.Sequence[Any]
Any"typing.Sequence *
kwds
Any*ı	
	aggregate&pyspark.pandas.series.Series.aggregate"›
∂Union[TypeAlias[Union[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]],pyspark.pandas.series.Series[Any]]”
çTypeAlias[Union[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]]ü
ÇUnion[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool
builtins.str"builtins.str 
builtins.bytes"builtins.bytes$
_decimal.Decimal"_decimal.Decimal
datetime.date"datetime.date&
datetime.datetime"datetime.datetime
None"pyspark.pandas._typing.ScalarJ
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*®
funcù
/Union[builtins.str,builtins.list[builtins.str]]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*ﬁ
	transpose&pyspark.pandas.series.Series.transpose"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
args
Any*
kwargs
Any*Ç
	transform&pyspark.pandas.series.Series.transform"Ï
LUnion[pyspark.pandas.series.Series[Any],pyspark.pandas.frame.DataFrame[Any]]J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.SeriesN
#pyspark.pandas.frame.DataFrame[Any]
Any"pyspark.pandas.frame.DataFrame*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*¿
funcµ
UUnion[CallableType[builtins.function],builtins.list[CallableType[builtins.function]]]K
CallableType[builtins.function]&
builtins.function"builtins.functionå
.builtins.list[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.list*ª
axisÆ
+TypeAlias[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"pyspark.pandas._typing.Axis *
args
Any*
kwargs
Any*‹
round"pyspark.pandas.series.Series.round"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*,
decimals
builtins.int"builtins.int *¥

quantile%pyspark.pandas.series.Series.quantile"›
∂Union[TypeAlias[Union[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]],pyspark.pandas.series.Series[Any]]”
çTypeAlias[Union[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]]ü
ÇUnion[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool
builtins.str"builtins.str 
builtins.bytes"builtins.bytes$
_decimal.Decimal"_decimal.Decimal
datetime.date"datetime.date&
datetime.datetime"datetime.datetime
None"pyspark.pandas._typing.ScalarJ
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*ª
q±
5Union[builtins.float,typing.Iterable[builtins.float]] 
builtins.float"builtins.floatT
typing.Iterable[builtins.float] 
builtins.float"builtins.float"typing.Iterable *,
accuracy
builtins.int"builtins.int *Ê
rank!pyspark.pandas.series.Series.rank"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series**
method
builtins.str"builtins.str */
	ascending
builtins.bool"builtins.bool *[
numeric_onlyG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Á
_rank"pyspark.pandas.series.Series._rank"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series**
method
builtins.str"builtins.str */
	ascending
builtins.bool"builtins.bool *Ÿ
	part_cols«
Ityping.Sequence[TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]]Ë
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName"typing.Sequence *¡
filter#pyspark.pandas.series.Series.filter"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*m
items`
 Union[typing.Sequence[Any],None]0
typing.Sequence[Any]
Any"typing.Sequence
None *P
likeD
Union[builtins.str,None]
builtins.str"builtins.str
None *Q
regexD
Union[builtins.str,None]
builtins.str"builtins.str
None *{
axiso
%Union[builtins.int,builtins.str,None]
builtins.int"builtins.int
builtins.str"builtins.str
None *‘
describe%pyspark.pandas.series.Series.describe"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*ù
percentilesâ
)Union[builtins.list[builtins.float],None]P
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.list
None *Ÿ
diff!pyspark.pandas.series.Series.diff"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*+
periods
builtins.int"builtins.int *µ
_diff"pyspark.pandas.series.Series._diff"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*)
periods
builtins.int"builtins.int*Ÿ
	part_cols«
Ityping.Sequence[TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]]Ë
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName"typing.Sequence *Ô
idxmax#pyspark.pandas.series.Series.idxmax"[
Union[builtins.tuple[Any],Any].
builtins.tuple[Any]
Any"builtins.tuple
Any*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*,
skipna
builtins.bool"builtins.bool *Ô
idxmin#pyspark.pandas.series.Series.idxmin"[
Union[builtins.tuple[Any],Any].
builtins.tuple[Any]
Any"builtins.tuple
Any*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*,
skipna
builtins.bool"builtins.bool *Ã

pop pyspark.pandas.series.Series.pop"›
∂Union[pyspark.pandas.series.Series[Any],TypeAlias[Union[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]]]J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series”
çTypeAlias[Union[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]]ü
ÇUnion[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool
builtins.str"builtins.str 
builtins.bytes"builtins.bytes$
_decimal.Decimal"_decimal.Decimal
datetime.date"datetime.date&
datetime.datetime"datetime.datetime
None"pyspark.pandas._typing.Scalar*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*ã
itemÄ
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.Name*ÿ
copy!pyspark.pandas.series.Series.copy"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series**
deep
builtins.bool"builtins.bool *⁄
mode!pyspark.pandas.series.Series.mode"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*,
dropna
builtins.bool"builtins.bool *®
keys!pyspark.pandas.series.Series.keys"F
!pyspark.pandas.indexes.base.Index"!pyspark.pandas.indexes.base.Index*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*Ê
replace$pyspark.pandas.series.Series.replace"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*ê

to_replace˝
MUnion[Any,builtins.list[Any],builtins.tuple[Any],builtins.dict[Any,Any],None]
Any,
builtins.list[Any]
Any"builtins.list.
builtins.tuple[Any]
Any"builtins.tuple9
builtins.dict[Any,Any]
Any
Any"builtins.dict
None *¨
valueû
2Union[builtins.list[Any],builtins.tuple[Any],None],
builtins.list[Any]
Any"builtins.list.
builtins.tuple[Any]
Any"builtins.tuple
None *p
regexc
!Union[builtins.str,builtins.bool]
builtins.str"builtins.str
builtins.bool"builtins.bool *≈
update#pyspark.pandas.series.Series.update"
None*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*U
otherJ
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*ö
where"pyspark.pandas.series.Series.where"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*T
condJ
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*
other
Any *ò
mask!pyspark.pandas.series.Series.mask"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*T
condJ
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*
other
Any *à
xspyspark.pandas.series.Series.xs"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*ä
keyÄ
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.Name*Q
levelD
Union[builtins.int,None]
builtins.int"builtins.int
None *Â

pct_change'pyspark.pandas.series.Series.pct_change"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*+
periods
builtins.int"builtins.int *ï
combine_first*pyspark.pandas.series.Series.combine_first"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*U
otherJ
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*π

dot pyspark.pandas.series.Series.dot"›
∂Union[TypeAlias[Union[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]],pyspark.pandas.series.Series[Any]]”
çTypeAlias[Union[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]]ü
ÇUnion[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool
builtins.str"builtins.str 
builtins.bytes"builtins.bytes$
_decimal.Decimal"_decimal.Decimal
datetime.date"datetime.date&
datetime.datetime"datetime.datetime
None"pyspark.pandas._typing.ScalarJ
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*¯
otherÏ
LUnion[pyspark.pandas.series.Series[Any],pyspark.pandas.frame.DataFrame[Any]]J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.SeriesN
#pyspark.pandas.frame.DataFrame[Any]
Any"pyspark.pandas.frame.DataFrame*∂


__matmul__'pyspark.pandas.series.Series.__matmul__"›
∂Union[TypeAlias[Union[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]],pyspark.pandas.series.Series[Any]]”
çTypeAlias[Union[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]]ü
ÇUnion[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool
builtins.str"builtins.str 
builtins.bytes"builtins.bytes$
_decimal.Decimal"_decimal.Decimal
datetime.date"datetime.date&
datetime.datetime"datetime.datetime
None"pyspark.pandas._typing.ScalarJ
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¨©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*ÔÏ
LUnion[pyspark.pandas.series.Series[Any],pyspark.pandas.frame.DataFrame[Any]]J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.SeriesN
#pyspark.pandas.frame.DataFrame[Any]
Any"pyspark.pandas.frame.DataFrame*‰
repeat#pyspark.pandas.series.Series.repeat"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*±
repeats£
5Union[builtins.int,pyspark.pandas.series.Series[Any]]
builtins.int"builtins.intJ
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*•	
asof!pyspark.pandas.series.Series.asof"›
∂Union[TypeAlias[Union[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]],pyspark.pandas.series.Series[Any]]”
çTypeAlias[Union[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]]ü
ÇUnion[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool
builtins.str"builtins.str 
builtins.bytes"builtins.bytes$
_decimal.Decimal"_decimal.Decimal
datetime.date"datetime.date&
datetime.datetime"datetime.datetime
None"pyspark.pandas._typing.ScalarJ
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*c
whereX
Union[Any,builtins.list[Any]]
Any,
builtins.list[Any]
Any"builtins.list*Ä
mad pyspark.pandas.series.Series.mad" 
builtins.float"builtins.float*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*·
unstack$pyspark.pandas.series.Series.unstack"N
#pyspark.pandas.frame.DataFrame[Any]
Any"pyspark.pandas.frame.DataFrame*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*)
level
builtins.int"builtins.int *∂
item!pyspark.pandas.series.Series.item"”
çTypeAlias[Union[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]]ü
ÇUnion[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool
builtins.str"builtins.str 
builtins.bytes"builtins.bytes$
_decimal.Decimal"_decimal.Decimal
datetime.date"datetime.date&
datetime.datetime"datetime.datetime
None"pyspark.pandas._typing.Scalar*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*ö
items"pyspark.pandas.series.Series.items"µ
Ptyping.Iterable[Tuple[TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]],Any]]œ
?Tuple[TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]],Any]Ä
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.Name
Any"typing.Iterable*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*¢
	iteritems&pyspark.pandas.series.Series.iteritems"µ
Ptyping.Iterable[Tuple[TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]],Any]]œ
?Tuple[TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]],Any]Ä
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.Name
Any"typing.Iterable*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*€
	droplevel&pyspark.pandas.series.Series.droplevel"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*¢
levelñ
sUnion[builtins.int,TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]],builtins.list[Union[builtins.int,Unknown]]]
builtins.int"builtins.intÄ
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.Name|
*builtins.list[Union[builtins.int,Unknown]]?
Union[builtins.int,Unknown]
builtins.int"builtins.int "builtins.list*”
tail!pyspark.pandas.series.Series.tail"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*%
n
builtins.int"builtins.int *≤
explode$pyspark.pandas.series.Series.explode"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*≤
argsort$pyspark.pandas.series.Series.argsort"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*Ó
argmax#pyspark.pandas.series.Series.argmax"
builtins.int"builtins.int*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*ª
axisÆ
+TypeAlias[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"pyspark.pandas._typing.Axis *,
skipna
builtins.bool"builtins.bool *Ó
argmin#pyspark.pandas.series.Series.argmin"
builtins.int"builtins.int*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*ª
axisÆ
+TypeAlias[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"pyspark.pandas._typing.Axis *,
skipna
builtins.bool"builtins.bool *Ò
compare$pyspark.pandas.series.Series.compare"N
#pyspark.pandas.frame.DataFrame[Any]
Any"pyspark.pandas.frame.DataFrame*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*U
otherJ
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*0

keep_shape
builtins.bool"builtins.bool *0

keep_equal
builtins.bool"builtins.bool *Ã
searchsorted)pyspark.pandas.series.Series.searchsorted"
builtins.int"builtins.int*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
value
Any*(
side
builtins.str"builtins.str *Á
align"pyspark.pandas.series.Series.align"¥
uTuple[pyspark.pandas.series.Series[Any],Union[pyspark.pandas.frame.DataFrame[Any],pyspark.pandas.series.Series[Any]]]J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.SeriesÏ
LUnion[pyspark.pandas.frame.DataFrame[Any],pyspark.pandas.series.Series[Any]]N
#pyspark.pandas.frame.DataFrame[Any]
Any"pyspark.pandas.frame.DataFrameJ
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*¯
otherÏ
LUnion[pyspark.pandas.frame.DataFrame[Any],pyspark.pandas.series.Series[Any]]N
#pyspark.pandas.frame.DataFrame[Any]
Any"pyspark.pandas.frame.DataFrameJ
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*(
join
builtins.str"builtins.str *{
axiso
%Union[builtins.int,builtins.str,None]
builtins.int"builtins.int
builtins.str"builtins.str
None **
copy
builtins.bool"builtins.bool * 
between_time)pyspark.pandas.series.Series.between_time"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*s

start_timec
!Union[datetime.time,builtins.str]
datetime.time"datetime.time
builtins.str"builtins.str*q
end_timec
!Union[datetime.time,builtins.str]
datetime.time"datetime.time
builtins.str"builtins.str*3
include_start
builtins.bool"builtins.bool *1
include_end
builtins.bool"builtins.bool *ª
axisÆ
+TypeAlias[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"pyspark.pandas._typing.Axis *ã
at_time$pyspark.pandas.series.Series.at_time"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*m
timec
!Union[datetime.time,builtins.str]
datetime.time"datetime.time
builtins.str"builtins.str**
asof
builtins.bool"builtins.bool *ª
axisÆ
+TypeAlias[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"pyspark.pandas._typing.Axis *º
_cum!pyspark.pandas.series.Series._cum"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function**
skipna
builtins.bool"builtins.bool*Ÿ
	part_cols«
Ityping.Sequence[TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]]Ë
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName"typing.Sequence */
	ascending
builtins.bool"builtins.bool *∫
_cumsum$pyspark.pandas.series.Series._cumsum"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series**
skipna
builtins.bool"builtins.bool*Ÿ
	part_cols«
Ityping.Sequence[TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]]Ë
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName"typing.Sequence *º
_cumprod%pyspark.pandas.series.Series._cumprod"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series**
skipna
builtins.bool"builtins.bool*Ÿ
	part_cols«
Ityping.Sequence[TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]]Ë
8TypeAlias[Union[pyspark.sql.column.Column,builtins.str]]á
-Union[pyspark.sql.column.Column,builtins.str]6
pyspark.sql.column.Column"pyspark.sql.column.Column
builtins.str"builtins.str" pyspark.sql._typing.ColumnOrName"typing.Sequence *œ
_apply_series_op-pyspark.pandas.series.Series._apply_series_op"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*S
opK
CallableType[builtins.function]&
builtins.function"builtins.function*4
should_resolve
builtins.bool"builtins.bool *”	
_reduce_for_stat_function6pyspark.pandas.series.Series._reduce_for_stat_function"”
çTypeAlias[Union[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]]ü
ÇUnion[builtins.int,builtins.float,builtins.bool,builtins.str,builtins.bytes,_decimal.Decimal,datetime.date,datetime.datetime,None]
builtins.int"builtins.int 
builtins.float"builtins.float
builtins.bool"builtins.bool
builtins.str"builtins.str 
builtins.bytes"builtins.bytes$
_decimal.Decimal"_decimal.Decimal
datetime.date"datetime.date&
datetime.datetime"datetime.datetime
None"pyspark.pandas._typing.Scalar*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*U
sfunK
CallableType[builtins.function]&
builtins.function"builtins.function*&
name
builtins.str"builtins.str*{
axiso
%Union[builtins.int,builtins.str,None]
builtins.int"builtins.int
builtins.str"builtins.str
None *2
numeric_only
builtins.bool"builtins.bool *,
skipna
builtins.bool"builtins.bool *
kwargs
Any*•

groupby$pyspark.pandas.series.Series.groupby"L
$pyspark.pandas.groupby.SeriesGroupBy"$pyspark.pandas.groupby.SeriesGroupBy*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*“
by…
ùUnion[TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]],pyspark.pandas.series.Series[Any],builtins.list[Union[Unknown,pyspark.pandas.series.Series[Any]]]]Ä
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.NameJ
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series’
?builtins.list[Union[Unknown,pyspark.pandas.series.Series[Any]]]Ç
0Union[Unknown,pyspark.pandas.series.Series[Any]] J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series"builtins.list*ª
axisÆ
+TypeAlias[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"pyspark.pandas._typing.Axis *.
as_index
builtins.bool"builtins.bool *,
dropna
builtins.bool"builtins.bool *õ
_build_groupby+pyspark.pandas.series.Series._build_groupby"L
$pyspark.pandas.groupby.SeriesGroupBy"$pyspark.pandas.groupby.SeriesGroupBy*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*¸
byÛ
Vbuiltins.list[Union[pyspark.pandas.series.Series[Any],TypeAlias[builtins.tuple[Any]]]]â
GUnion[pyspark.pandas.series.Series[Any],TypeAlias[builtins.tuple[Any]]]J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Seriesp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"builtins.list*,
as_index
builtins.bool"builtins.bool**
dropna
builtins.bool"builtins.bool*†
resample%pyspark.pandas.series.Series.resample"R
'pyspark.pandas.resample.SeriesResampler"'pyspark.pandas.resample.SeriesResampler*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*&
rule
builtins.str"builtins.str*R
closedD
Union[builtins.str,None]
builtins.str"builtins.str
None *Q
labelD
Union[builtins.str,None]
builtins.str"builtins.str
None *í
oná
-Union[pyspark.pandas.series.Series[Any],None]J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series
None *˙
__getitem__(pyspark.pandas.series.Series.__getitem__"
Any*¨©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*	
Any*è
__getattr__(pyspark.pandas.series.Series.__getattr__"
Any*¨©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*
builtins.str"builtins.str*ƒ
_to_internal_pandas0pyspark.pandas.series.Series._to_internal_pandas"D
pandas.core.series.Series[Any]
Any"pandas.core.series.Series*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*˛
__repr__%pyspark.pandas.series.Series.__repr__"
builtins.str"builtins.str*¨©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*∂
__dir__$pyspark.pandas.series.Series.__dir__"N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*Í
__iter__%pyspark.pandas.series.Series.__iter__"
None*¨©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*Ü
__class_getitem__.pyspark.pandas.series.Series.__class_getitem__"™
6Type[pyspark.pandas.typedef.typehints.SeriesType[Any]]h
0pyspark.pandas.typedef.typehints.SeriesType[Any]
Any"+pyspark.pandas.typedef.typehints.SeriesType"type*¸
clsÚ
<Type[pyspark.pandas.series.Series[pyspark.pandas._typing.T]]©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series"type*
params
Anyp2Æ
name!pyspark.pandas.series.Series.name¸
name!pyspark.pandas.series.Series.name"Ä
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.Name*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series0:builtins.propertyX`É
name!pyspark.pandas.series.Series.name"
None*¥
self©
6pyspark.pandas.series.Series[pyspark.pandas._typing.T]Q
pyspark.pandas._typing.T"
builtins.object"builtins.object"builtins.object"pyspark.pandas.series.Series*ã
nameÄ
4TypeAlias[Union[Any,TypeAlias[builtins.tuple[Any]]]]®
)Union[Any,TypeAlias[builtins.tuple[Any]]]
Anyp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Label"pyspark.pandas._typing.Name0:.setterPr•
spark"pyspark.pandas.series.Series.sparkx
8pyspark.pandas.spark.accessors.SparkIndexOpsMethods[Any]
Any"3pyspark.pandas.spark.accessors.SparkIndexOpsMethodsrz
divide#pyspark.pandas.series.Series.divideK
CallableType[builtins.function]&
builtins.function"builtins.functionr~
multiply%pyspark.pandas.series.Series.multiplyK
CallableType[builtins.function]&
builtins.function"builtins.functionr~
subtract%pyspark.pandas.series.Series.subtractK
CallableType[builtins.function]&
builtins.function"builtins.functionrã
pandas_on_spark,pyspark.pandas.series.Series.pandas_on_sparkJ
#pandas.core.accessor.CachedAccessor"#pandas.core.accessor.CachedAccessorry
koalas#pyspark.pandas.series.Series.koalasJ
#pandas.core.accessor.CachedAccessor"#pandas.core.accessor.CachedAccessorrz
equals#pyspark.pandas.series.Series.equalsK
CallableType[builtins.function]&
builtins.function"builtins.functionrÜ
to_dataframe)pyspark.pandas.series.Series.to_dataframeK
CallableType[builtins.function]&
builtins.function"builtins.functionrz
tolist#pyspark.pandas.series.Series.tolistK
CallableType[builtins.function]&
builtins.function"builtins.functionrt
agg pyspark.pandas.series.Series.aggK
CallableType[builtins.function]&
builtins.function"builtins.functionrK
Tpyspark.pandas.series.Series.T&
builtins.property"builtins.propertyrq
dtpyspark.pandas.series.Series.dtJ
#pandas.core.accessor.CachedAccessor"#pandas.core.accessor.CachedAccessorrs
str pyspark.pandas.series.Series.strJ
#pandas.core.accessor.CachedAccessor"#pandas.core.accessor.CachedAccessorrs
cat pyspark.pandas.series.Series.catJ
#pandas.core.accessor.CachedAccessor"#pandas.core.accessor.CachedAccessorru
plot!pyspark.pandas.series.Series.plotJ
#pandas.core.accessor.CachedAccessor"#pandas.core.accessor.CachedAccessorr
_anchor$pyspark.pandas.series.Series._anchorN
#pyspark.pandas.frame.DataFrame[Any]
Any"pyspark.pandas.frame.DataFramerß

_col_label'pyspark.pandas.series.Series._col_labelp
TypeAlias[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"pyspark.pandas._typing.Labelä
unpack_scalar#pyspark.pandas.series.unpack_scalar"
Any*K
sdfB
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame.
_testpyspark.pandas.series._test"
None"Ù
first_series"pyspark.pandas.series.first_seriesÎ
first_series"pyspark.pandas.series.first_series"J
!pyspark.pandas.series.Series[Any]
Any"pyspark.pandas.series.Series*V
dfN
#pyspark.pandas.frame.DataFrame[Any]
Any"pyspark.pandas.frame.DataFrame0:typing.overloadX—
first_series"pyspark.pandas.series.first_series"D
pandas.core.series.Series[Any]
Any"pandas.core.series.Series*B
df:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame0:typing.overloadX*ë
__annotations__%pyspark.pandas.series.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
npnumpy *
pdpandas *;
pprint_thing"pyspark.pandas.series.pprint_thing
Any*
Fpyspark.sql.functions *
pspyspark.pandas *&
SFpyspark.pandas.spark.functions *x
REPR_PATTERN"pyspark.pandas.series.REPR_PATTERND
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*X
_flex_doc_SERIES&pyspark.pandas.series._flex_doc_SERIES
builtins.str"builtins.str*^
_add_example_SERIES)pyspark.pandas.series._add_example_SERIES
builtins.str"builtins.str*^
_sub_example_SERIES)pyspark.pandas.series._sub_example_SERIES
builtins.str"builtins.str*^
_mul_example_SERIES)pyspark.pandas.series._mul_example_SERIES
builtins.str"builtins.str*^
_div_example_SERIES)pyspark.pandas.series._div_example_SERIES
builtins.str"builtins.str*^
_pow_example_SERIES)pyspark.pandas.series._pow_example_SERIES
builtins.str"builtins.str*^
_mod_example_SERIES)pyspark.pandas.series._mod_example_SERIES
builtins.str"builtins.str*h
_floordiv_example_SERIES.pyspark.pandas.series._floordiv_example_SERIES
builtins.str"builtins.str