
torch.nn.modules.modulej
_IncompatibleKeys)torch.nn.modules.module._IncompatibleKeys"*SonarPythonAnalyzerFakeStub.CustomStubBase‚
_WrappedHook$torch.nn.modules.module._WrappedHook"*SonarPythonAnalyzerFakeStub.CustomStubBase*ý
__init__-torch.nn.modules.module._WrappedHook.__init__"
None*V
selfL
$torch.nn.modules.module._WrappedHook"$torch.nn.modules.module._WrappedHook*U
hookK
CallableType[builtins.function]&
builtins.function"builtins.function*ˆ
modulez
*Union[torch.nn.modules.module.Module,None]@
torch.nn.modules.module.Module"torch.nn.modules.module.Module
None *Â
__call__-torch.nn.modules.module._WrappedHook.__call__"
Any*V
selfL
$torch.nn.modules.module._WrappedHook"$torch.nn.modules.module._WrappedHook*
args
Any*
kwargs
Anyr:
hook)torch.nn.modules.module._WrappedHook.hook
Anyr_
with_module0torch.nn.modules.module._WrappedHook.with_module
builtins.bool"builtins.boolr>
module+torch.nn.modules.module._WrappedHook.module
Anyã†
Moduletorch.nn.modules.module.Module"*SonarPythonAnalyzerFakeStub.CustomStubBase*±
__init__'torch.nn.modules.module.Module.__init__"
None*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*
args
Any*
kwargs
Any*Ã
register_buffer.torch.nn.modules.module.Module.register_buffer"
None*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*&
name
builtins.str"builtins.str*P
tensorD
Union[torch.Tensor,None]
torch.Tensor"torch.Tensor
None*0

persistent
builtins.bool"builtins.bool *ø
register_parameter1torch.nn.modules.module.Module.register_parameter"
None*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*&
name
builtins.str"builtins.str*1
param&
Union[Any,None]
Any
None*¾

add_module)torch.nn.modules.module.Module.add_module"
None*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*&
name
builtins.str"builtins.str*†
modulez
*Union[torch.nn.modules.module.Module,None]@
torch.nn.modules.module.Module"torch.nn.modules.module.Module
None*È
register_module.torch.nn.modules.module.Module.register_module"
None*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*&
name
builtins.str"builtins.str*†
modulez
*Union[torch.nn.modules.module.Module,None]@
torch.nn.modules.module.Module"torch.nn.modules.module.Module
None*õ
get_submodule,torch.nn.modules.module.Module.get_submodule"@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*(
target
builtins.str"builtins.str*‹
set_submodule,torch.nn.modules.module.Module.set_submodule"
None*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*(
target
builtins.str"builtins.str*L
module@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*¼
get_parameter,torch.nn.modules.module.Module.get_parameter"
Any*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*(
target
builtins.str"builtins.str*Ë

get_buffer)torch.nn.modules.module.Module.get_buffer"
torch.Tensor"torch.Tensor*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*(
target
builtins.str"builtins.str*–
get_extra_state.torch.nn.modules.module.Module.get_extra_state"
Any*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*«
set_extra_state.torch.nn.modules.module.Module.set_extra_state"
None*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*
state
Any*Ï
apply$torch.nn.modules.module.Module.apply"
torch.nn.modules.module.T@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*S
fnK
CallableType[builtins.function]&
builtins.function"builtins.function*÷
cuda#torch.nn.modules.module.Module.cuda"
torch.nn.modules.module.T@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*}
deviceo
%Union[builtins.int,torch.device,None]
builtins.int"builtins.int
torch.device"torch.device
None *õ
ipu"torch.nn.modules.module.Module.ipu"
torch.nn.modules.module.T@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*}
deviceo
%Union[builtins.int,torch.device,None]
builtins.int"builtins.int
torch.device"torch.device
None *õ
xpu"torch.nn.modules.module.Module.xpu"
torch.nn.modules.module.T@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*}
deviceo
%Union[builtins.int,torch.device,None]
builtins.int"builtins.int
torch.device"torch.device
None *÷
mtia#torch.nn.modules.module.Module.mtia"
torch.nn.modules.module.T@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*}
deviceo
%Union[builtins.int,torch.device,None]
builtins.int"builtins.int
torch.device"torch.device
None *ö
cpu"torch.nn.modules.module.Module.cpu"
torch.nn.modules.module.T@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*å
type#torch.nn.modules.module.Module.type"
torch.nn.modules.module.T@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*k
dst_type]
Union[torch.dtype,builtins.str]
torch.dtype"torch.dtype
builtins.str"builtins.str*ú
float$torch.nn.modules.module.Module.float"
torch.nn.modules.module.T@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*ü
double%torch.nn.modules.module.Module.double"
torch.nn.modules.module.T@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*ø
half#torch.nn.modules.module.Module.half"
torch.nn.modules.module.T@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*€
bfloat16'torch.nn.modules.module.Module.bfloat16"
torch.nn.modules.module.T@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*ã
to_empty'torch.nn.modules.module.Module.to_empty"
torch.nn.modules.module.T@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*2
device&
Union[Any,None]
Any
None*-
recurse
builtins.bool"builtins.bool *¼
register_full_backward_pre_hook>torch.nn.modules.module.Module.register_full_backward_pre_hook"
Any*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*U
hookK
CallableType[builtins.function]&
builtins.function"builtins.function*-
prepend
builtins.bool"builtins.bool *û
register_backward_hook5torch.nn.modules.module.Module.register_backward_hook"
Any*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*U
hookK
CallableType[builtins.function]&
builtins.function"builtins.function*´
register_full_backward_hook:torch.nn.modules.module.Module.register_full_backward_hook"
Any*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*U
hookK
CallableType[builtins.function]&
builtins.function"builtins.function*-
prepend
builtins.bool"builtins.bool *þ
register_forward_pre_hook8torch.nn.modules.module.Module.register_forward_pre_hook"
Any*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*ï
hookä
FUnion[CallableType[builtins.function],CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function*-
prepend
builtins.bool"builtins.bool *1
with_kwargs
builtins.bool"builtins.bool *©
register_forward_hook4torch.nn.modules.module.Module.register_forward_hook"
Any*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*ï
hookä
FUnion[CallableType[builtins.function],CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function*-
prepend
builtins.bool"builtins.bool *1
with_kwargs
builtins.bool"builtins.bool *1
always_call
builtins.bool"builtins.bool *¦
__getattr__*torch.nn.modules.module.Module.__getattr__"
Any*B@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*
builtins.str"builtins.str*Ü
__setattr__*torch.nn.modules.module.Module.__setattr__"
None*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*&
name
builtins.str"builtins.str*¢
value–
2Union[torch.Tensor,torch.nn.modules.module.Module]
torch.Tensor"torch.Tensor@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*’
__delattr__*torch.nn.modules.module.Module.__delattr__"
None*B@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*	
Any*q
register_state_dict_post_hook<torch.nn.modules.module.Module.register_state_dict_post_hook*
self*
hook*o
register_state_dict_pre_hook;torch.nn.modules.module.Module.register_state_dict_pre_hook*
self*
hook*y
!register_load_state_dict_pre_hook@torch.nn.modules.module.Module.register_load_state_dict_pre_hook*
self*
hook*{
"register_load_state_dict_post_hookAtorch.nn.modules.module.Module.register_load_state_dict_post_hook*
self*
hook*Ý
load_state_dict.torch.nn.modules.module.Module.load_state_dict"
Any*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*i

state_dictY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping*,
strict
builtins.bool"builtins.bool *,
assign
builtins.bool"builtins.bool *ä

parameters)torch.nn.modules.module.Module.parameters"0
typing.Iterator[Any]
Any"typing.Iterator*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*-
recurse
builtins.bool"builtins.bool *£
named_parameters/torch.nn.modules.module.Module.named_parameters"
(typing.Iterator[Tuple[builtins.str,Any]]B
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Iterator*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module**
prefix
builtins.str"builtins.str *-
recurse
builtins.bool"builtins.bool *6
remove_duplicate
builtins.bool"builtins.bool *ü
buffers&torch.nn.modules.module.Module.buffers"N
typing.Iterator[torch.Tensor]
torch.Tensor"torch.Tensor"typing.Iterator*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*-
recurse
builtins.bool"builtins.bool *Å
named_buffers,torch.nn.modules.module.Module.named_buffers"¦
1typing.Iterator[Tuple[builtins.str,torch.Tensor]]`
 Tuple[builtins.str,torch.Tensor]
builtins.str"builtins.str
torch.Tensor"torch.Tensor"typing.Iterator*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module**
prefix
builtins.str"builtins.str *-
recurse
builtins.bool"builtins.bool *6
remove_duplicate
builtins.bool"builtins.bool *†
children'torch.nn.modules.module.Module.children"„
/typing.Iterator[torch.nn.modules.module.Module]@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"typing.Iterator*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*ý
named_children-torch.nn.modules.module.Module.named_children"ï
Ctyping.Iterator[Tuple[builtins.str,torch.nn.modules.module.Module]]–
2Tuple[builtins.str,torch.nn.modules.module.Module]
builtins.str"builtins.str@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"typing.Iterator*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*„
modules&torch.nn.modules.module.Module.modules"„
/typing.Iterator[torch.nn.modules.module.Module]@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"typing.Iterator*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*Ì
named_modules,torch.nn.modules.module.Module.named_modules"
Any*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*Ó
memoÆ
8Union[builtins.set[torch.nn.modules.module.Module],None]~
,builtins.set[torch.nn.modules.module.Module]@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"builtins.set
None **
prefix
builtins.str"builtins.str *6
remove_duplicate
builtins.bool"builtins.bool *¦
train$torch.nn.modules.module.Module.train"
torch.nn.modules.module.T@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module**
mode
builtins.bool"builtins.bool *ø
eval#torch.nn.modules.module.Module.eval"
torch.nn.modules.module.T@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*Á
requires_grad_-torch.nn.modules.module.Module.requires_grad_"
torch.nn.modules.module.T@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*3
requires_grad
builtins.bool"builtins.bool *¾
	zero_grad(torch.nn.modules.module.Module.zero_grad"
None*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*1
set_to_none
builtins.bool"builtins.bool *ˆ
share_memory+torch.nn.modules.module.Module.share_memory"
torch.nn.modules.module.T@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*¡

extra_repr)torch.nn.modules.module.Module.extra_repr"
builtins.str"builtins.str*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*;
__dir__&torch.nn.modules.module.Module.__dir__*
self*¯
compile&torch.nn.modules.module.Module.compile"
None*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*
args
Any*
kwargs
Any2À
to!torch.nn.modules.module.Module.to™
to!torch.nn.modules.module.Module.to"‰
#torch.nn.modules.module.Module.Self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*”
self‰
#torch.nn.modules.module.Module.Self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*4
device&
Union[Any,None]
Any
None *N
dtypeA
Union[torch.dtype,None]
torch.dtype"torch.dtype
None *2
non_blocking
builtins.bool"builtins.bool 0:typing.overloadXº
to!torch.nn.modules.module.Module.to"‰
#torch.nn.modules.module.Module.Self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*”
self‰
#torch.nn.modules.module.Module.Self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*%
dtype
torch.dtype"torch.dtype*2
non_blocking
builtins.bool"builtins.bool 0:typing.overloadX½
to!torch.nn.modules.module.Module.to"‰
#torch.nn.modules.module.Module.Self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*”
self‰
#torch.nn.modules.module.Module.Self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module"torch.nn.modules.module.Module*(
tensor
torch.Tensor"torch.Tensor*2
non_blocking
builtins.bool"builtins.bool 0:typing.overloadX2£

state_dict)torch.nn.modules.module.Module.state_dict˜

state_dict)torch.nn.modules.module.Module.state_dict"
Any*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module*
destination
Any**
prefix
builtins.str"builtins.str */
	keep_vars
builtins.bool"builtins.bool 0:typing.overloadXÎ

state_dict)torch.nn.modules.module.Module.state_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*J
self@
torch.nn.modules.module.Module"torch.nn.modules.module.Module**
prefix
builtins.str"builtins.str */
	keep_vars
builtins.bool"builtins.bool 0:typing.overloadXr[
dump_patches+torch.nn.modules.module.Module.dump_patches
builtins.bool"builtins.boolrS
training'torch.nn.modules.module.Module.training
builtins.bool"builtins.boolra
call_super_init.torch.nn.modules.module.Module.call_super_init
builtins.bool"builtins.boolr~
forward&torch.nn.modules.module.Module.forwardK
CallableType[builtins.function]&
builtins.function"builtins.functionr€
__call__'torch.nn.modules.module.Module.__call__K
CallableType[builtins.function]&
builtins.function"builtins.functionrF
T_destination,torch.nn.modules.module.Module.T_destination
AnyÌ
(register_module_buffer_registration_hook@torch.nn.modules.module.register_module_buffer_registration_hook"
Any*U
hookK
CallableType[builtins.function]&
builtins.function"builtins.functionÌ
(register_module_module_registration_hook@torch.nn.modules.module.register_module_module_registration_hook"
Any*U
hookK
CallableType[builtins.function]&
builtins.function"builtins.functionÒ
+register_module_parameter_registration_hookCtorch.nn.modules.module.register_module_parameter_registration_hook"
Any*U
hookK
CallableType[builtins.function]&
builtins.function"builtins.function¼
 register_module_forward_pre_hook8torch.nn.modules.module.register_module_forward_pre_hook"
Any*U
hookK
CallableType[builtins.function]&
builtins.function"builtins.functionç
register_module_forward_hook4torch.nn.modules.module.register_module_forward_hook"
Any*U
hookK
CallableType[builtins.function]&
builtins.function"builtins.function*1
always_call
builtins.bool"builtins.bool ¶
register_module_backward_hook5torch.nn.modules.module.register_module_backward_hook"
Any*U
hookK
CallableType[builtins.function]&
builtins.function"builtins.functionÈ
&register_module_full_backward_pre_hook>torch.nn.modules.module.register_module_full_backward_pre_hook"
Any*U
hookK
CallableType[builtins.function]&
builtins.function"builtins.functionÀ
"register_module_full_backward_hook:torch.nn.modules.module.register_module_full_backward_hook"
Any*U
hookK
CallableType[builtins.function]&
builtins.function"builtins.function*“
__annotations__'torch.nn.modules.module.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*A
DeviceLikeType&torch.nn.modules.module.DeviceLikeType
Any*7
	Parameter!torch.nn.modules.module.Parameter
Any*C
RemovableHandle'torch.nn.modules.module.RemovableHandle
Any