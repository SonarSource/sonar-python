
inspect®
AbstractSettyping.AbstractSet"typing.Collection*é
__contains__typing.AbstractSet.__contains__"
builtins.bool"builtins.bool*}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*$"
builtins.object"builtins.object0:abc.abstractmethod@*…
_hashtyping.AbstractSet._hash"
builtins.int"builtins.int*á
self}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*˛
__le__typing.AbstractSet.__le__"
builtins.bool"builtins.bool*}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSet*˛
__lt__typing.AbstractSet.__lt__"
builtins.bool"builtins.bool*}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSet*˛
__gt__typing.AbstractSet.__gt__"
builtins.bool"builtins.bool*}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSet*˛
__ge__typing.AbstractSet.__ge__"
builtins.bool"builtins.bool*}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSet*ﬂ
__and__typing.AbstractSet.__and__"}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSet*ò
__or__typing.AbstractSet.__or__"ˆ
1typing.AbstractSet[Union[typing._T_co,typing._T]]¨
Union[typing._T_co,typing._T]E
typing._T_co"
builtins.object"builtins.object"builtins.objectB
	typing._T"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*yw
typing.AbstractSet[typing._T]B
	typing._T"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*ﬂ
__sub__typing.AbstractSet.__sub__"}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSet*ö
__xor__typing.AbstractSet.__xor__"ˆ
1typing.AbstractSet[Union[typing._T_co,typing._T]]¨
Union[typing._T_co,typing._T]E
typing._T_co"
builtins.object"builtins.object"builtins.objectB
	typing._T"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*yw
typing.AbstractSet[typing._T]B
	typing._T"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*í

isdisjointtyping.AbstractSet.isdisjoint"
builtins.bool"builtins.bool*á
self}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*;
other0
typing.Iterable[Any]
Any"typing.IterableP4

EndOfBlockinspect.EndOfBlock"builtins.ExceptionÉ
BlockFinderinspect.BlockFinder"builtins.object*√

tokeneaterinspect.BlockFinder.tokeneater"
None*4
self*
inspect.BlockFinder"inspect.BlockFinder*&
type
builtins.int"builtins.int*'
token
builtins.str"builtins.str*m
srowcol`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*m
erowcol`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*&
line
builtins.str"builtins.strrB
indentinspect.BlockFinder.indent
builtins.int"builtins.intrH
islambdainspect.BlockFinder.islambda
builtins.bool"builtins.boolrF
startedinspect.BlockFinder.started
builtins.bool"builtins.boolrH
passlineinspect.BlockFinder.passline
builtins.bool"builtins.boolrN
indecoratorinspect.BlockFinder.indecorator
builtins.bool"builtins.boolrX
decoratorhasargs$inspect.BlockFinder.decoratorhasargs
builtins.bool"builtins.boolr>
lastinspect.BlockFinder.last
builtins.int"builtins.intÙ
_SupportsSetinspect._SupportsSet"builtins.object*∏
__set__inspect._SupportsSet.__set__"
None*Ï
self·
5inspect._SupportsSet[inspect._T_cont,inspect._V_cont]H
inspect._T_cont"
builtins.object"builtins.object"builtins.objectH
inspect._V_cont"
builtins.object"builtins.object"builtins.object"inspect._SupportsSet*JH
inspect._T_cont"
builtins.object"builtins.object"builtins.object*JH
inspect._V_cont"
builtins.object"builtins.object"builtins.objectPX„
_SupportsDeleteinspect._SupportsDelete"builtins.object*°

__delete__"inspect._SupportsDelete.__delete__"
None*ò
selfç
(inspect._SupportsDelete[inspect._T_cont]H
inspect._T_cont"
builtins.object"builtins.object"builtins.object"inspect._SupportsDelete*JH
inspect._T_cont"
builtins.object"builtins.object"builtins.objectPX'
_voidinspect._void"builtins.object)
_emptyinspect._empty"builtins.objectµ
	Signatureinspect.Signature"builtins.object*Ù
__init__inspect.Signature.__init__"
None*0
self&
inspect.Signature"inspect.Signature*Æ

parametersõ
.Union[typing.Sequence[inspect.Parameter],None]]
"typing.Sequence[inspect.Parameter]&
inspect.Parameter"inspect.Parameter"typing.Sequence
None * 
return_annotation
Any *=
__validate_parameters__
builtins.bool"builtins.bool *å

parametersinspect.Signature.parameters"ñ
6types.MappingProxyType[builtins.str,inspect.Parameter]
builtins.str"builtins.str&
inspect.Parameter"inspect.Parameter"types.MappingProxyType*0
self&
inspect.Signature"inspect.Signature0:builtins.property`*ä
return_annotation#inspect.Signature.return_annotation"
Any*0
self&
inspect.Signature"inspect.Signature0:builtins.property`*™
bindinspect.Signature.bind"0
inspect.BoundArguments"inspect.BoundArguments*0
self&
inspect.Signature"inspect.Signature*
args
Any*
kwargs
Any*∫
bind_partialinspect.Signature.bind_partial"0
inspect.BoundArguments"inspect.BoundArguments*0
self&
inspect.Signature"inspect.Signature*
args
Any*
kwargs
Any*Ç
replaceinspect.Signature.replace"U
inspect.Signature.Self&
inspect.Signature"inspect.Signature"inspect.Signature*_
selfU
inspect.Signature.Self&
inspect.Signature"inspect.Signature"inspect.Signature*Å

parametersÓ
BUnion[typing.Sequence[inspect.Parameter],Type[inspect._void],None]]
"typing.Sequence[inspect.Parameter]&
inspect.Parameter"inspect.Parameter"typing.Sequence=
Type[inspect._void]
inspect._void"inspect._void"type
None * 
return_annotation
Any *â
from_callableinspect.Signature.from_callable"U
inspect.Signature.Self&
inspect.Signature"inspect.Signature"inspect.Signature*Ü
cls}
Type[inspect.Signature.Self]U
inspect.Signature.Self&
inspect.Signature"inspect.Signature"inspect.Signature"type*¶
objú
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"inspect._IntrospectableCallable*4
follow_wrapped
builtins.bool"builtins.bool 0:builtins.classmethodp*í
__eq__inspect.Signature.__eq__"
builtins.bool"builtins.bool*(&
inspect.Signature"inspect.Signature*$"
builtins.object"builtins.objectra
emptyinspect.Signature.empty?
CallableType[builtins.type]
builtins.type"builtins.typeñ
_ParameterKindinspect._ParameterKind"enum.IntEnum*¢
description"inspect._ParameterKind.description"
builtins.str"builtins.str*:
self0
inspect._ParameterKind"inspect._ParameterKind0:builtins.property`HrW
POSITIONAL_ONLY&inspect._ParameterKind.POSITIONAL_ONLY
builtins.int"builtins.intrc
POSITIONAL_OR_KEYWORD,inspect._ParameterKind.POSITIONAL_OR_KEYWORD
builtins.int"builtins.intrU
VAR_POSITIONAL%inspect._ParameterKind.VAR_POSITIONAL
builtins.int"builtins.intrQ
KEYWORD_ONLY#inspect._ParameterKind.KEYWORD_ONLY
builtins.int"builtins.intrO
VAR_KEYWORD"inspect._ParameterKind.VAR_KEYWORD
builtins.int"builtins.intﬂ
	Parameterinspect.Parameter"builtins.object*˘
__init__inspect.Parameter.__init__"
None*0
self&
inspect.Parameter"inspect.Parameter*&
name
builtins.str"builtins.str*:
kind0
inspect._ParameterKind"inspect._ParameterKind*
default
Any *

annotation
Any *Ö
nameinspect.Parameter.name"
builtins.str"builtins.str*0
self&
inspect.Parameter"inspect.Parameter0:builtins.property`*v
defaultinspect.Parameter.default"
Any*0
self&
inspect.Parameter"inspect.Parameter0:builtins.property`*ô
kindinspect.Parameter.kind"0
inspect._ParameterKind"inspect._ParameterKind*0
self&
inspect.Parameter"inspect.Parameter0:builtins.property`*|

annotationinspect.Parameter.annotation"
Any*0
self&
inspect.Parameter"inspect.Parameter0:builtins.property`*›
replaceinspect.Parameter.replace"U
inspect.Parameter.Self&
inspect.Parameter"inspect.Parameter"inspect.Parameter*_
selfU
inspect.Parameter.Self&
inspect.Parameter"inspect.Parameter"inspect.Parameter*ï
nameà
'Union[builtins.str,Type[inspect._void]]
builtins.str"builtins.str=
Type[inspect._void]
inspect._void"inspect._void"type *≥
kind¶
1Union[inspect._ParameterKind,Type[inspect._void]]0
inspect._ParameterKind"inspect._ParameterKind=
Type[inspect._void]
inspect._void"inspect._void"type *
default
Any *

annotation
Any *í
__eq__inspect.Parameter.__eq__"
builtins.bool"builtins.bool*(&
inspect.Parameter"inspect.Parameter*$"
builtins.object"builtins.objectra
emptyinspect.Parameter.empty?
CallableType[builtins.type]
builtins.type"builtins.typerã
POSITIONAL_ONLY!inspect.Parameter.POSITIONAL_ONLYU
Literal[inspect._ParameterKind]	0
inspect._ParameterKind"inspect._ParameterKindró
POSITIONAL_OR_KEYWORD'inspect.Parameter.POSITIONAL_OR_KEYWORDU
Literal[inspect._ParameterKind]	0
inspect._ParameterKind"inspect._ParameterKindrâ
VAR_POSITIONAL inspect.Parameter.VAR_POSITIONALU
Literal[inspect._ParameterKind]	0
inspect._ParameterKind"inspect._ParameterKindrÖ
KEYWORD_ONLYinspect.Parameter.KEYWORD_ONLYU
Literal[inspect._ParameterKind]	0
inspect._ParameterKind"inspect._ParameterKindrÉ
VAR_KEYWORDinspect.Parameter.VAR_KEYWORDU
Literal[inspect._ParameterKind]	0
inspect._ParameterKind"inspect._ParameterKind 

BoundArgumentsinspect.BoundArguments"builtins.object*¶
argsinspect.BoundArguments.args".
builtins.tuple[Any]
Any"builtins.tuple*:
self0
inspect.BoundArguments"inspect.BoundArguments0:builtins.property`*”
kwargsinspect.BoundArguments.kwargs"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*:
self0
inspect.BoundArguments"inspect.BoundArguments0:builtins.property`*®
	signature inspect.BoundArguments.signature"&
inspect.Signature"inspect.Signature*:
self0
inspect.BoundArguments"inspect.BoundArguments0:builtins.property`*§
__init__inspect.BoundArguments.__init__"
None*:
self0
inspect.BoundArguments"inspect.BoundArguments*5
	signature&
inspect.Signature"inspect.Signature*z
	argumentsk
)collections.OrderedDict[builtins.str,Any]
builtins.str"builtins.str
Any"collections.OrderedDict*}
apply_defaults%inspect.BoundArguments.apply_defaults"
None*:
self0
inspect.BoundArguments"inspect.BoundArguments*°
__eq__inspect.BoundArguments.__eq__"
builtins.bool"builtins.bool*20
inspect.BoundArguments"inspect.BoundArguments*$"
builtins.object"builtins.objectrö
	arguments inspect.BoundArguments.argumentsk
)collections.OrderedDict[builtins.str,Any]
builtins.str"builtins.str
Any"collections.OrderedDict”$
	Argumentsinspect.Arguments"builtins.tuple*–
_replaceinspect.Arguments._replace"Ã
inspect.Arguments._NT∞
TTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None*ÿ
_selfÃ
inspect.Arguments._NT∞
TTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None*V
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *S
varargsD
Union[builtins.str,None]
builtins.str"builtins.str
None *Q
varkwD
Union[builtins.str,None]
builtins.str"builtins.str
None *Ô
__new__inspect.Arguments.__new__"Ã
inspect.Arguments._NT∞
TTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None*ˇ
_clsÙ
Type[inspect.Arguments._NT]Ã
inspect.Arguments._NT∞
TTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None"type*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*Q
varargsD
Union[builtins.str,None]
builtins.str"builtins.str
None*O
varkwD
Union[builtins.str,None]
builtins.str"builtins.str
None*ÿ
_asdictinspect.Arguments._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*ÿ
_selfÃ
inspect.Arguments._NT∞
TTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None*ﬂ
_makeinspect.Arguments._make"Ã
inspect.Arguments._NT∞
TTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None*ˇ
_clsÙ
Type[inspect.Arguments._NT]Ã
inspect.Arguments._NT∞
TTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0: prj
argsinspect.Arguments.argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrj
varargsinspect.Arguments.varargsD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerf
varkwinspect.Arguments.varkwD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerj
argsinspect.Arguments.argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrj
varargsinspect.Arguments.varargsD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerf
varkwinspect.Arguments.varkwD
Union[builtins.str,None]
builtins.str"builtins.str
Noner≤
_fieldsinspect.Arguments._fieldsã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrá
_field_typesinspect.Arguments._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrç
_field_defaults!inspect.Arguments._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrB
_sourceinspect.Arguments._source
builtins.str"builtins.strrç
__annotations__!inspect.Arguments.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict‚*
ArgSpecinspect.ArgSpec"builtins.tuple*ï	
_replaceinspect.ArgSpec._replace"é
inspect.ArgSpec._NTÙ
hTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],builtins.tuple[Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None.
builtins.tuple[Any]
Any"builtins.tuple*ö
_selfé
inspect.ArgSpec._NTÙ
hTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],builtins.tuple[Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None.
builtins.tuple[Any]
Any"builtins.tuple*V
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *S
varargsD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
keywordsD
Union[builtins.str,None]
builtins.str"builtins.str
None *>
defaults.
builtins.tuple[Any]
Any"builtins.tuple *∞	
__new__inspect.ArgSpec.__new__"é
inspect.ArgSpec._NTÙ
hTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],builtins.tuple[Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None.
builtins.tuple[Any]
Any"builtins.tuple*ø
_cls¥
Type[inspect.ArgSpec._NT]é
inspect.ArgSpec._NTÙ
hTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],builtins.tuple[Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None.
builtins.tuple[Any]
Any"builtins.tuple"type*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*Q
varargsD
Union[builtins.str,None]
builtins.str"builtins.str
None*R
keywordsD
Union[builtins.str,None]
builtins.str"builtins.str
None*<
defaults.
builtins.tuple[Any]
Any"builtins.tuple*ò
_asdictinspect.ArgSpec._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*ö
_selfé
inspect.ArgSpec._NTÙ
hTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],builtins.tuple[Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None.
builtins.tuple[Any]
Any"builtins.tuple*ﬂ
_makeinspect.ArgSpec._make"é
inspect.ArgSpec._NTÙ
hTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],builtins.tuple[Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None.
builtins.tuple[Any]
Any"builtins.tuple*ø
_cls¥
Type[inspect.ArgSpec._NT]é
inspect.ArgSpec._NTÙ
hTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],builtins.tuple[Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None.
builtins.tuple[Any]
Any"builtins.tuple"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0: prh
argsinspect.ArgSpec.argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrh
varargsinspect.ArgSpec.varargsD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerj
keywordsinspect.ArgSpec.keywordsD
Union[builtins.str,None]
builtins.str"builtins.str
NonerT
defaultsinspect.ArgSpec.defaults.
builtins.tuple[Any]
Any"builtins.tuplerh
argsinspect.ArgSpec.argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrh
varargsinspect.ArgSpec.varargsD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerj
keywordsinspect.ArgSpec.keywordsD
Union[builtins.str,None]
builtins.str"builtins.str
NonerT
defaultsinspect.ArgSpec.defaults.
builtins.tuple[Any]
Any"builtins.tupler€
_fieldsinspect.ArgSpec._fields∂
:Tuple[builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrÖ
_field_typesinspect.ArgSpec._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrã
_field_defaultsinspect.ArgSpec._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictr@
_sourceinspect.ArgSpec._source
builtins.str"builtins.strrã
__annotations__inspect.ArgSpec.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictóU
FullArgSpecinspect.FullArgSpec"builtins.tuple*ˇ
_replaceinspect.FullArgSpec._replace"
inspect.FullArgSpec._NT“
‹Tuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],Union[builtins.tuple[Any],None],builtins.list[builtins.str],Union[builtins.dict[builtins.str,Any],None],builtins.dict[builtins.str,Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None]
Union[builtins.tuple[Any],None].
builtins.tuple[Any]
Any"builtins.tuple
NoneJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
NoneW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*¸
_self
inspect.FullArgSpec._NT“
‹Tuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],Union[builtins.tuple[Any],None],builtins.list[builtins.str],Union[builtins.dict[builtins.str,Any],None],builtins.dict[builtins.str,Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None]
Union[builtins.tuple[Any],None].
builtins.tuple[Any]
Any"builtins.tuple
NoneJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
NoneW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*V
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *S
varargsD
Union[builtins.str,None]
builtins.str"builtins.str
None *Q
varkwD
Union[builtins.str,None]
builtins.str"builtins.str
None *m
defaults]
Union[builtins.tuple[Any],None].
builtins.tuple[Any]
Any"builtins.tuple
None *\

kwonlyargsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *©
kwonlydefaultsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *j
annotationsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict *ò
__new__inspect.FullArgSpec.__new__"
inspect.FullArgSpec._NT“
‹Tuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],Union[builtins.tuple[Any],None],builtins.list[builtins.str],Union[builtins.dict[builtins.str,Any],None],builtins.dict[builtins.str,Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None]
Union[builtins.tuple[Any],None].
builtins.tuple[Any]
Any"builtins.tuple
NoneJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
NoneW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*•
_clsö
Type[inspect.FullArgSpec._NT]
inspect.FullArgSpec._NT“
‹Tuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],Union[builtins.tuple[Any],None],builtins.list[builtins.str],Union[builtins.dict[builtins.str,Any],None],builtins.dict[builtins.str,Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None]
Union[builtins.tuple[Any],None].
builtins.tuple[Any]
Any"builtins.tuple
NoneJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
NoneW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"type*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*Q
varargsD
Union[builtins.str,None]
builtins.str"builtins.str
None*O
varkwD
Union[builtins.str,None]
builtins.str"builtins.str
None*k
defaults]
Union[builtins.tuple[Any],None].
builtins.tuple[Any]
Any"builtins.tuple
None*Z

kwonlyargsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*ß
kwonlydefaultsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None*h
annotationsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*˛
_asdictinspect.FullArgSpec._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*¸
_self
inspect.FullArgSpec._NT“
‹Tuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],Union[builtins.tuple[Any],None],builtins.list[builtins.str],Union[builtins.dict[builtins.str,Any],None],builtins.dict[builtins.str,Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None]
Union[builtins.tuple[Any],None].
builtins.tuple[Any]
Any"builtins.tuple
NoneJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
NoneW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*´
_makeinspect.FullArgSpec._make"
inspect.FullArgSpec._NT“
‹Tuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],Union[builtins.tuple[Any],None],builtins.list[builtins.str],Union[builtins.dict[builtins.str,Any],None],builtins.dict[builtins.str,Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None]
Union[builtins.tuple[Any],None].
builtins.tuple[Any]
Any"builtins.tuple
NoneJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
NoneW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*•
_clsö
Type[inspect.FullArgSpec._NT]
inspect.FullArgSpec._NT“
‹Tuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],Union[builtins.tuple[Any],None],builtins.list[builtins.str],Union[builtins.dict[builtins.str,Any],None],builtins.dict[builtins.str,Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None]
Union[builtins.tuple[Any],None].
builtins.tuple[Any]
Any"builtins.tuple
NoneJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
NoneW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0: prl
argsinspect.FullArgSpec.argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrl
varargsinspect.FullArgSpec.varargsD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerh
varkwinspect.FullArgSpec.varkwD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerá
defaultsinspect.FullArgSpec.defaults]
Union[builtins.tuple[Any],None].
builtins.tuple[Any]
Any"builtins.tuple
Nonerx

kwonlyargsinspect.FullArgSpec.kwonlyargsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listr…
kwonlydefaults"inspect.FullArgSpec.kwonlydefaultsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
Nonerá
annotationsinspect.FullArgSpec.annotationsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrl
argsinspect.FullArgSpec.argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrl
varargsinspect.FullArgSpec.varargsD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerh
varkwinspect.FullArgSpec.varkwD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerá
defaultsinspect.FullArgSpec.defaults]
Union[builtins.tuple[Any],None].
builtins.tuple[Any]
Any"builtins.tuple
Nonerx

kwonlyargsinspect.FullArgSpec.kwonlyargsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listr…
kwonlydefaults"inspect.FullArgSpec.kwonlydefaultsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
Nonerá
annotationsinspect.FullArgSpec.annotationsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictr‡
_fieldsinspect.FullArgSpec._fields∑
aTuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrâ
_field_types inspect.FullArgSpec._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrè
_field_defaults#inspect.FullArgSpec._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrD
_sourceinspect.FullArgSpec._source
builtins.str"builtins.strrè
__annotations__#inspect.FullArgSpec.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictÌ.
ArgInfoinspect.ArgInfo"builtins.tuple*¶

_replaceinspect.ArgInfo._replace"√
inspect.ArgInfo._NT©
tTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],builtins.dict[builtins.str,Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
NoneW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*œ
_self√
inspect.ArgInfo._NT©
tTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],builtins.dict[builtins.str,Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
NoneW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*V
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *S
varargsD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
keywordsD
Union[builtins.str,None]
builtins.str"builtins.str
None *e
localsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict *¡

__new__inspect.ArgInfo.__new__"√
inspect.ArgInfo._NT©
tTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],builtins.dict[builtins.str,Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
NoneW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Ù
_clsÈ
Type[inspect.ArgInfo._NT]√
inspect.ArgInfo._NT©
tTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],builtins.dict[builtins.str,Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
NoneW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"type*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*Q
varargsD
Union[builtins.str,None]
builtins.str"builtins.str
None*R
keywordsD
Union[builtins.str,None]
builtins.str"builtins.str
None*c
localsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Õ
_asdictinspect.ArgInfo._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*œ
_self√
inspect.ArgInfo._NT©
tTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],builtins.dict[builtins.str,Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
NoneW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*…
_makeinspect.ArgInfo._make"√
inspect.ArgInfo._NT©
tTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],builtins.dict[builtins.str,Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
NoneW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Ù
_clsÈ
Type[inspect.ArgInfo._NT]√
inspect.ArgInfo._NT©
tTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],builtins.dict[builtins.str,Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
NoneW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0: prh
argsinspect.ArgInfo.argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrh
varargsinspect.ArgInfo.varargsD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerj
keywordsinspect.ArgInfo.keywordsD
Union[builtins.str,None]
builtins.str"builtins.str
Nonery
localsinspect.ArgInfo.localsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrh
argsinspect.ArgInfo.argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrh
varargsinspect.ArgInfo.varargsD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerj
keywordsinspect.ArgInfo.keywordsD
Union[builtins.str,None]
builtins.str"builtins.str
Nonery
localsinspect.ArgInfo.localsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictr€
_fieldsinspect.ArgInfo._fields∂
:Tuple[builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrÖ
_field_typesinspect.ArgInfo._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrã
_field_defaultsinspect.ArgInfo._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictr@
_sourceinspect.ArgInfo._source
builtins.str"builtins.strrã
__annotations__inspect.ArgInfo.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict˙5
ClosureVarsinspect.ClosureVars"builtins.tuple*à
_replaceinspect.ClosureVars._replace"î
inspect.ClosureVars._NTˆ
äTuple[typing.Mapping[builtins.str,Any],typing.Mapping[builtins.str,Any],typing.Mapping[builtins.str,Any],typing.AbstractSet[builtins.str]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingT
 typing.AbstractSet[builtins.str]
builtins.str"builtins.str"typing.AbstractSet*†
_selfî
inspect.ClosureVars._NTˆ
äTuple[typing.Mapping[builtins.str,Any],typing.Mapping[builtins.str,Any],typing.Mapping[builtins.str,Any],typing.AbstractSet[builtins.str]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingT
 typing.AbstractSet[builtins.str]
builtins.str"builtins.str"typing.AbstractSet*j
	nonlocalsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping *h
globalsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping *i
builtinsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping *c
unboundT
 typing.AbstractSet[builtins.str]
builtins.str"builtins.str"typing.AbstractSet *ß
__new__inspect.ClosureVars.__new__"î
inspect.ClosureVars._NTˆ
äTuple[typing.Mapping[builtins.str,Any],typing.Mapping[builtins.str,Any],typing.Mapping[builtins.str,Any],typing.AbstractSet[builtins.str]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingT
 typing.AbstractSet[builtins.str]
builtins.str"builtins.str"typing.AbstractSet*…
_clsæ
Type[inspect.ClosureVars._NT]î
inspect.ClosureVars._NTˆ
äTuple[typing.Mapping[builtins.str,Any],typing.Mapping[builtins.str,Any],typing.Mapping[builtins.str,Any],typing.AbstractSet[builtins.str]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingT
 typing.AbstractSet[builtins.str]
builtins.str"builtins.str"typing.AbstractSet"type*h
	nonlocalsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping*f
globalsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping*g
builtinsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping*a
unboundT
 typing.AbstractSet[builtins.str]
builtins.str"builtins.str"typing.AbstractSet*¢
_asdictinspect.ClosureVars._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*†
_selfî
inspect.ClosureVars._NTˆ
äTuple[typing.Mapping[builtins.str,Any],typing.Mapping[builtins.str,Any],typing.Mapping[builtins.str,Any],typing.AbstractSet[builtins.str]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingT
 typing.AbstractSet[builtins.str]
builtins.str"builtins.str"typing.AbstractSet*Û	
_makeinspect.ClosureVars._make"î
inspect.ClosureVars._NTˆ
äTuple[typing.Mapping[builtins.str,Any],typing.Mapping[builtins.str,Any],typing.Mapping[builtins.str,Any],typing.AbstractSet[builtins.str]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingT
 typing.AbstractSet[builtins.str]
builtins.str"builtins.str"typing.AbstractSet*…
_clsæ
Type[inspect.ClosureVars._NT]î
inspect.ClosureVars._NTˆ
äTuple[typing.Mapping[builtins.str,Any],typing.Mapping[builtins.str,Any],typing.Mapping[builtins.str,Any],typing.AbstractSet[builtins.str]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingT
 typing.AbstractSet[builtins.str]
builtins.str"builtins.str"typing.AbstractSet"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0: prÖ
	nonlocalsinspect.ClosureVars.nonlocalsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingrÅ
globalsinspect.ClosureVars.globalsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingrÉ
builtinsinspect.ClosureVars.builtinsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mappingr|
unboundinspect.ClosureVars.unboundT
 typing.AbstractSet[builtins.str]
builtins.str"builtins.str"typing.AbstractSetrÖ
	nonlocalsinspect.ClosureVars.nonlocalsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingrÅ
globalsinspect.ClosureVars.globalsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingrÉ
builtinsinspect.ClosureVars.builtinsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mappingr|
unboundinspect.ClosureVars.unboundT
 typing.AbstractSet[builtins.str]
builtins.str"builtins.str"typing.AbstractSetrﬂ
_fieldsinspect.ClosureVars._fields∂
:Tuple[builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrâ
_field_types inspect.ClosureVars._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrè
_field_defaults#inspect.ClosureVars._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrD
_sourceinspect.ClosureVars._source
builtins.str"builtins.strrè
__annotations__#inspect.ClosureVars.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict≠/
	Tracebackinspect.Traceback"builtins.tuple*ê

_replaceinspect.Traceback._replace"≤
inspect.Traceback._NTñ
nTuple[builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]
builtins.str"builtins.str
builtins.int"builtins.int
builtins.str"builtins.strÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.int,None]
builtins.int"builtins.int
None*æ
_self≤
inspect.Traceback._NTñ
nTuple[builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]
builtins.str"builtins.str
builtins.int"builtins.int
builtins.str"builtins.strÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.int,None]
builtins.int"builtins.int
None*,
filename
builtins.str"builtins.str **
lineno
builtins.int"builtins.int *,
function
builtins.str"builtins.str *ñ
code_contextÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *Q
indexD
Union[builtins.int,None]
builtins.int"builtins.int
None *´

__new__inspect.Traceback.__new__"≤
inspect.Traceback._NTñ
nTuple[builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]
builtins.str"builtins.str
builtins.int"builtins.int
builtins.str"builtins.strÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.int,None]
builtins.int"builtins.int
None*Â
_cls⁄
Type[inspect.Traceback._NT]≤
inspect.Traceback._NTñ
nTuple[builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]
builtins.str"builtins.str
builtins.int"builtins.int
builtins.str"builtins.strÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.int,None]
builtins.int"builtins.int
None"type**
filename
builtins.str"builtins.str*(
lineno
builtins.int"builtins.int**
function
builtins.str"builtins.str*î
code_contextÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None*O
indexD
Union[builtins.int,None]
builtins.int"builtins.int
None*æ
_asdictinspect.Traceback._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*æ
_self≤
inspect.Traceback._NTñ
nTuple[builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]
builtins.str"builtins.str
builtins.int"builtins.int
builtins.str"builtins.strÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.int,None]
builtins.int"builtins.int
None*´
_makeinspect.Traceback._make"≤
inspect.Traceback._NTñ
nTuple[builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]
builtins.str"builtins.str
builtins.int"builtins.int
builtins.str"builtins.strÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.int,None]
builtins.int"builtins.int
None*Â
_cls⁄
Type[inspect.Traceback._NT]≤
inspect.Traceback._NTñ
nTuple[builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]
builtins.str"builtins.str
builtins.int"builtins.int
builtins.str"builtins.strÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.int,None]
builtins.int"builtins.int
None"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0: prD
filenameinspect.Traceback.filename
builtins.str"builtins.strr@
linenoinspect.Traceback.lineno
builtins.int"builtins.intrD
functioninspect.Traceback.function
builtins.str"builtins.strr≤
code_contextinspect.Traceback.code_contextÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
Nonerf
indexinspect.Traceback.indexD
Union[builtins.int,None]
builtins.int"builtins.int
NonerD
filenameinspect.Traceback.filename
builtins.str"builtins.strr@
linenoinspect.Traceback.lineno
builtins.int"builtins.intrD
functioninspect.Traceback.function
builtins.str"builtins.strr≤
code_contextinspect.Traceback.code_contextÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
Nonerf
indexinspect.Traceback.indexD
Union[builtins.int,None]
builtins.int"builtins.int
Nonerà
_fieldsinspect.Traceback._fields·
GTuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrá
_field_typesinspect.Traceback._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrç
_field_defaults!inspect.Traceback._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrB
_sourceinspect.Traceback._source
builtins.str"builtins.strrç
__annotations__!inspect.Traceback.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict∞4
	FrameInfoinspect.FrameInfo"builtins.tuple*©
_replaceinspect.FrameInfo._replace"Ê
inspect.FrameInfo._NT 
~Tuple[types.FrameType,builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]"
types.FrameType"types.FrameType
builtins.str"builtins.str
builtins.int"builtins.int
builtins.str"builtins.strÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.int,None]
builtins.int"builtins.int
None*Ú
_selfÊ
inspect.FrameInfo._NT 
~Tuple[types.FrameType,builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]"
types.FrameType"types.FrameType
builtins.str"builtins.str
builtins.int"builtins.int
builtins.str"builtins.strÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.int,None]
builtins.int"builtins.int
None*/
frame"
types.FrameType"types.FrameType *,
filename
builtins.str"builtins.str **
lineno
builtins.int"builtins.int *,
function
builtins.str"builtins.str *ñ
code_contextÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *Q
indexD
Union[builtins.int,None]
builtins.int"builtins.int
None *¬
__new__inspect.FrameInfo.__new__"Ê
inspect.FrameInfo._NT 
~Tuple[types.FrameType,builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]"
types.FrameType"types.FrameType
builtins.str"builtins.str
builtins.int"builtins.int
builtins.str"builtins.strÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.int,None]
builtins.int"builtins.int
None*ô
_clsé
Type[inspect.FrameInfo._NT]Ê
inspect.FrameInfo._NT 
~Tuple[types.FrameType,builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]"
types.FrameType"types.FrameType
builtins.str"builtins.str
builtins.int"builtins.int
builtins.str"builtins.strÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.int,None]
builtins.int"builtins.int
None"type*-
frame"
types.FrameType"types.FrameType**
filename
builtins.str"builtins.str*(
lineno
builtins.int"builtins.int**
function
builtins.str"builtins.str*î
code_contextÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None*O
indexD
Union[builtins.int,None]
builtins.int"builtins.int
None*Ú
_asdictinspect.FrameInfo._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Ú
_selfÊ
inspect.FrameInfo._NT 
~Tuple[types.FrameType,builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]"
types.FrameType"types.FrameType
builtins.str"builtins.str
builtins.int"builtins.int
builtins.str"builtins.strÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.int,None]
builtins.int"builtins.int
None*ì	
_makeinspect.FrameInfo._make"Ê
inspect.FrameInfo._NT 
~Tuple[types.FrameType,builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]"
types.FrameType"types.FrameType
builtins.str"builtins.str
builtins.int"builtins.int
builtins.str"builtins.strÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.int,None]
builtins.int"builtins.int
None*ô
_clsé
Type[inspect.FrameInfo._NT]Ê
inspect.FrameInfo._NT 
~Tuple[types.FrameType,builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]"
types.FrameType"types.FrameType
builtins.str"builtins.str
builtins.int"builtins.int
builtins.str"builtins.strÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.int,None]
builtins.int"builtins.int
None"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0: prD
frameinspect.FrameInfo.frame"
types.FrameType"types.FrameTyperD
filenameinspect.FrameInfo.filename
builtins.str"builtins.strr@
linenoinspect.FrameInfo.lineno
builtins.int"builtins.intrD
functioninspect.FrameInfo.function
builtins.str"builtins.strr≤
code_contextinspect.FrameInfo.code_contextÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
Nonerf
indexinspect.FrameInfo.indexD
Union[builtins.int,None]
builtins.int"builtins.int
NonerD
frameinspect.FrameInfo.frame"
types.FrameType"types.FrameTyperD
filenameinspect.FrameInfo.filename
builtins.str"builtins.strr@
linenoinspect.FrameInfo.lineno
builtins.int"builtins.intrD
functioninspect.FrameInfo.function
builtins.str"builtins.strr≤
code_contextinspect.FrameInfo.code_contextÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
Nonerf
indexinspect.FrameInfo.indexD
Union[builtins.int,None]
builtins.int"builtins.int
Noner≥
_fieldsinspect.FrameInfo._fieldså
TTuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrá
_field_typesinspect.FrameInfo._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrç
_field_defaults!inspect.FrameInfo._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrB
_sourceinspect.FrameInfo._source
builtins.str"builtins.strrç
__annotations__!inspect.FrameInfo.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict√C
	Attributeinspect.Attribute"builtins.tuple*Ò
_replaceinspect.Attribute._replace"¡
inspect.Attribute._NT•
¶Tuple[builtins.str,Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]],builtins.type,builtins.object]
builtins.str"builtins.strï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
builtins.type"builtins.type"
builtins.object"builtins.object*Õ
_self¡
inspect.Attribute._NT•
¶Tuple[builtins.str,Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]],builtins.type,builtins.object]
builtins.str"builtins.strï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
builtins.type"builtins.type"
builtins.object"builtins.object*(
name
builtins.str"builtins.str *¢
kindï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *4
defining_class
builtins.type"builtins.type *0
object"
builtins.object"builtins.object *é
__new__inspect.Attribute.__new__"¡
inspect.Attribute._NT•
¶Tuple[builtins.str,Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]],builtins.type,builtins.object]
builtins.str"builtins.strï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
builtins.type"builtins.type"
builtins.object"builtins.object*Ù
_clsÈ
Type[inspect.Attribute._NT]¡
inspect.Attribute._NT•
¶Tuple[builtins.str,Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]],builtins.type,builtins.object]
builtins.str"builtins.strï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
builtins.type"builtins.type"
builtins.object"builtins.object"type*&
name
builtins.str"builtins.str*†
kindï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*2
defining_class
builtins.type"builtins.type*.
object"
builtins.object"builtins.object*Õ
_asdictinspect.Attribute._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Õ
_self¡
inspect.Attribute._NT•
¶Tuple[builtins.str,Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]],builtins.type,builtins.object]
builtins.str"builtins.strï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
builtins.type"builtins.type"
builtins.object"builtins.object*…
_makeinspect.Attribute._make"¡
inspect.Attribute._NT•
¶Tuple[builtins.str,Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]],builtins.type,builtins.object]
builtins.str"builtins.strï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
builtins.type"builtins.type"
builtins.object"builtins.object*Ù
_clsÈ
Type[inspect.Attribute._NT]¡
inspect.Attribute._NT•
¶Tuple[builtins.str,Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]],builtins.type,builtins.object]
builtins.str"builtins.strï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
builtins.type"builtins.type"
builtins.object"builtins.object"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0: pr<
nameinspect.Attribute.name
builtins.str"builtins.strr∂
kindinspect.Attribute.kindï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strrR
defining_class inspect.Attribute.defining_class
builtins.type"builtins.typerF
objectinspect.Attribute.object"
builtins.object"builtins.objectr<
nameinspect.Attribute.name
builtins.str"builtins.strr∂
kindinspect.Attribute.kindï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strrR
defining_class inspect.Attribute.defining_class
builtins.type"builtins.typerF
objectinspect.Attribute.object"
builtins.object"builtins.objectr›
_fieldsinspect.Attribute._fields∂
:Tuple[builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrá
_field_typesinspect.Attribute._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrç
_field_defaults!inspect.Attribute._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrB
_sourceinspect.Attribute._source
builtins.str"builtins.strrç
__annotations__!inspect.Attribute.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictî
getmodulenameinspect.getmodulename"D
Union[builtins.str,None]
builtins.str"builtins.str
None*&
path
builtins.str"builtins.strl
ismoduleinspect.ismodule"
builtins.bool"builtins.bool*.
object"
builtins.object"builtins.objectj
isclassinspect.isclass"
builtins.bool"builtins.bool*.
object"
builtins.object"builtins.objectl
ismethodinspect.ismethod"
builtins.bool"builtins.bool*.
object"
builtins.object"builtins.objectp

isfunctioninspect.isfunction"
builtins.bool"builtins.bool*.
object"
builtins.object"builtins.objectr
isgeneratorinspect.isgenerator"
builtins.bool"builtins.bool*.
object"
builtins.object"builtins.objectr
iscoroutineinspect.iscoroutine"
builtins.bool"builtins.bool*.
object"
builtins.object"builtins.objectr
isawaitableinspect.isawaitable"
builtins.bool"builtins.bool*.
object"
builtins.object"builtins.objectp

isasyncgeninspect.isasyncgen"
builtins.bool"builtins.bool*.
object"
builtins.object"builtins.objectr
istracebackinspect.istraceback"
builtins.bool"builtins.bool*.
object"
builtins.object"builtins.objectj
isframeinspect.isframe"
builtins.bool"builtins.bool*.
object"
builtins.object"builtins.objecth
iscodeinspect.iscode"
builtins.bool"builtins.bool*.
object"
builtins.object"builtins.objectn
	isbuiltininspect.isbuiltin"
builtins.bool"builtins.bool*.
object"
builtins.object"builtins.objectn
	isroutineinspect.isroutine"
builtins.bool"builtins.bool*.
object"
builtins.object"builtins.objectÄ
ismethoddescriptorinspect.ismethoddescriptor"
builtins.bool"builtins.bool*.
object"
builtins.object"builtins.objectÄ
ismemberdescriptorinspect.ismemberdescriptor"
builtins.bool"builtins.bool*.
object"
builtins.object"builtins.objectp

isabstractinspect.isabstract"
builtins.bool"builtins.bool*.
object"
builtins.object"builtins.objectÄ
isgetsetdescriptorinspect.isgetsetdescriptor"
builtins.bool"builtins.bool*.
object"
builtins.object"builtins.object|
isdatadescriptorinspect.isdatadescriptor"
builtins.bool"builtins.bool*.
object"
builtins.object"builtins.objectÜ

findsourceinspect.findsource"ù
/Tuple[builtins.list[builtins.str],builtins.int]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
builtins.int"builtins.int*√
object∂
£TypeAlias[Union[types.ModuleType,Type[Any],types.MethodType,types.FunctionType,types.TracebackType,types.FrameType,types.CodeType,CallableType[builtins.function]]]
òUnion[types.ModuleType,Type[Any],types.MethodType,types.FunctionType,types.TracebackType,types.FrameType,types.CodeType,CallableType[builtins.function]]$
types.ModuleType"types.ModuleType
	Type[Any]
Any"type$
types.MethodType"types.MethodType(
types.FunctionType"types.FunctionType*
types.TracebackType"types.TracebackType"
types.FrameType"types.FrameType 
types.CodeType"types.CodeTypeK
CallableType[builtins.function]&
builtins.function"builtins.function"inspect._SourceObjectType€

getabsfileinspect.getabsfile"
builtins.str"builtins.str*√
object∂
£TypeAlias[Union[types.ModuleType,Type[Any],types.MethodType,types.FunctionType,types.TracebackType,types.FrameType,types.CodeType,CallableType[builtins.function]]]
òUnion[types.ModuleType,Type[Any],types.MethodType,types.FunctionType,types.TracebackType,types.FrameType,types.CodeType,CallableType[builtins.function]]$
types.ModuleType"types.ModuleType
	Type[Any]
Any"type$
types.MethodType"types.MethodType(
types.FunctionType"types.FunctionType*
types.TracebackType"types.TracebackType"
types.FrameType"types.FrameType 
types.CodeType"types.CodeTypeK
CallableType[builtins.function]&
builtins.function"builtins.function"inspect._SourceObjectType*U
	_filenameD
Union[builtins.str,None]
builtins.str"builtins.str
None «
getblockinspect.getblock"N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*Y
linesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequenceé
getdocinspect.getdoc"D
Union[builtins.str,None]
builtins.str"builtins.str
None*.
object"
builtins.object"builtins.objectò
getcommentsinspect.getcomments"D
Union[builtins.str,None]
builtins.str"builtins.str
None*.
object"
builtins.object"builtins.object˛
getfileinspect.getfile"
builtins.str"builtins.str*√
object∂
£TypeAlias[Union[types.ModuleType,Type[Any],types.MethodType,types.FunctionType,types.TracebackType,types.FrameType,types.CodeType,CallableType[builtins.function]]]
òUnion[types.ModuleType,Type[Any],types.MethodType,types.FunctionType,types.TracebackType,types.FrameType,types.CodeType,CallableType[builtins.function]]$
types.ModuleType"types.ModuleType
	Type[Any]
Any"type$
types.MethodType"types.MethodType(
types.FunctionType"types.FunctionType*
types.TracebackType"types.TracebackType"
types.FrameType"types.FrameType 
types.CodeType"types.CodeTypeK
CallableType[builtins.function]&
builtins.function"builtins.function"inspect._SourceObjectType˜
	getmoduleinspect.getmodule"P
Union[types.ModuleType,None]$
types.ModuleType"types.ModuleType
None*.
object"
builtins.object"builtins.object*U
	_filenameD
Union[builtins.str,None]
builtins.str"builtins.str
None ≤
getsourcefileinspect.getsourcefile"D
Union[builtins.str,None]
builtins.str"builtins.str
None*√
object∂
£TypeAlias[Union[types.ModuleType,Type[Any],types.MethodType,types.FunctionType,types.TracebackType,types.FrameType,types.CodeType,CallableType[builtins.function]]]
òUnion[types.ModuleType,Type[Any],types.MethodType,types.FunctionType,types.TracebackType,types.FrameType,types.CodeType,CallableType[builtins.function]]$
types.ModuleType"types.ModuleType
	Type[Any]
Any"type$
types.MethodType"types.MethodType(
types.FunctionType"types.FunctionType*
types.TracebackType"types.TracebackType"
types.FrameType"types.FrameType 
types.CodeType"types.CodeTypeK
CallableType[builtins.function]&
builtins.function"builtins.function"inspect._SourceObjectTypeé
getsourcelinesinspect.getsourcelines"ù
/Tuple[builtins.list[builtins.str],builtins.int]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
builtins.int"builtins.int*√
object∂
£TypeAlias[Union[types.ModuleType,Type[Any],types.MethodType,types.FunctionType,types.TracebackType,types.FrameType,types.CodeType,CallableType[builtins.function]]]
òUnion[types.ModuleType,Type[Any],types.MethodType,types.FunctionType,types.TracebackType,types.FrameType,types.CodeType,CallableType[builtins.function]]$
types.ModuleType"types.ModuleType
	Type[Any]
Any"type$
types.MethodType"types.MethodType(
types.FunctionType"types.FunctionType*
types.TracebackType"types.TracebackType"
types.FrameType"types.FrameType 
types.CodeType"types.CodeTypeK
CallableType[builtins.function]&
builtins.function"builtins.function"inspect._SourceObjectTypeÇ
	getsourceinspect.getsource"
builtins.str"builtins.str*√
object∂
£TypeAlias[Union[types.ModuleType,Type[Any],types.MethodType,types.FunctionType,types.TracebackType,types.FrameType,types.CodeType,CallableType[builtins.function]]]
òUnion[types.ModuleType,Type[Any],types.MethodType,types.FunctionType,types.TracebackType,types.FrameType,types.CodeType,CallableType[builtins.function]]$
types.ModuleType"types.ModuleType
	Type[Any]
Any"type$
types.MethodType"types.MethodType(
types.FunctionType"types.FunctionType*
types.TracebackType"types.TracebackType"
types.FrameType"types.FrameType 
types.CodeType"types.CodeTypeK
CallableType[builtins.function]&
builtins.function"builtins.function"inspect._SourceObjectTypea
cleandocinspect.cleandoc"
builtins.str"builtins.str*%
doc
builtins.str"builtins.strf

indentsizeinspect.indentsize"
builtins.int"builtins.int*&
line
builtins.str"builtins.str•
	signatureinspect.signature"&
inspect.Signature"inspect.Signature*¶
objú
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"inspect._IntrospectableCallable*4
follow_wrapped
builtins.bool"builtins.bool ‹
getclasstreeinspect.getclasstree",
builtins.list[Any]
Any"builtins.list*Z
classesM
builtins.list[builtins.type]
builtins.type"builtins.type"builtins.list*,
unique
builtins.bool"builtins.bool º
walktreeinspect.walktree",
builtins.list[Any]
Any"builtins.list*Z
classesM
builtins.list[builtins.type]
builtins.type"builtins.type"builtins.list*ƒ
childrenµ
6typing.Mapping[Type[Any],builtins.list[builtins.type]]
	Type[Any]
Any"typeM
builtins.list[builtins.type]
builtins.type"builtins.type"builtins.list"typing.Mapping*M
parentA
Union[Type[Any],None]
	Type[Any]
Any"type
None
getargsinspect.getargs"©
_TypeAlias[Tuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None]]]∞
TTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None"inspect.Arguments*(
co 
types.CodeType"types.CodeType–

getargspecinspect.getargspec"ˇ
sTypeAlias[Tuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],builtins.tuple[Any]]]Ù
hTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],builtins.tuple[Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None.
builtins.tuple[Any]
Any"builtins.tuple"inspect.ArgSpec*,
func"
builtins.object"builtins.objectØ	
getfullargspecinspect.getfullargspec"÷
ÁTypeAlias[Tuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],Union[builtins.tuple[Any],None],builtins.list[builtins.str],Union[builtins.dict[builtins.str,Any],None],builtins.dict[builtins.str,Any]]]“
‹Tuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],Union[builtins.tuple[Any],None],builtins.list[builtins.str],Union[builtins.dict[builtins.str,Any],None],builtins.dict[builtins.str,Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None]
Union[builtins.tuple[Any],None].
builtins.tuple[Any]
Any"builtins.tuple
NoneJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
NoneW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"inspect.FullArgSpec*,
func"
builtins.object"builtins.objectñ
getargvaluesinspect.getargvalues"¿
TypeAlias[Tuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],builtins.dict[builtins.str,Any]]]©
tTuple[builtins.list[builtins.str],Union[builtins.str,None],Union[builtins.str,None],builtins.dict[builtins.str,Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
NoneW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"inspect.ArgInfo*-
frame"
types.FrameType"types.FrameType◊
formatannotationinspect.formatannotation"
builtins.str"builtins.str*2

annotation"
builtins.object"builtins.object*W
base_moduleD
Union[builtins.str,None]
builtins.str"builtins.str
None Ω
formatannotationrelativeto"inspect.formatannotationrelativeto"K
CallableType[builtins.function]&
builtins.function"builtins.function*.
object"
builtins.object"builtins.object≤
formatargspecinspect.formatargspec"
builtins.str"builtins.str*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*S
varargsD
Union[builtins.str,None]
builtins.str"builtins.str
None *Q
varkwD
Union[builtins.str,None]
builtins.str"builtins.str
None *m
defaults]
Union[builtins.tuple[Any],None].
builtins.tuple[Any]
Any"builtins.tuple
None *ö

kwonlyargsá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *¨
kwonlydefaultsï
,Union[typing.Mapping[builtins.str,Any],None]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping
None *l
annotationsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping *\
	formatargK
CallableType[builtins.function]&
builtins.function"builtins.function *`
formatvarargsK
CallableType[builtins.function]&
builtins.function"builtins.function *^
formatvarkwK
CallableType[builtins.function]&
builtins.function"builtins.function *^
formatvalueK
CallableType[builtins.function]&
builtins.function"builtins.function *`
formatreturnsK
CallableType[builtins.function]&
builtins.function"builtins.function *c
formatannotationK
CallableType[builtins.function]&
builtins.function"builtins.function €
formatargvaluesinspect.formatargvalues"
builtins.str"builtins.str*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*Q
varargsD
Union[builtins.str,None]
builtins.str"builtins.str
None*O
varkwD
Union[builtins.str,None]
builtins.str"builtins.str
None*¢
localsï
,Union[typing.Mapping[builtins.str,Any],None]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping
None*ò
	formatargÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ú
formatvarargsÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ö
formatvarkwÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ö
formatvalueÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None í
getmroinspect.getmro"O
builtins.tuple[builtins.type]
builtins.type"builtins.type"builtins.tuple*'
cls
builtins.type"builtins.type‚
getcallargsinspect.getcallargs"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*MK
CallableType[builtins.function]&
builtins.function"builtins.function*

args *

kwds ˝
getclosurevarsinspect.getclosurevars"®
ïTypeAlias[Tuple[typing.Mapping[builtins.str,Any],typing.Mapping[builtins.str,Any],typing.Mapping[builtins.str,Any],typing.AbstractSet[builtins.str]]]ˆ
äTuple[typing.Mapping[builtins.str,Any],typing.Mapping[builtins.str,Any],typing.Mapping[builtins.str,Any],typing.AbstractSet[builtins.str]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.MappingT
 typing.AbstractSet[builtins.str]
builtins.str"builtins.str"typing.AbstractSet"inspect.ClosureVars*ß
funcú
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"inspect._IntrospectableCallableé
unwrapinspect.unwrap"
Any*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*ì
stopÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None â
getframeinfoinspect.getframeinfo"©
yTypeAlias[Tuple[builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]]ñ
nTuple[builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]
builtins.str"builtins.str
builtins.int"builtins.int
builtins.str"builtins.strÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.int,None]
builtins.int"builtins.int
None"inspect.Traceback*â
frame~
*Union[types.FrameType,types.TracebackType]"
types.FrameType"types.FrameType*
types.TracebackType"types.TracebackType*+
context
builtins.int"builtins.int á
getouterframesinspect.getouterframes"õ
òbuiltins.list[TypeAlias[Tuple[types.FrameType,builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]]]Ó
âTypeAlias[Tuple[types.FrameType,builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]] 
~Tuple[types.FrameType,builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]"
types.FrameType"types.FrameType
builtins.str"builtins.str
builtins.int"builtins.int
builtins.str"builtins.strÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.int,None]
builtins.int"builtins.int
None"inspect.FrameInfo"builtins.list*
frame
Any*+
context
builtins.int"builtins.int ß
getinnerframesinspect.getinnerframes"õ
òbuiltins.list[TypeAlias[Tuple[types.FrameType,builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]]]Ó
âTypeAlias[Tuple[types.FrameType,builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]] 
~Tuple[types.FrameType,builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]"
types.FrameType"types.FrameType
builtins.str"builtins.str
builtins.int"builtins.int
builtins.str"builtins.strÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.int,None]
builtins.int"builtins.int
None"inspect.FrameInfo"builtins.list*2
tb*
types.TracebackType"types.TracebackType*+
context
builtins.int"builtins.int k
	getlinenoinspect.getlineno"
builtins.int"builtins.int*-
frame"
types.FrameType"types.FrameTypes
currentframeinspect.currentframe"M
Union[types.FrameType,None]"
types.FrameType"types.FrameType
None·
stackinspect.stack"õ
òbuiltins.list[TypeAlias[Tuple[types.FrameType,builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]]]Ó
âTypeAlias[Tuple[types.FrameType,builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]] 
~Tuple[types.FrameType,builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]"
types.FrameType"types.FrameType
builtins.str"builtins.str
builtins.int"builtins.int
builtins.str"builtins.strÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.int,None]
builtins.int"builtins.int
None"inspect.FrameInfo"builtins.list*+
context
builtins.int"builtins.int ·
traceinspect.trace"õ
òbuiltins.list[TypeAlias[Tuple[types.FrameType,builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]]]Ó
âTypeAlias[Tuple[types.FrameType,builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]] 
~Tuple[types.FrameType,builtins.str,builtins.int,builtins.str,Union[builtins.list[builtins.str],None],Union[builtins.int,None]]"
types.FrameType"types.FrameType
builtins.str"builtins.str
builtins.int"builtins.int
builtins.str"builtins.strÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.int,None]
builtins.int"builtins.int
None"inspect.FrameInfo"builtins.list*+
context
builtins.int"builtins.int Ω
getattr_staticinspect.getattr_static"
Any*+
obj"
builtins.object"builtins.object*&
attr
builtins.str"builtins.str*5
default&
Union[Any,None]
Any
None ‘
getgeneratorstateinspect.getgeneratorstate"∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*[
	generatorL
typing.Generator[Any,Any,Any]
Any
Any
Any"typing.Generator‘
getcoroutinestateinspect.getcoroutinestate"∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*[
	coroutineL
typing.Coroutine[Any,Any,Any]
Any
Any
Any"typing.CoroutineÊ
getgeneratorlocalsinspect.getgeneratorlocals"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*[
	generatorL
typing.Generator[Any,Any,Any]
Any
Any
Any"typing.GeneratorÊ
getcoroutinelocalsinspect.getcoroutinelocals"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*[
	coroutineL
typing.Coroutine[Any,Any,Any]
Any
Any
Any"typing.Coroutine¶	
classify_class_attrsinspect.classify_class_attrs"∆
¿builtins.list[TypeAlias[Tuple[builtins.str,Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]],builtins.type,builtins.object]]]Ò
±TypeAlias[Tuple[builtins.str,Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]],builtins.type,builtins.object]]•
¶Tuple[builtins.str,Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]],builtins.type,builtins.object]
builtins.str"builtins.strï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
builtins.type"builtins.type"
builtins.object"builtins.object"inspect.Attribute"builtins.list*'
cls
builtins.type"builtins.type"ñ	

getmembersinspect.getmembers∆

getmembersinspect.getmembers"©
8TypeAlias[builtins.list[Tuple[builtins.str,inspect._T]]]∆
-builtins.list[Tuple[builtins.str,inspect._T]]Ö
Tuple[builtins.str,inspect._T]
builtins.str"builtins.strC

inspect._T"
builtins.object"builtins.object"builtins.object"builtins.list""inspect._GetMembersReturnTypeGuard*.
object"
builtins.object"builtins.object*≤
	predicate¢
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"%inspect._GetMembersPredicateTypeGuard0:typing.overloadX™

getmembersinspect.getmembers"Õ
1TypeAlias[builtins.list[Tuple[builtins.str,Any]]]{
&builtins.list[Tuple[builtins.str,Any]]B
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.list"inspect._GetMembersReturn*.
object"
builtins.object"builtins.object*Ú
	predicate‡
6Union[TypeAlias[CallableType[builtins.function]],None]ô
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"inspect._GetMembersPredicate
None 0:typing.overloadX"…
isgeneratorfunctioninspect.isgeneratorfunctionΩ
isgeneratorfunctioninspect.isgeneratorfunction"
builtins.bool"builtins.bool*T
objK
CallableType[builtins.function]&
builtins.function"builtins.function0:typing.overloadXΩ
isgeneratorfunctioninspect.isgeneratorfunction"
builtins.bool"builtins.bool*T
objK
CallableType[builtins.function]&
builtins.function"builtins.function0:typing.overloadXî
isgeneratorfunctioninspect.isgeneratorfunction"
builtins.bool"builtins.bool*+
obj"
builtins.object"builtins.object0:typing.overloadX"â
iscoroutinefunctioninspect.iscoroutinefunctionΩ
iscoroutinefunctioninspect.iscoroutinefunction"
builtins.bool"builtins.bool*T
objK
CallableType[builtins.function]&
builtins.function"builtins.function0:typing.overloadXΩ
iscoroutinefunctioninspect.iscoroutinefunction"
builtins.bool"builtins.bool*T
objK
CallableType[builtins.function]&
builtins.function"builtins.function0:typing.overloadXΩ
iscoroutinefunctioninspect.iscoroutinefunction"
builtins.bool"builtins.bool*T
objK
CallableType[builtins.function]&
builtins.function"builtins.function0:typing.overloadXî
iscoroutinefunctioninspect.iscoroutinefunction"
builtins.bool"builtins.bool*+
obj"
builtins.object"builtins.object0:typing.overloadX"¡
isasyncgenfunctioninspect.isasyncgenfunctionª
isasyncgenfunctioninspect.isasyncgenfunction"
builtins.bool"builtins.bool*T
objK
CallableType[builtins.function]&
builtins.function"builtins.function0:typing.overloadXª
isasyncgenfunctioninspect.isasyncgenfunction"
builtins.bool"builtins.bool*T
objK
CallableType[builtins.function]&
builtins.function"builtins.function0:typing.overloadXí
isasyncgenfunctioninspect.isasyncgenfunction"
builtins.bool"builtins.bool*+
obj"
builtins.object"builtins.object0:typing.overloadX*É
__annotations__inspect.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*]
CO_OPTIMIZEDinspect.CO_OPTIMIZED7
Literal[builtins.int]	
builtins.int"builtins.int*]
CO_NEWLOCALSinspect.CO_NEWLOCALS7
Literal[builtins.int]	
builtins.int"builtins.int*Y

CO_VARARGSinspect.CO_VARARGS7
Literal[builtins.int]	
builtins.int"builtins.int*a
CO_VARKEYWORDSinspect.CO_VARKEYWORDS7
Literal[builtins.int]	
builtins.int"builtins.int*W
	CO_NESTEDinspect.CO_NESTED7
Literal[builtins.int]	
builtins.int"builtins.int*]
CO_GENERATORinspect.CO_GENERATOR7
Literal[builtins.int]	
builtins.int"builtins.int*W
	CO_NOFREEinspect.CO_NOFREE7
Literal[builtins.int]	
builtins.int"builtins.int*]
CO_COROUTINEinspect.CO_COROUTINE7
Literal[builtins.int]	
builtins.int"builtins.int*o
CO_ITERABLE_COROUTINEinspect.CO_ITERABLE_COROUTINE7
Literal[builtins.int]	
builtins.int"builtins.int*i
CO_ASYNC_GENERATORinspect.CO_ASYNC_GENERATOR7
Literal[builtins.int]	
builtins.int"builtins.int*k
TPFLAGS_IS_ABSTRACTinspect.TPFLAGS_IS_ABSTRACT7
Literal[builtins.int]	
builtins.int"builtins.int*
modulesbyfileinspect.modulesbyfileW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*[
GEN_CREATEDinspect.GEN_CREATED7
Literal[builtins.str]	
builtins.str"builtins.str*[
GEN_RUNNINGinspect.GEN_RUNNING7
Literal[builtins.str]	
builtins.str"builtins.str*_
GEN_SUSPENDEDinspect.GEN_SUSPENDED7
Literal[builtins.str]	
builtins.str"builtins.str*Y

GEN_CLOSEDinspect.GEN_CLOSED7
Literal[builtins.str]	
builtins.str"builtins.str*]
CORO_CREATEDinspect.CORO_CREATED7
Literal[builtins.str]	
builtins.str"builtins.str*]
CORO_RUNNINGinspect.CORO_RUNNING7
Literal[builtins.str]	
builtins.str"builtins.str*a
CORO_SUSPENDEDinspect.CORO_SUSPENDED7
Literal[builtins.str]	
builtins.str"builtins.str*[
CORO_CLOSEDinspect.CORO_CLOSED7
Literal[builtins.str]	
builtins.str"builtins.str