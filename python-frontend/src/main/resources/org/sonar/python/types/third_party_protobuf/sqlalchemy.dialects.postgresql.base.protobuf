
#sqlalchemy.dialects.postgresql.base„
BIGINTsqlalchemy.sql.sqltypes.BIGINT""sqlalchemy.sql.sqltypes.BigIntegerj38j39j310j311j312j313ry
__visit_name__-sqlalchemy.sql.sqltypes.BIGINT.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313„
BOOLEANsqlalchemy.sql.sqltypes.BOOLEAN"sqlalchemy.sql.sqltypes.Booleanj38j39j310j311j312j313rz
__visit_name__.sqlalchemy.sql.sqltypes.BOOLEAN.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313Ÿ
CHARsqlalchemy.sql.sqltypes.CHAR"sqlalchemy.sql.sqltypes.Stringj38j39j310j311j312j313rw
__visit_name__+sqlalchemy.sql.sqltypes.CHAR.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313◊
DATEsqlalchemy.sql.sqltypes.DATE"sqlalchemy.sql.sqltypes.Datej38j39j310j311j312j313rw
__visit_name__+sqlalchemy.sql.sqltypes.DATE.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313€
FLOATsqlalchemy.sql.sqltypes.FLOAT"sqlalchemy.sql.sqltypes.Floatj38j39j310j311j312j313rx
__visit_name__,sqlalchemy.sql.sqltypes.FLOAT.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313„
INTEGERsqlalchemy.sql.sqltypes.INTEGER"sqlalchemy.sql.sqltypes.Integerj38j39j310j311j312j313rz
__visit_name__.sqlalchemy.sql.sqltypes.INTEGER.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313„
NUMERICsqlalchemy.sql.sqltypes.NUMERIC"sqlalchemy.sql.sqltypes.Numericj38j39j310j311j312j313rz
__visit_name__.sqlalchemy.sql.sqltypes.NUMERIC.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313ÿ
REALsqlalchemy.sql.sqltypes.REAL"sqlalchemy.sql.sqltypes.Floatj38j39j310j311j312j313rw
__visit_name__+sqlalchemy.sql.sqltypes.REAL.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313Î
SMALLINT sqlalchemy.sql.sqltypes.SMALLINT"$sqlalchemy.sql.sqltypes.SmallIntegerj38j39j310j311j312j313r{
__visit_name__/sqlalchemy.sql.sqltypes.SMALLINT.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313◊
TEXTsqlalchemy.sql.sqltypes.TEXT"sqlalchemy.sql.sqltypes.Textj38j39j310j311j312j313rw
__visit_name__+sqlalchemy.sql.sqltypes.TEXT.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313‚
VARCHARsqlalchemy.sql.sqltypes.VARCHAR"sqlalchemy.sql.sqltypes.Stringj38j39j310j311j312j313rz
__visit_name__.sqlalchemy.sql.sqltypes.VARCHAR.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313˙
BYTEA)sqlalchemy.dialects.postgresql.base.BYTEA"#sqlalchemy.sql.sqltypes.LargeBinaryj38j39j310j311j312j313rÑ
__visit_name__8sqlalchemy.dialects.postgresql.base.BYTEA.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313ï
DOUBLE_PRECISION4sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION"sqlalchemy.sql.sqltypes.Floatj38j39j310j311j312j313rè
__visit_name__Csqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313ˆ
INET(sqlalchemy.dialects.postgresql.base.INET""sqlalchemy.sql.type_api.TypeEnginej38j39j310j311j312j313rÉ
__visit_name__7sqlalchemy.dialects.postgresql.base.INET.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313ˆ
CIDR(sqlalchemy.dialects.postgresql.base.CIDR""sqlalchemy.sql.type_api.TypeEnginej38j39j310j311j312j313rÉ
__visit_name__7sqlalchemy.dialects.postgresql.base.CIDR.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313ˇ
MACADDR+sqlalchemy.dialects.postgresql.base.MACADDR""sqlalchemy.sql.type_api.TypeEnginej38j39j310j311j312j313rÜ
__visit_name__:sqlalchemy.dialects.postgresql.base.MACADDR.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313Ç
MACADDR8,sqlalchemy.dialects.postgresql.base.MACADDR8""sqlalchemy.sql.type_api.TypeEnginej38j39j310j311j312j313rá
__visit_name__;sqlalchemy.dialects.postgresql.base.MACADDR8.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313˘
MONEY)sqlalchemy.dialects.postgresql.base.MONEY""sqlalchemy.sql.type_api.TypeEnginej38j39j310j311j312j313rÑ
__visit_name__8sqlalchemy.dialects.postgresql.base.MONEY.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313Û
OID'sqlalchemy.dialects.postgresql.base.OID""sqlalchemy.sql.type_api.TypeEnginej38j39j310j311j312j313rÇ
__visit_name__6sqlalchemy.dialects.postgresql.base.OID.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313Ç
REGCLASS,sqlalchemy.dialects.postgresql.base.REGCLASS""sqlalchemy.sql.type_api.TypeEnginej38j39j310j311j312j313rá
__visit_name__;sqlalchemy.dialects.postgresql.base.REGCLASS.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313◊
	TIMESTAMP-sqlalchemy.dialects.postgresql.base.TIMESTAMP"!sqlalchemy.sql.sqltypes.TIMESTAMP*
__init__6sqlalchemy.dialects.postgresql.base.TIMESTAMP.__init__"
None*h
self^
-sqlalchemy.dialects.postgresql.base.TIMESTAMP"-sqlalchemy.dialects.postgresql.base.TIMESTAMP*.
timezone
builtins.bool"builtins.bool *l
	precision[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z38z39z310z311z312z313j38j39j310j311j312j313ri
	precision7sqlalchemy.dialects.postgresql.base.TIMESTAMP.precision
Any*38*39*310*311*312*313¥
TIME(sqlalchemy.dialects.postgresql.base.TIME"sqlalchemy.sql.sqltypes.TIME*·
__init__1sqlalchemy.dialects.postgresql.base.TIME.__init__"
None*^
selfT
(sqlalchemy.dialects.postgresql.base.TIME"(sqlalchemy.dialects.postgresql.base.TIME*.
timezone
builtins.bool"builtins.bool *l
	precision[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z38z39z310z311z312z313j38j39j310j311j312j313rd
	precision2sqlalchemy.dialects.postgresql.base.TIME.precision
Any*38*39*310*311*312*313ä
INTERVAL,sqlalchemy.dialects.postgresql.base.INTERVAL")sqlalchemy.sql.type_api.NativeForEmulated")sqlalchemy.sql.sqltypes._AbstractInterval*®
__init__5sqlalchemy.dialects.postgresql.base.INTERVAL.__init__"
None*f
self\
,sqlalchemy.dialects.postgresql.base.INTERVAL",sqlalchemy.dialects.postgresql.base.INTERVAL*l
	precision[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *i
fields[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z38z39z310z311z312z313*∂
adapt_emulated_to_nativeEsqlalchemy.dialects.postgresql.base.INTERVAL.adapt_emulated_to_native*
cls*
interval*
kw0:builtins.classmethodpz38z39z310z311z312z313*à

as_generic7sqlalchemy.dialects.postgresql.base.INTERVAL.as_generic"
Any*f
self\
,sqlalchemy.dialects.postgresql.base.INTERVAL",sqlalchemy.dialects.postgresql.base.INTERVAL*4
allow_nulltype
builtins.bool"builtins.bool z38z39z310z311z312z313*Ñ
python_type8sqlalchemy.dialects.postgresql.base.INTERVAL.python_type*
self0:builtins.property`z38z39z310z311z312z313*î
coerce_compared_valueBsqlalchemy.dialects.postgresql.base.INTERVAL.coerce_compared_value*
self*
op*	
valuez38z39z310z311z312z313j38j39j310j311j312j313rá
__visit_name__;sqlalchemy.dialects.postgresql.base.INTERVAL.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313ry
native3sqlalchemy.dialects.postgresql.base.INTERVAL.native
builtins.bool"builtins.bool*38*39*310*311*312*313rh
	precision6sqlalchemy.dialects.postgresql.base.INTERVAL.precision
Any*38*39*310*311*312*313rb
fields3sqlalchemy.dialects.postgresql.base.INTERVAL.fields
Any*38*39*310*311*312*313ê
BIT'sqlalchemy.dialects.postgresql.base.BIT""sqlalchemy.sql.type_api.TypeEngine*⁄
__init__0sqlalchemy.dialects.postgresql.base.BIT.__init__"
None*\
selfR
'sqlalchemy.dialects.postgresql.base.BIT"'sqlalchemy.dialects.postgresql.base.BIT*i
length[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *-
varying
builtins.bool"builtins.bool z38z39z310z311z312z313j38j39j310j311j312j313rÇ
__visit_name__6sqlalchemy.dialects.postgresql.base.BIT.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313r]
length.sqlalchemy.dialects.postgresql.base.BIT.length
Any*38*39*310*311*312*313r_
varying/sqlalchemy.dialects.postgresql.base.BIT.varying
Any*38*39*310*311*312*313Ó
UUID(sqlalchemy.dialects.postgresql.base.UUID""sqlalchemy.sql.type_api.TypeEngine*Ú
__init__1sqlalchemy.dialects.postgresql.base.UUID.__init__"
None*^
selfT
(sqlalchemy.dialects.postgresql.base.UUID"(sqlalchemy.dialects.postgresql.base.UUID*-
as_uuid
builtins.bool"builtins.bool z38z39z310z311z312z313*ê
coerce_compared_value>sqlalchemy.dialects.postgresql.base.UUID.coerce_compared_value*
self*
op*	
valuez38z39z310z311z312z313*|
bind_processor7sqlalchemy.dialects.postgresql.base.UUID.bind_processor*
self*
dialectz38z39z310z311z312z313*ç
result_processor9sqlalchemy.dialects.postgresql.base.UUID.result_processor*
self*
dialect*
coltypez38z39z310z311z312z313j38j39j310j311j312j313rÉ
__visit_name__7sqlalchemy.dialects.postgresql.base.UUID.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313r`
as_uuid0sqlalchemy.dialects.postgresql.base.UUID.as_uuid
Any*38*39*310*311*312*313Ç
TSVECTOR,sqlalchemy.dialects.postgresql.base.TSVECTOR""sqlalchemy.sql.type_api.TypeEnginej38j39j310j311j312j313rá
__visit_name__;sqlalchemy.dialects.postgresql.base.TSVECTOR.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313“
ENUM(sqlalchemy.dialects.postgresql.base.ENUM")sqlalchemy.sql.type_api.NativeForEmulated"sqlalchemy.sql.sqltypes.Enum*Ë
__init__1sqlalchemy.dialects.postgresql.base.ENUM.__init__"
None*^
selfT
(sqlalchemy.dialects.postgresql.base.ENUM"(sqlalchemy.dialects.postgresql.base.ENUM*
enums
Any*
kw
Anyz38z39z310z311z312z313*Æ
adapt_emulated_to_nativeAsqlalchemy.dialects.postgresql.base.ENUM.adapt_emulated_to_native*
cls*
impl*
kw0:builtins.classmethodpz38z39z310z311z312z313*⁄
create/sqlalchemy.dialects.postgresql.base.ENUM.create"
None*^
selfT
(sqlalchemy.dialects.postgresql.base.ENUM"(sqlalchemy.dialects.postgresql.base.ENUM*g
bind[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *0

checkfirst
builtins.bool"builtins.bool z38z39z310z311z312z313*÷
drop-sqlalchemy.dialects.postgresql.base.ENUM.drop"
None*^
selfT
(sqlalchemy.dialects.postgresql.base.ENUM"(sqlalchemy.dialects.postgresql.base.ENUM*g
bind[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *0

checkfirst
builtins.bool"builtins.bool z38z39z310z311z312z313j38j39j310j311j312j313r
native_enum4sqlalchemy.dialects.postgresql.base.ENUM.native_enum
builtins.bool"builtins.bool*38*39*310*311*312*313rh
create_type4sqlalchemy.dialects.postgresql.base.ENUM.create_type
Any*38*39*310*311*312*313Ω

_ColonCast.sqlalchemy.dialects.postgresql.base._ColonCast"sqlalchemy.sql.elements.Cast*Ç
__init__7sqlalchemy.dialects.postgresql.base._ColonCast.__init__"
None*j
self`
.sqlalchemy.dialects.postgresql.base._ColonCast".sqlalchemy.dialects.postgresql.base._ColonCast*

expression
Any*
type_
Anyz38z39z310z311z312z313j38j39j310j311j312j313râ
__visit_name__=sqlalchemy.dialects.postgresql.base._ColonCast.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313r`
type3sqlalchemy.dialects.postgresql.base._ColonCast.type
Any*38*39*310*311*312*313rd
clause5sqlalchemy.dialects.postgresql.base._ColonCast.clause
Any*38*39*310*311*312*313rl

typeclause9sqlalchemy.dialects.postgresql.base._ColonCast.typeclause
Any*38*39*310*311*312*313œ&

PGCompiler.sqlalchemy.dialects.postgresql.base.PGCompiler"#sqlalchemy.sql.compiler.SQLCompiler*é
visit_colon_cast?sqlalchemy.dialects.postgresql.base.PGCompiler.visit_colon_cast*
self*
element*
kwz38z39z310z311z312z313*Ñ
visit_array:sqlalchemy.dialects.postgresql.base.PGCompiler.visit_array*
self*
element*
kwz38z39z310z311z312z313*Ñ
visit_slice:sqlalchemy.dialects.postgresql.base.PGCompiler.visit_slice*
self*
element*
kwz38z39z310z311z312z313*Ó
visit_json_getitem_op_binaryKsqlalchemy.dialects.postgresql.base.PGCompiler.visit_json_getitem_op_binary"
Any*j
self`
.sqlalchemy.dialects.postgresql.base.PGCompiler".sqlalchemy.dialects.postgresql.base.PGCompiler*
binary
Any*
operator
Any*3
_cast_applied
builtins.bool"builtins.bool *
kw
Anyz38z39z310z311z312z313*¯
!visit_json_path_getitem_op_binaryPsqlalchemy.dialects.postgresql.base.PGCompiler.visit_json_path_getitem_op_binary"
Any*j
self`
.sqlalchemy.dialects.postgresql.base.PGCompiler".sqlalchemy.dialects.postgresql.base.PGCompiler*
binary
Any*
operator
Any*3
_cast_applied
builtins.bool"builtins.bool *
kw
Anyz38z39z310z311z312z313*£
visit_getitem_binaryCsqlalchemy.dialects.postgresql.base.PGCompiler.visit_getitem_binary*
self*

binary*
operator*
kwz38z39z310z311z312z313*û
visit_aggregate_order_byGsqlalchemy.dialects.postgresql.base.PGCompiler.visit_aggregate_order_by*
self*
element*
kwz38z39z310z311z312z313*•
visit_match_op_binaryDsqlalchemy.dialects.postgresql.base.PGCompiler.visit_match_op_binary*
self*

binary*
operator*
kwz38z39z310z311z312z313*•
visit_ilike_op_binaryDsqlalchemy.dialects.postgresql.base.PGCompiler.visit_ilike_op_binary*
self*

binary*
operator*
kwz38z39z310z311z312z313*≠
visit_not_ilike_op_binaryHsqlalchemy.dialects.postgresql.base.PGCompiler.visit_not_ilike_op_binary*
self*

binary*
operator*
kwz38z39z310z311z312z313*≥
visit_regexp_match_op_binaryKsqlalchemy.dialects.postgresql.base.PGCompiler.visit_regexp_match_op_binary*
self*

binary*
operator*
kwz38z39z310z311z312z313*ª
 visit_not_regexp_match_op_binaryOsqlalchemy.dialects.postgresql.base.PGCompiler.visit_not_regexp_match_op_binary*
self*

binary*
operator*
kwz38z39z310z311z312z313*∑
visit_regexp_replace_op_binaryMsqlalchemy.dialects.postgresql.base.PGCompiler.visit_regexp_replace_op_binary*
self*

binary*
operator*
kwz38z39z310z311z312z313*î
visit_empty_set_exprCsqlalchemy.dialects.postgresql.base.PGCompiler.visit_empty_set_expr*
self*
element_typesz38z39z310z311z312z313*ó
render_literal_valueCsqlalchemy.dialects.postgresql.base.PGCompiler.render_literal_value*
self*	
value*	
type_z38z39z310z311z312z313*Ü
visit_sequence=sqlalchemy.dialects.postgresql.base.PGCompiler.visit_sequence*
self*
seq*
kwz38z39z310z311z312z313*Ö
limit_clause;sqlalchemy.dialects.postgresql.base.PGCompiler.limit_clause*
self*

select*
kwz38z39z310z311z312z313*±
format_from_hint_textDsqlalchemy.dialects.postgresql.base.PGCompiler.format_from_hint_text*
self*
sqltext*	
table*
hint*

iscrudz38z39z310z311z312z313*ó
get_select_precolumnsDsqlalchemy.dialects.postgresql.base.PGCompiler.get_select_precolumns*
self*

select*
kwz38z39z310z311z312z313*è
for_update_clause@sqlalchemy.dialects.postgresql.base.PGCompiler.for_update_clause*
self*

select*
kwz38z39z310z311z312z313*ó
returning_clause?sqlalchemy.dialects.postgresql.base.PGCompiler.returning_clause*
self*
stmt*
returning_colsz38z39z310z311z312z313*ì
visit_substring_funcCsqlalchemy.dialects.postgresql.base.PGCompiler.visit_substring_func*
self*
func*
kwz38z39z310z311z312z313*™
visit_on_conflict_do_nothingKsqlalchemy.dialects.postgresql.base.PGCompiler.visit_on_conflict_do_nothing*
self*
on_conflict*
kwz38z39z310z311z312z313*®
visit_on_conflict_do_updateJsqlalchemy.dialects.postgresql.base.PGCompiler.visit_on_conflict_do_update*
self*
on_conflict*
kwz38z39z310z311z312z313*«
update_from_clauseAsqlalchemy.dialects.postgresql.base.PGCompiler.update_from_clause*
self*
update_stmt*

from_table*
extra_froms*

from_hints*
kwz38z39z310z311z312z313*”
delete_extra_from_clauseGsqlalchemy.dialects.postgresql.base.PGCompiler.delete_extra_from_clause*
self*
delete_stmt*

from_table*
extra_froms*

from_hints*
kwz38z39z310z311z312z313*Ö
fetch_clause;sqlalchemy.dialects.postgresql.base.PGCompiler.fetch_clause*
self*

select*
kwz38z39z310z311z312z313j38j39j310j311j312j313º
PGDDLCompiler1sqlalchemy.dialects.postgresql.base.PGDDLCompiler"#sqlalchemy.sql.compiler.DDLCompiler*§
get_column_specificationJsqlalchemy.dialects.postgresql.base.PGDDLCompiler.get_column_specification*
self*

column*

kwargsz38z39z310z311z312z313*ò
visit_check_constraintHsqlalchemy.dialects.postgresql.base.PGDDLCompiler.visit_check_constraint*
self*

constraintz38z39z310z311z312z313*≥
visit_foreign_key_constraintNsqlalchemy.dialects.postgresql.base.PGDDLCompiler.visit_foreign_key_constraint"
builtins.str"builtins.str*p
selff
1sqlalchemy.dialects.postgresql.base.PGDDLCompiler"1sqlalchemy.dialects.postgresql.base.PGDDLCompiler*

constraint
Anyz38z39z310z311z312z313*ñ
visit_drop_table_commentJsqlalchemy.dialects.postgresql.base.PGDDLCompiler.visit_drop_table_comment*
self*
dropz38z39z310z311z312z313*î
visit_create_enum_typeHsqlalchemy.dialects.postgresql.base.PGDDLCompiler.visit_create_enum_type*
self*

createz38z39z310z311z312z313*é
visit_drop_enum_typeFsqlalchemy.dialects.postgresql.base.PGDDLCompiler.visit_drop_enum_type*
self*
dropz38z39z310z311z312z313*å
visit_create_indexDsqlalchemy.dialects.postgresql.base.PGDDLCompiler.visit_create_index*
self*

createz38z39z310z311z312z313*Ü
visit_drop_indexBsqlalchemy.dialects.postgresql.base.PGDDLCompiler.visit_drop_index*
self*
dropz38z39z310z311z312z313*§
visit_exclude_constraintJsqlalchemy.dialects.postgresql.base.PGDDLCompiler.visit_exclude_constraint*
self*

constraint*
kwz38z39z310z311z312z313*â
post_create_tableCsqlalchemy.dialects.postgresql.base.PGDDLCompiler.post_create_table*
self*	
tablez38z39z310z311z312z313*ï
visit_computed_columnGsqlalchemy.dialects.postgresql.base.PGDDLCompiler.visit_computed_column*
self*
	generatedz38z39z310z311z312z313*ö
visit_create_sequenceGsqlalchemy.dialects.postgresql.base.PGDDLCompiler.visit_create_sequence*
self*

create*
kwz38z39z310z311z312z313j38j39j310j311j312j313á%
PGTypeCompiler2sqlalchemy.dialects.postgresql.base.PGTypeCompiler"+sqlalchemy.sql.compiler.GenericTypeCompiler*å
visit_TSVECTORAsqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_TSVECTOR*
self*	
type_*
kwz38z39z310z311z312z313*Ñ

visit_INET=sqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_INET*
self*	
type_*
kwz38z39z310z311z312z313*Ñ

visit_CIDR=sqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_CIDR*
self*	
type_*
kwz38z39z310z311z312z313*ä
visit_MACADDR@sqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_MACADDR*
self*	
type_*
kwz38z39z310z311z312z313*å
visit_MACADDR8Asqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_MACADDR8*
self*	
type_*
kwz38z39z310z311z312z313*Ü
visit_MONEY>sqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_MONEY*
self*	
type_*
kwz38z39z310z311z312z313*Ç
	visit_OID<sqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_OID*
self*	
type_*
kwz38z39z310z311z312z313*å
visit_REGCLASSAsqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_REGCLASS*
self*	
type_*
kwz38z39z310z311z312z313*Ü
visit_FLOAT>sqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_FLOAT*
self*	
type_*
kwz38z39z310z311z312z313*ú
visit_DOUBLE_PRECISIONIsqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_DOUBLE_PRECISION*
self*	
type_*
kwz38z39z310z311z312z313*à
visit_BIGINT?sqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_BIGINT*
self*	
type_*
kwz38z39z310z311z312z313*à
visit_HSTORE?sqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_HSTORE*
self*	
type_*
kwz38z39z310z311z312z313*Ñ

visit_JSON=sqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_JSON*
self*	
type_*
kwz38z39z310z311z312z313*Ü
visit_JSONB>sqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_JSONB*
self*	
type_*
kwz38z39z310z311z312z313*é
visit_INT4RANGEBsqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_INT4RANGE*
self*	
type_*
kwz38z39z310z311z312z313*é
visit_INT8RANGEBsqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_INT8RANGE*
self*	
type_*
kwz38z39z310z311z312z313*å
visit_NUMRANGEAsqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_NUMRANGE*
self*	
type_*
kwz38z39z310z311z312z313*é
visit_DATERANGEBsqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_DATERANGE*
self*	
type_*
kwz38z39z310z311z312z313*ä
visit_TSRANGE@sqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_TSRANGE*
self*	
type_*
kwz38z39z310z311z312z313*é
visit_TSTZRANGEBsqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_TSTZRANGE*
self*	
type_*
kwz38z39z310z311z312z313*å
visit_datetimeAsqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_datetime*
self*	
type_*
kwz38z39z310z311z312z313*Ñ

visit_enum=sqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_enum*
self*	
type_*
kwz38z39z310z311z312z313*Å

visit_ENUM=sqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_ENUM"
Any*r
selfh
2sqlalchemy.dialects.postgresql.base.PGTypeCompiler"2sqlalchemy.dialects.postgresql.base.PGTypeCompiler*
type_
Any*v
identifier_preparer[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313*é
visit_TIMESTAMPBsqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_TIMESTAMP*
self*	
type_*
kwz38z39z310z311z312z313*Ñ

visit_TIME=sqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_TIME*
self*	
type_*
kwz38z39z310z311z312z313*å
visit_INTERVALAsqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_INTERVAL*
self*	
type_*
kwz38z39z310z311z312z313*Ç
	visit_BIT<sqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_BIT*
self*	
type_*
kwz38z39z310z311z312z313*Ñ

visit_UUID=sqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_UUID*
self*	
type_*
kwz38z39z310z311z312z313*î
visit_large_binaryEsqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_large_binary*
self*	
type_*
kwz38z39z310z311z312z313*Ü
visit_BYTEA>sqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_BYTEA*
self*	
type_*
kwz38z39z310z311z312z313*Ü
visit_ARRAY>sqlalchemy.dialects.postgresql.base.PGTypeCompiler.visit_ARRAY*
self*	
type_*
kwz38z39z310z311z312z313j38j39j310j311j312j313Ÿ
PGIdentifierPreparer8sqlalchemy.dialects.postgresql.base.PGIdentifierPreparer"*sqlalchemy.sql.compiler.IdentifierPreparer*æ
format_typeDsqlalchemy.dialects.postgresql.base.PGIdentifierPreparer.format_type"
Any*~
selft
8sqlalchemy.dialects.postgresql.base.PGIdentifierPreparer"8sqlalchemy.dialects.postgresql.base.PGIdentifierPreparer*
type_
Any*0

use_schema
builtins.bool"builtins.bool z38z39z310z311z312z313j38j39j310j311j312j313r~
reserved_wordsGsqlalchemy.dialects.postgresql.base.PGIdentifierPreparer.reserved_words
Any*38*39*310*311*312*313˝
PGInspector/sqlalchemy.dialects.postgresql.base.PGInspector"&sqlalchemy.engine.reflection.Inspector*Â
get_table_oid=sqlalchemy.dialects.postgresql.base.PGInspector.get_table_oid"
Any*l
selfb
/sqlalchemy.dialects.postgresql.base.PGInspector"/sqlalchemy.dialects.postgresql.base.PGInspector*

table_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z38z39z310z311z312z313*ƒ
	get_enums9sqlalchemy.dialects.postgresql.base.PGInspector.get_enums"
Any*l
selfb
/sqlalchemy.dialects.postgresql.base.PGInspector"/sqlalchemy.dialects.postgresql.base.PGInspector*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z38z39z310z311z312z313*‡
get_foreign_table_namesGsqlalchemy.dialects.postgresql.base.PGInspector.get_foreign_table_names"
Any*l
selfb
/sqlalchemy.dialects.postgresql.base.PGInspector"/sqlalchemy.dialects.postgresql.base.PGInspector*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z38z39z310z311z312z313*Ê
get_view_names>sqlalchemy.dialects.postgresql.base.PGInspector.get_view_names"
Any*l
selfb
/sqlalchemy.dialects.postgresql.base.PGInspector"/sqlalchemy.dialects.postgresql.base.PGInspector*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
include
Any z38z39z310z311z312z313j38j39j310j311j312j313î
CreateEnumType2sqlalchemy.dialects.postgresql.base.CreateEnumType""sqlalchemy.sql.ddl._CreateDropBasej38j39j310j311j312j313rç
__visit_name__Asqlalchemy.dialects.postgresql.base.CreateEnumType.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313é
DropEnumType0sqlalchemy.dialects.postgresql.base.DropEnumType""sqlalchemy.sql.ddl._CreateDropBasej38j39j310j311j312j313rã
__visit_name__?sqlalchemy.dialects.postgresql.base.DropEnumType.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313‡
PGExecutionContext6sqlalchemy.dialects.postgresql.base.PGExecutionContext"1sqlalchemy.engine.default.DefaultExecutionContext*è
fire_sequenceDsqlalchemy.dialects.postgresql.base.PGExecutionContext.fire_sequence*
self*
seq*	
type_z38z39z310z311z312z313*ë
get_insert_defaultIsqlalchemy.dialects.postgresql.base.PGExecutionContext.get_insert_default*
self*

columnz38z39z310z311z312z313*ú
should_autocommit_textMsqlalchemy.dialects.postgresql.base.PGExecutionContext.should_autocommit_text*
self*
	statementz38z39z310z311z312z313j38j39j310j311j312j313ˇ	
"PGReadOnlyConnectionCharacteristicFsqlalchemy.dialects.postgresql.base.PGReadOnlyConnectionCharacteristic":sqlalchemy.engine.characteristics.ConnectionCharacteristic*Ê
reset_characteristic[sqlalchemy.dialects.postgresql.base.PGReadOnlyConnectionCharacteristic.reset_characteristic"
None*õ
selfê
Fsqlalchemy.dialects.postgresql.base.PGReadOnlyConnectionCharacteristic"Fsqlalchemy.dialects.postgresql.base.PGReadOnlyConnectionCharacteristic*
dialect
Any*

dbapi_conn
Anyz38z39z310z311z312z313*ˆ
set_characteristicYsqlalchemy.dialects.postgresql.base.PGReadOnlyConnectionCharacteristic.set_characteristic"
None*õ
selfê
Fsqlalchemy.dialects.postgresql.base.PGReadOnlyConnectionCharacteristic"Fsqlalchemy.dialects.postgresql.base.PGReadOnlyConnectionCharacteristic*
dialect
Any*

dbapi_conn
Any*
value
Anyz38z39z310z311z312z313*≤
get_characteristicYsqlalchemy.dialects.postgresql.base.PGReadOnlyConnectionCharacteristic.get_characteristic*
self*
dialect*

dbapi_connz38z39z310z311z312z313j38j39j310j311j312j313r°
transactionalTsqlalchemy.dialects.postgresql.base.PGReadOnlyConnectionCharacteristic.transactional
builtins.bool"builtins.bool*38*39*310*311*312*313ì

$PGDeferrableConnectionCharacteristicHsqlalchemy.dialects.postgresql.base.PGDeferrableConnectionCharacteristic":sqlalchemy.engine.characteristics.ConnectionCharacteristic*Ï
reset_characteristic]sqlalchemy.dialects.postgresql.base.PGDeferrableConnectionCharacteristic.reset_characteristic"
None*ü
selfî
Hsqlalchemy.dialects.postgresql.base.PGDeferrableConnectionCharacteristic"Hsqlalchemy.dialects.postgresql.base.PGDeferrableConnectionCharacteristic*
dialect
Any*

dbapi_conn
Anyz38z39z310z311z312z313*¸
set_characteristic[sqlalchemy.dialects.postgresql.base.PGDeferrableConnectionCharacteristic.set_characteristic"
None*ü
selfî
Hsqlalchemy.dialects.postgresql.base.PGDeferrableConnectionCharacteristic"Hsqlalchemy.dialects.postgresql.base.PGDeferrableConnectionCharacteristic*
dialect
Any*

dbapi_conn
Any*
value
Anyz38z39z310z311z312z313*¥
get_characteristic[sqlalchemy.dialects.postgresql.base.PGDeferrableConnectionCharacteristic.get_characteristic*
self*
dialect*

dbapi_connz38z39z310z311z312z313j38j39j310j311j312j313r£
transactionalVsqlalchemy.dialects.postgresql.base.PGDeferrableConnectionCharacteristic.transactional
builtins.bool"builtins.bool*38*39*310*311*312*313≠q
	PGDialect-sqlalchemy.dialects.postgresql.base.PGDialect"(sqlalchemy.engine.default.DefaultDialect*≈
__init__6sqlalchemy.dialects.postgresql.base.PGDialect.__init__"
None*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*r
isolation_level[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *r
json_serializer[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *t
json_deserializer[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kwargs
Anyz38z39z310z311z312z313*Ô

initialize8sqlalchemy.dialects.postgresql.base.PGDialect.initialize"
None*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Anyz38z39z310z311z312z313*l

on_connect8sqlalchemy.dialects.postgresql.base.PGDialect.on_connect*
selfz38z39z310z311z312z313*ï
set_isolation_levelAsqlalchemy.dialects.postgresql.base.PGDialect.set_isolation_level"
None*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*
level
Anyz38z39z310z311z312z313*é
get_isolation_levelAsqlalchemy.dialects.postgresql.base.PGDialect.get_isolation_level*
self*

connectionz38z39z310z311z312z313*á
set_readonly:sqlalchemy.dialects.postgresql.base.PGDialect.set_readonly"
None*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*
value
Anyz38z39z310z311z312z313*Û
get_readonly:sqlalchemy.dialects.postgresql.base.PGDialect.get_readonly"
None*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Anyz38z39z310z311z312z313*ã
set_deferrable<sqlalchemy.dialects.postgresql.base.PGDialect.set_deferrable"
None*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*
value
Anyz38z39z310z311z312z313*˜
get_deferrable<sqlalchemy.dialects.postgresql.base.PGDialect.get_deferrable"
None*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Anyz38z39z310z311z312z313*è
do_begin_twophase?sqlalchemy.dialects.postgresql.base.PGDialect.do_begin_twophase"
None*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*
xid
Anyz38z39z310z311z312z313*ì
do_prepare_twophaseAsqlalchemy.dialects.postgresql.base.PGDialect.do_prepare_twophase"
None*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*
xid
Anyz38z39z310z311z312z313*˜
do_rollback_twophaseBsqlalchemy.dialects.postgresql.base.PGDialect.do_rollback_twophase"
None*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*
xid
Any*1
is_prepared
builtins.bool"builtins.bool *-
recover
builtins.bool"builtins.bool z38z39z310z311z312z313*Û
do_commit_twophase@sqlalchemy.dialects.postgresql.base.PGDialect.do_commit_twophase"
None*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*
xid
Any*1
is_prepared
builtins.bool"builtins.bool *-
recover
builtins.bool"builtins.bool z38z39z310z311z312z313*é
do_recover_twophaseAsqlalchemy.dialects.postgresql.base.PGDialect.do_recover_twophase*
self*

connectionz38z39z310z311z312z313*à

has_schema8sqlalchemy.dialects.postgresql.base.PGDialect.has_schema*
self*

connection*

schemaz38z39z310z311z312z313*
	has_table7sqlalchemy.dialects.postgresql.base.PGDialect.has_table"
Any*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*

table_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z38z39z310z311z312z313*˘
has_sequence:sqlalchemy.dialects.postgresql.base.PGDialect.has_sequence"
Any*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*
sequence_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z38z39z310z311z312z313*Ì
has_type6sqlalchemy.dialects.postgresql.base.PGDialect.has_type"
Any*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*
	type_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z38z39z310z311z312z313*â
get_table_oid;sqlalchemy.dialects.postgresql.base.PGDialect.get_table_oid"
Any*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*

table_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313*ê
get_schema_names>sqlalchemy.dialects.postgresql.base.PGDialect.get_schema_names*
self*

connection*
kwz38z39z310z311z312z313*Ù
get_table_names=sqlalchemy.dialects.postgresql.base.PGDialect.get_table_names"
Any*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313*ä
get_view_names<sqlalchemy.dialects.postgresql.base.PGDialect.get_view_names"
Any*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
include
Any *
kw
Anyz38z39z310z311z312z313*˙
get_sequence_names@sqlalchemy.dialects.postgresql.base.PGDialect.get_sequence_names"
Any*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313*î
get_view_definitionAsqlalchemy.dialects.postgresql.base.PGDialect.get_view_definition"
Any*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*
	view_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313*Ö
get_columns9sqlalchemy.dialects.postgresql.base.PGDialect.get_columns"
Any*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*

table_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313*ë
get_pk_constraint?sqlalchemy.dialects.postgresql.base.PGDialect.get_pk_constraint"
Any*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*

table_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313*‘
get_foreign_keys>sqlalchemy.dialects.postgresql.base.PGDialect.get_foreign_keys"
Any*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*

table_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *C
postgresql_ignore_search_path
builtins.bool"builtins.bool *
kw
Anyz38z39z310z311z312z313*¢
get_indexes9sqlalchemy.dialects.postgresql.base.PGDialect.get_indexes*
self*

connection*

table_name*

schema*
kwz38z39z310z311z312z313*õ
get_unique_constraintsDsqlalchemy.dialects.postgresql.base.PGDialect.get_unique_constraints"
Any*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*

table_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313*ë
get_table_comment?sqlalchemy.dialects.postgresql.base.PGDialect.get_table_comment"
Any*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*

table_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313*ô
get_check_constraintsCsqlalchemy.dialects.postgresql.base.PGDialect.get_check_constraints"
Any*h
self^
-sqlalchemy.dialects.postgresql.base.PGDialect"-sqlalchemy.dialects.postgresql.base.PGDialect*

connection
Any*

table_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313j38j39j310j311j312j313rt
name2sqlalchemy.dialects.postgresql.base.PGDialect.name
builtins.str"builtins.str*38*39*310*311*312*313rû
supports_statement_cacheFsqlalchemy.dialects.postgresql.base.PGDialect.supports_statement_cache
builtins.bool"builtins.bool*38*39*310*311*312*313rä
supports_alter<sqlalchemy.dialects.postgresql.base.PGDialect.supports_alter
builtins.bool"builtins.bool*38*39*310*311*312*313rñ
max_identifier_lengthCsqlalchemy.dialects.postgresql.base.PGDialect.max_identifier_length
builtins.int"builtins.int*38*39*310*311*312*313rö
supports_sane_rowcountDsqlalchemy.dialects.postgresql.base.PGDialect.supports_sane_rowcount
builtins.bool"builtins.bool*38*39*310*311*312*313rñ
supports_native_enumBsqlalchemy.dialects.postgresql.base.PGDialect.supports_native_enum
builtins.bool"builtins.bool*38*39*310*311*312*313rú
supports_native_booleanEsqlalchemy.dialects.postgresql.base.PGDialect.supports_native_boolean
builtins.bool"builtins.bool*38*39*310*311*312*313rñ
supports_smallserialBsqlalchemy.dialects.postgresql.base.PGDialect.supports_smallserial
builtins.bool"builtins.bool*38*39*310*311*312*313rí
supports_sequences@sqlalchemy.dialects.postgresql.base.PGDialect.supports_sequences
builtins.bool"builtins.bool*38*39*310*311*312*313rí
sequences_optional@sqlalchemy.dialects.postgresql.base.PGDialect.sequences_optional
builtins.bool"builtins.bool*38*39*310*311*312*313r≤
"preexecute_autoincrement_sequencesPsqlalchemy.dialects.postgresql.base.PGDialect.preexecute_autoincrement_sequences
builtins.bool"builtins.bool*38*39*310*311*312*313rî
postfetch_lastrowidAsqlalchemy.dialects.postgresql.base.PGDialect.postfetch_lastrowid
builtins.bool"builtins.bool*38*39*310*311*312*313rê
supports_comments?sqlalchemy.dialects.postgresql.base.PGDialect.supports_comments
builtins.bool"builtins.bool*38*39*310*311*312*313rú
supports_default_valuesEsqlalchemy.dialects.postgresql.base.PGDialect.supports_default_values
builtins.bool"builtins.bool*38*39*310*311*312*313r¢
supports_default_metavalueHsqlalchemy.dialects.postgresql.base.PGDialect.supports_default_metavalue
builtins.bool"builtins.bool*38*39*310*311*312*313rò
supports_empty_insertCsqlalchemy.dialects.postgresql.base.PGDialect.supports_empty_insert
builtins.bool"builtins.bool*38*39*310*311*312*313r§
supports_multivalues_insertIsqlalchemy.dialects.postgresql.base.PGDialect.supports_multivalues_insert
builtins.bool"builtins.bool*38*39*310*311*312*313r†
supports_identity_columnsGsqlalchemy.dialects.postgresql.base.PGDialect.supports_identity_columns
builtins.bool"builtins.bool*38*39*310*311*312*313rê
default_paramstyle@sqlalchemy.dialects.postgresql.base.PGDialect.default_paramstyle
builtins.str"builtins.str*38*39*310*311*312*313rq
ischema_names;sqlalchemy.dialects.postgresql.base.PGDialect.ischema_names
Any*38*39*310*311*312*313rg
colspecs6sqlalchemy.dialects.postgresql.base.PGDialect.colspecs
Any*38*39*310*311*312*313r{
statement_compiler@sqlalchemy.dialects.postgresql.base.PGDialect.statement_compiler
Any*38*39*310*311*312*313ro
ddl_compiler:sqlalchemy.dialects.postgresql.base.PGDialect.ddl_compiler
Any*38*39*310*311*312*313rq
type_compiler;sqlalchemy.dialects.postgresql.base.PGDialect.type_compiler
Any*38*39*310*311*312*313rg
preparer6sqlalchemy.dialects.postgresql.base.PGDialect.preparer
Any*38*39*310*311*312*313ri
	inspector7sqlalchemy.dialects.postgresql.base.PGDialect.inspector
Any*38*39*310*311*312*313ru
isolation_level=sqlalchemy.dialects.postgresql.base.PGDialect.isolation_level
Any*38*39*310*311*312*313rí
implicit_returning@sqlalchemy.dialects.postgresql.base.PGDialect.implicit_returning
builtins.bool"builtins.bool*38*39*310*311*312*313rä
full_returning<sqlalchemy.dialects.postgresql.base.PGDialect.full_returning
builtins.bool"builtins.bool*38*39*310*311*312*313rã
connection_characteristicsHsqlalchemy.dialects.postgresql.base.PGDialect.connection_characteristics
Any*38*39*310*311*312*313r}
construct_argumentsAsqlalchemy.dialects.postgresql.base.PGDialect.construct_arguments
Any*38*39*310*311*312*313r{
reflection_options@sqlalchemy.dialects.postgresql.base.PGDialect.reflection_options
Any*38*39*310*311*312*313*ª
__annotations__3sqlalchemy.dialects.postgresql.base.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313*_
	IDX_USING-sqlalchemy.dialects.postgresql.base.IDX_USING
Any*38*39*310*311*312*313*o
AUTOCOMMIT_REGEXP5sqlalchemy.dialects.postgresql.base.AUTOCOMMIT_REGEXP
Any*38*39*310*311*312*313*i
RESERVED_WORDS2sqlalchemy.dialects.postgresql.base.RESERVED_WORDS
Any*38*39*310*311*312*313*]
colspecs,sqlalchemy.dialects.postgresql.base.colspecs
Any*38*39*310*311*312*313*g
ischema_names1sqlalchemy.dialects.postgresql.base.ischema_names
Any*38*39*310*311*312*313