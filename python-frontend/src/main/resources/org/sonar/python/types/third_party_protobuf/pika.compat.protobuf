
pika.compat¶
StringIOio.StringIO"io.TextIOWrapper*ú
__init__io.StringIO.__init__"
None*$
self
io.StringIO"io.StringIO*Y
initial_valueD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
newlineD
Union[builtins.str,None]
builtins.str"builtins.str
None z38z39z310z311z312z313*Ä
getvalueio.StringIO.getvalue"
builtins.str"builtins.str*$
self
io.StringIO"io.StringIOz38z39z310z311z312z313j38j39j310j311j312j313r=
nameio.StringIO.name
Any*38*39*310*311*312*313d
AbstractBasepika.compat.AbstractBase"builtins.object@babc.ABCMetaj38j39j310j311j312j313B
longpika.compat.long"builtins.intj38j39j310j311j312j313^
time_nowpika.compat.time_now" 
builtins.float"builtins.floatz38z39z310z311z312z313Ã
dictkeyspika.compat.dictkeys"y
builtins.list[pika.compat._KT]H
pika.compat._KT"
builtins.object"builtins.object"builtins.object"builtins.list*í
dctà
#typing.Mapping[pika.compat._KT,Any]H
pika.compat._KT"
builtins.object"builtins.object"builtins.object
Any"typing.Mappingz38z39z310z311z312z313‹

dictvaluespika.compat.dictvalues"
!builtins.list[pika.compat._VT_co]K
pika.compat._VT_co"
builtins.object"builtins.object"builtins.object"builtins.list*ò
dcté
&typing.Mapping[Any,pika.compat._VT_co]
AnyK
pika.compat._VT_co"
builtins.object"builtins.object"builtins.object"typing.Mappingz38z39z310z311z312z313í
dict_iteritemspika.compat.dict_iteritems"ﬂ
4typing.ItemsView[pika.compat._KT,pika.compat._VT_co]H
pika.compat._KT"
builtins.object"builtins.object"builtins.objectK
pika.compat._VT_co"
builtins.object"builtins.object"builtins.object"typing.ItemsView*Â
dct€
2typing.Mapping[pika.compat._KT,pika.compat._VT_co]H
pika.compat._KT"
builtins.object"builtins.object"builtins.objectK
pika.compat._VT_co"
builtins.object"builtins.object"builtins.object"typing.Mappingz38z39z310z311z312z313Ô
dict_itervaluespika.compat.dict_itervalues"á
%typing.ValuesView[pika.compat._VT_co]K
pika.compat._VT_co"
builtins.object"builtins.object"builtins.object"typing.ValuesView*ò
dcté
&typing.Mapping[Any,pika.compat._VT_co]
AnyK
pika.compat._VT_co"
builtins.object"builtins.object"builtins.object"typing.Mappingz38z39z310z311z312z313§
bytepika.compat.byte" 
builtins.bytes"builtins.bytes*L
argsB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndexz38z39z310z311z312z313ì
canonical_strpika.compat.canonical_str"
builtins.str"builtins.str*-
value"
builtins.object"builtins.objectz38z39z310z311z312z313è

is_integerpika.compat.is_integer"
builtins.bool"builtins.bool*-
value"
builtins.object"builtins.objectz38z39z310z311z312z313—
as_bytespika.compat.as_bytes" 
builtins.bytes"builtins.bytes*q
valuef
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesz38z39z310z311z312z313É
to_digitpika.compat.to_digit"
builtins.int"builtins.int*'
value
builtins.str"builtins.strz38z39z310z311z312z313ã
get_linux_versionpika.compat.get_linux_version"ã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*-
release_str
builtins.str"builtins.strz38z39z310z311z312z313"ã 
	urlencodeurllib.parse.urlencodeŸ	
	urlencodeurllib.parse.urlencode"
builtins.str"builtins.str*°
queryï
£TypeAlias[Union[typing.Mapping[Any,Any],typing.Mapping[Any,typing.Sequence[Any]],typing.Sequence[Tuple[Any,Any]],typing.Sequence[Tuple[Any,typing.Sequence[Any]]]]]—
òUnion[typing.Mapping[Any,Any],typing.Mapping[Any,typing.Sequence[Any]],typing.Sequence[Tuple[Any,Any]],typing.Sequence[Tuple[Any,typing.Sequence[Any]]]];
typing.Mapping[Any,Any]
Any
Any"typing.Mappingu
(typing.Mapping[Any,typing.Sequence[Any]]
Any0
typing.Sequence[Any]
Any"typing.Sequence"typing.MappingX
typing.Sequence[Tuple[Any,Any]]$
Tuple[Any,Any]
Any
Any"typing.Sequence£
0typing.Sequence[Tuple[Any,typing.Sequence[Any]]]^
Tuple[Any,typing.Sequence[Any]]
Any0
typing.Sequence[Any]
Any"typing.Sequence"typing.Sequence"urllib.parse._QueryType*+
doseq
builtins.bool"builtins.bool *(
safe
builtins.str"builtins.str *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *\
	quote_viaK
CallableType[builtins.function]&
builtins.function"builtins.function 0:typing.overloadXÙ

	urlencodeurllib.parse.urlencode"
builtins.str"builtins.str*°
queryï
£TypeAlias[Union[typing.Mapping[Any,Any],typing.Mapping[Any,typing.Sequence[Any]],typing.Sequence[Tuple[Any,Any]],typing.Sequence[Tuple[Any,typing.Sequence[Any]]]]]—
òUnion[typing.Mapping[Any,Any],typing.Mapping[Any,typing.Sequence[Any]],typing.Sequence[Tuple[Any,Any]],typing.Sequence[Tuple[Any,typing.Sequence[Any]]]];
typing.Mapping[Any,Any]
Any
Any"typing.Mappingu
(typing.Mapping[Any,typing.Sequence[Any]]
Any0
typing.Sequence[Any]
Any"typing.Sequence"typing.MappingX
typing.Sequence[Tuple[Any,Any]]$
Tuple[Any,Any]
Any
Any"typing.Sequence£
0typing.Sequence[Tuple[Any,typing.Sequence[Any]]]^
Tuple[Any,typing.Sequence[Any]]
Any0
typing.Sequence[Any]
Any"typing.Sequence"typing.Sequence"urllib.parse._QueryType*)
doseq
builtins.bool"builtins.bool*ƒ
safeπ
urllib.parse._Q£
1Union[builtins.str,typing.Iterable[builtins.int]]
builtins.str"builtins.strN
typing.Iterable[builtins.int]
builtins.int"builtins.int"typing.Iterable*T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *\
	quote_viaK
CallableType[builtins.function]&
builtins.function"builtins.function 0:typing.overloadXˆ

	urlencodeurllib.parse.urlencode"
builtins.str"builtins.str*°
queryï
£TypeAlias[Union[typing.Mapping[Any,Any],typing.Mapping[Any,typing.Sequence[Any]],typing.Sequence[Tuple[Any,Any]],typing.Sequence[Tuple[Any,typing.Sequence[Any]]]]]—
òUnion[typing.Mapping[Any,Any],typing.Mapping[Any,typing.Sequence[Any]],typing.Sequence[Tuple[Any,Any]],typing.Sequence[Tuple[Any,typing.Sequence[Any]]]];
typing.Mapping[Any,Any]
Any
Any"typing.Mappingu
(typing.Mapping[Any,typing.Sequence[Any]]
Any0
typing.Sequence[Any]
Any"typing.Sequence"typing.MappingX
typing.Sequence[Tuple[Any,Any]]$
Tuple[Any,Any]
Any
Any"typing.Sequence£
0typing.Sequence[Tuple[Any,typing.Sequence[Any]]]^
Tuple[Any,typing.Sequence[Any]]
Any0
typing.Sequence[Any]
Any"typing.Sequence"typing.Sequence"urllib.parse._QueryType*+
doseq
builtins.bool"builtins.bool *ƒ
safeπ
urllib.parse._Q£
1Union[builtins.str,typing.Iterable[builtins.int]]
builtins.str"builtins.strN
typing.Iterable[builtins.int]
builtins.int"builtins.int"typing.Iterable*T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *\
	quote_viaK
CallableType[builtins.function]&
builtins.function"builtins.function 0:typing.overloadX"38"39"310"311"312"313"ø
urlparseurllib.parse.urlparseœ
urlparseurllib.parse.urlparse"å
_TypeAlias[Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]å
TTuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str"urllib.parse.ParseResult*%
url
builtins.str"builtins.str**
scheme
builtins.str"builtins.str *5
allow_fragments
builtins.bool"builtins.bool 0:typing.overloadX≠
urlparseurllib.parse.urlparse"¡
kTypeAlias[Tuple[builtins.bytes,builtins.bytes,builtins.bytes,builtins.bytes,builtins.bytes,builtins.bytes]]∞
`Tuple[builtins.bytes,builtins.bytes,builtins.bytes,builtins.bytes,builtins.bytes,builtins.bytes] 
builtins.bytes"builtins.bytes 
builtins.bytes"builtins.bytes 
builtins.bytes"builtins.bytes 
builtins.bytes"builtins.bytes 
builtins.bytes"builtins.bytes 
builtins.bytes"builtins.bytes"urllib.parse.ParseResultBytes*ë
urlá
-Union[builtins.bytes,builtins.bytearray,None] 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearray
None*Â
scheme÷
CUnion[builtins.bytes,builtins.bytearray,None,Literal[builtins.str]] 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearray
None7
Literal[builtins.str]	
builtins.str"builtins.str *5
allow_fragments
builtins.bool"builtins.bool 0:typing.overloadX"38"39"310"311"312"313*£
__annotations__pika.compat.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313*û
	url_quotepika.compat.url_quote^
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.function*38*39*310*311*312*313*è
url_unquotepika.compat.url_unquoteK
CallableType[builtins.function]&
builtins.function"builtins.function*38*39*310*311*312*313*ë
url_parse_qspika.compat.url_parse_qsK
CallableType[builtins.function]&
builtins.function"builtins.function*38*39*310*311*312*313*n
PY2pika.compat.PY2:
Literal[builtins.bool]	
builtins.bool"builtins.bool*38*39*310*311*312*313*n
PY3pika.compat.PY3:
Literal[builtins.bool]	
builtins.bool"builtins.bool*38*39*310*311*312*313*~
RE_NUMpika.compat.RE_NUMD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*38*39*310*311*312*313*\
ON_LINUXpika.compat.ON_LINUX
builtins.bool"builtins.bool*38*39*310*311*312*313*X
ON_OSXpika.compat.ON_OSX
builtins.bool"builtins.bool*38*39*310*311*312*313*`

ON_WINDOWSpika.compat.ON_WINDOWS
builtins.bool"builtins.bool*38*39*310*311*312*313*X
SOL_TCPpika.compat.SOL_TCP
builtins.int"builtins.int*38*39*310*311*312*313*õ

basestringpika.compat.basestringY
Tuple[Type[builtins.str]]:
Type[builtins.str]
builtins.str"builtins.str"type*38*39*310*311*312*313*˜
str_or_bytespika.compat.str_or_bytes∞
.Tuple[Type[builtins.str],Type[builtins.bytes]]:
Type[builtins.str]
builtins.str"builtins.str"type@
Type[builtins.bytes] 
builtins.bytes"builtins.bytes"type*38*39*310*311*312*313*b
HAVE_SIGNALpika.compat.HAVE_SIGNAL
builtins.bool"builtins.bool*38*39*310*311*312*313*à
EINTR_IS_EXPOSEDpika.compat.EINTR_IS_EXPOSED:
Literal[builtins.bool]	
builtins.bool"builtins.bool*38*39*310*311*312*313*û
LINUX_VERSIONpika.compat.LINUX_VERSION’
9Union[Tuple[builtins.int,builtins.int,builtins.int],None]ã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
None*38*39*310*311*312*313