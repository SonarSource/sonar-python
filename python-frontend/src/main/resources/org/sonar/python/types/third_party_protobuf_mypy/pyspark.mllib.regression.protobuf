
pyspark.mllib.regressionƒ
LabeledPoint%pyspark.mllib.regression.LabeledPoint"builtins.object*Ø
__init__.pyspark.mllib.regression.LabeledPoint.__init__"
None*X
selfN
%pyspark.mllib.regression.LabeledPoint"%pyspark.mllib.regression.LabeledPoint*+
label 
builtins.float"builtins.float*b
featuresT
typing.Iterable[builtins.float] 
builtins.float"builtins.float"typing.Iterable*°

__reduce__0pyspark.mllib.regression.LabeledPoint.__reduce__"Ü
dTuple[Type[pyspark.mllib.regression.LabeledPoint],Tuple[builtins.float,pyspark.mllib.linalg.Vector]]Ö
+Type[pyspark.mllib.regression.LabeledPoint]N
%pyspark.mllib.regression.LabeledPoint"%pyspark.mllib.regression.LabeledPoint"typeì
1Tuple[builtins.float,pyspark.mllib.linalg.Vector] 
builtins.float"builtins.float:
pyspark.mllib.linalg.Vector"pyspark.mllib.linalg.Vector*X
selfN
%pyspark.mllib.regression.LabeledPoint"%pyspark.mllib.regression.LabeledPoint*®
__str__-pyspark.mllib.regression.LabeledPoint.__str__"
builtins.str"builtins.str*PN
%pyspark.mllib.regression.LabeledPoint"%pyspark.mllib.regression.LabeledPoint*™
__repr__.pyspark.mllib.regression.LabeledPoint.__repr__"
builtins.str"builtins.str*PN
%pyspark.mllib.regression.LabeledPoint"%pyspark.mllib.regression.LabeledPointrV
label+pyspark.mllib.regression.LabeledPoint.label 
builtins.float"builtins.floatrv
features.pyspark.mllib.regression.LabeledPoint.features:
pyspark.mllib.linalg.Vector"pyspark.mllib.linalg.Vectoré	
LinearModel$pyspark.mllib.regression.LinearModel"builtins.object*ï
__init__-pyspark.mllib.regression.LinearModel.__init__"
None*V
selfL
$pyspark.mllib.regression.LinearModel"$pyspark.mllib.regression.LinearModel*G
weights:
pyspark.mllib.linalg.Vector"pyspark.mllib.linalg.Vector*/
	intercept 
builtins.float"builtins.float*‚
weights,pyspark.mllib.regression.LinearModel.weights":
pyspark.mllib.linalg.Vector"pyspark.mllib.linalg.Vector*V
selfL
$pyspark.mllib.regression.LinearModel"$pyspark.mllib.regression.LinearModel0:builtins.property`*Ã
	intercept.pyspark.mllib.regression.LinearModel.intercept" 
builtins.float"builtins.float*V
selfL
$pyspark.mllib.regression.LinearModel"$pyspark.mllib.regression.LinearModel0:builtins.property`*ß
__repr__-pyspark.mllib.regression.LinearModel.__repr__"
builtins.str"builtins.str*NL
$pyspark.mllib.regression.LinearModel"$pyspark.mllib.regression.LinearModelrq
_coeff+pyspark.mllib.regression.LinearModel._coeff:
pyspark.mllib.linalg.Vector"pyspark.mllib.linalg.Vectorr_

_intercept/pyspark.mllib.regression.LinearModel._intercept 
builtins.float"builtins.floatú
LinearRegressionModelBase2pyspark.mllib.regression.LinearRegressionModelBase"$pyspark.mllib.regression.LinearModel2¢
predict:pyspark.mllib.regression.LinearRegressionModelBase.predictΩ
predict:pyspark.mllib.regression.LinearRegressionModelBase.predict" 
builtins.float"builtins.float*r
selfh
2pyspark.mllib.regression.LinearRegressionModelBase"2pyspark.mllib.regression.LinearRegressionModelBase* 
x¬
ÅTypeAlias[Union[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]]ó
vUnion[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pyspark.mllib.linalg.Vector"pyspark.mllib.linalg.VectorP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.listR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple" pyspark.mllib._typing.VectorLike0:typing.overloadXö
predict:pyspark.mllib.regression.LinearRegressionModelBase.predict"T
pyspark.rdd.RDD[builtins.float] 
builtins.float"builtins.float"pyspark.rdd.RDD*r
selfh
2pyspark.mllib.regression.LinearRegressionModelBase"2pyspark.mllib.regression.LinearRegressionModelBase*Û
xÎ
ípyspark.rdd.RDD[TypeAlias[Union[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]]]¬
ÅTypeAlias[Union[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]]ó
vUnion[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pyspark.mllib.linalg.Vector"pyspark.mllib.linalg.VectorP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.listR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple" pyspark.mllib._typing.VectorLike"pyspark.rdd.RDD0:typing.overloadX8ˆ
LinearRegressionModel.pyspark.mllib.regression.LinearRegressionModel"2pyspark.mllib.regression.LinearRegressionModelBase*°
save3pyspark.mllib.regression.LinearRegressionModel.save"
None*j
self`
.pyspark.mllib.regression.LinearRegressionModel".pyspark.mllib.regression.LinearRegressionModel*D
sc<
pyspark.context.SparkContext"pyspark.context.SparkContext*&
path
builtins.str"builtins.str0*“
load3pyspark.mllib.regression.LinearRegressionModel.load"`
.pyspark.mllib.regression.LinearRegressionModel".pyspark.mllib.regression.LinearRegressionModel*™
cls†
4Type[pyspark.mllib.regression.LinearRegressionModel]`
.pyspark.mllib.regression.LinearRegressionModel".pyspark.mllib.regression.LinearRegressionModel"type*D
sc<
pyspark.context.SparkContext"pyspark.context.SparkContext*&
path
builtins.str"builtins.str0:builtins.classmethodp8Ò
LinearRegressionWithSGD0pyspark.mllib.regression.LinearRegressionWithSGD"builtins.object*í
train6pyspark.mllib.regression.LinearRegressionWithSGD.train"`
.pyspark.mllib.regression.LinearRegressionModel".pyspark.mllib.regression.LinearRegressionModel*∞
cls¶
6Type[pyspark.mllib.regression.LinearRegressionWithSGD]d
0pyspark.mllib.regression.LinearRegressionWithSGD"0pyspark.mllib.regression.LinearRegressionWithSGD"type*§
dataô
6pyspark.rdd.RDD[pyspark.mllib.regression.LabeledPoint]N
%pyspark.mllib.regression.LabeledPoint"%pyspark.mllib.regression.LabeledPoint"pyspark.rdd.RDD*.

iterations
builtins.int"builtins.int *,
step 
builtins.float"builtins.float *9
miniBatchFraction 
builtins.float"builtins.float *Ω
initialWeights¶
{Union[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float],None]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pyspark.mllib.linalg.Vector"pyspark.mllib.linalg.VectorP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.listR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple
None *0
regParam 
builtins.float"builtins.float *S
regTypeD
Union[builtins.str,None]
builtins.str"builtins.str
None */
	intercept
builtins.bool"builtins.bool *2
validateData
builtins.bool"builtins.bool *6
convergenceTol 
builtins.float"builtins.float 0:builtins.classmethodp¸

LassoModel#pyspark.mllib.regression.LassoModel"2pyspark.mllib.regression.LinearRegressionModelBase*Ä
save(pyspark.mllib.regression.LassoModel.save"
None*T
selfJ
#pyspark.mllib.regression.LassoModel"#pyspark.mllib.regression.LassoModel*D
sc<
pyspark.context.SparkContext"pyspark.context.SparkContext*&
path
builtins.str"builtins.str0*è
load(pyspark.mllib.regression.LassoModel.load"J
#pyspark.mllib.regression.LassoModel"#pyspark.mllib.regression.LassoModel*à
cls
)Type[pyspark.mllib.regression.LassoModel]J
#pyspark.mllib.regression.LassoModel"#pyspark.mllib.regression.LassoModel"type*D
sc<
pyspark.context.SparkContext"pyspark.context.SparkContext*&
path
builtins.str"builtins.str0:builtins.classmethodp8ƒ

LassoWithSGD%pyspark.mllib.regression.LassoWithSGD"builtins.object*˚	
train+pyspark.mllib.regression.LassoWithSGD.train"J
#pyspark.mllib.regression.LassoModel"#pyspark.mllib.regression.LassoModel*è
clsÖ
+Type[pyspark.mllib.regression.LassoWithSGD]N
%pyspark.mllib.regression.LassoWithSGD"%pyspark.mllib.regression.LassoWithSGD"type*§
dataô
6pyspark.rdd.RDD[pyspark.mllib.regression.LabeledPoint]N
%pyspark.mllib.regression.LabeledPoint"%pyspark.mllib.regression.LabeledPoint"pyspark.rdd.RDD*.

iterations
builtins.int"builtins.int *,
step 
builtins.float"builtins.float *0
regParam 
builtins.float"builtins.float *9
miniBatchFraction 
builtins.float"builtins.float *Ω
initialWeights¶
{Union[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float],None]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pyspark.mllib.linalg.Vector"pyspark.mllib.linalg.VectorP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.listR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple
None */
	intercept
builtins.bool"builtins.bool *2
validateData
builtins.bool"builtins.bool *6
convergenceTol 
builtins.float"builtins.float 0:builtins.classmethodpÎ
RidgeRegressionModel-pyspark.mllib.regression.RidgeRegressionModel"2pyspark.mllib.regression.LinearRegressionModelBase*û
save2pyspark.mllib.regression.RidgeRegressionModel.save"
None*h
self^
-pyspark.mllib.regression.RidgeRegressionModel"-pyspark.mllib.regression.RidgeRegressionModel*D
sc<
pyspark.context.SparkContext"pyspark.context.SparkContext*&
path
builtins.str"builtins.str0*Ã
load2pyspark.mllib.regression.RidgeRegressionModel.load"^
-pyspark.mllib.regression.RidgeRegressionModel"-pyspark.mllib.regression.RidgeRegressionModel*ß
clsù
3Type[pyspark.mllib.regression.RidgeRegressionModel]^
-pyspark.mllib.regression.RidgeRegressionModel"-pyspark.mllib.regression.RidgeRegressionModel"type*D
sc<
pyspark.context.SparkContext"pyspark.context.SparkContext*&
path
builtins.str"builtins.str0:builtins.classmethodp8î
RidgeRegressionWithSGD/pyspark.mllib.regression.RidgeRegressionWithSGD"builtins.object*∑

train5pyspark.mllib.regression.RidgeRegressionWithSGD.train"^
-pyspark.mllib.regression.RidgeRegressionModel"-pyspark.mllib.regression.RidgeRegressionModel*≠
cls£
5Type[pyspark.mllib.regression.RidgeRegressionWithSGD]b
/pyspark.mllib.regression.RidgeRegressionWithSGD"/pyspark.mllib.regression.RidgeRegressionWithSGD"type*§
dataô
6pyspark.rdd.RDD[pyspark.mllib.regression.LabeledPoint]N
%pyspark.mllib.regression.LabeledPoint"%pyspark.mllib.regression.LabeledPoint"pyspark.rdd.RDD*.

iterations
builtins.int"builtins.int *,
step 
builtins.float"builtins.float *0
regParam 
builtins.float"builtins.float *9
miniBatchFraction 
builtins.float"builtins.float *Ω
initialWeights¶
{Union[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float],None]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pyspark.mllib.linalg.Vector"pyspark.mllib.linalg.VectorP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.listR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple
None */
	intercept
builtins.bool"builtins.bool *2
validateData
builtins.bool"builtins.bool *6
convergenceTol 
builtins.float"builtins.float 0:builtins.classmethodp•$
IsotonicRegressionModel0pyspark.mllib.regression.IsotonicRegressionModel"pyspark.mllib.util.Saveable"pyspark.mllib.util.Loader*Ñ
__init__9pyspark.mllib.regression.IsotonicRegressionModel.__init__"
None*n
selfd
0pyspark.mllib.regression.IsotonicRegressionModel"0pyspark.mllib.regression.IsotonicRegressionModel*I

boundaries9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*J
predictions9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*,
isotonic
builtins.bool"builtins.bool*ß
save5pyspark.mllib.regression.IsotonicRegressionModel.save"
None*n
selfd
0pyspark.mllib.regression.IsotonicRegressionModel"0pyspark.mllib.regression.IsotonicRegressionModel*D
sc<
pyspark.context.SparkContext"pyspark.context.SparkContext*&
path
builtins.str"builtins.str0*ﬁ
load5pyspark.mllib.regression.IsotonicRegressionModel.load"d
0pyspark.mllib.regression.IsotonicRegressionModel"0pyspark.mllib.regression.IsotonicRegressionModel*∞
cls¶
6Type[pyspark.mllib.regression.IsotonicRegressionModel]d
0pyspark.mllib.regression.IsotonicRegressionModel"0pyspark.mllib.regression.IsotonicRegressionModel"type*D
sc<
pyspark.context.SparkContext"pyspark.context.SparkContext*&
path
builtins.str"builtins.str0:builtins.classmethodp2ñ
predict8pyspark.mllib.regression.IsotonicRegressionModel.predictú
predict8pyspark.mllib.regression.IsotonicRegressionModel.predict"®
/TypeAlias[numpy.floating[numpy._typing._64Bit]]d
$numpy.floating[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.floating"numpy.float64*n
selfd
0pyspark.mllib.regression.IsotonicRegressionModel"0pyspark.mllib.regression.IsotonicRegressionModel*'
x 
builtins.float"builtins.float0:typing.overloadX–
predict8pyspark.mllib.regression.IsotonicRegressionModel.predict"9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*n
selfd
0pyspark.mllib.regression.IsotonicRegressionModel"0pyspark.mllib.regression.IsotonicRegressionModel* 
x¬
ÅTypeAlias[Union[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]]ó
vUnion[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pyspark.mllib.linalg.Vector"pyspark.mllib.linalg.VectorP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.listR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple" pyspark.mllib._typing.VectorLike0:typing.overloadX¶
predict8pyspark.mllib.regression.IsotonicRegressionModel.predict"˛
@pyspark.rdd.RDD[TypeAlias[numpy.floating[numpy._typing._64Bit]]]®
/TypeAlias[numpy.floating[numpy._typing._64Bit]]d
$numpy.floating[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.floating"numpy.float64"pyspark.rdd.RDD*n
selfd
0pyspark.mllib.regression.IsotonicRegressionModel"0pyspark.mllib.regression.IsotonicRegressionModel*[
xT
pyspark.rdd.RDD[builtins.float] 
builtins.float"builtins.float"pyspark.rdd.RDD0:typing.overloadXµ
predict8pyspark.mllib.regression.IsotonicRegressionModel.predict"u
'pyspark.rdd.RDD[numpy.ndarray[Any,Any]]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray"pyspark.rdd.RDD*n
selfd
0pyspark.mllib.regression.IsotonicRegressionModel"0pyspark.mllib.regression.IsotonicRegressionModel*Û
xÎ
ípyspark.rdd.RDD[TypeAlias[Union[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]]]¬
ÅTypeAlias[Union[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]]ó
vUnion[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pyspark.mllib.linalg.Vector"pyspark.mllib.linalg.VectorP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.listR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple" pyspark.mllib._typing.VectorLike"pyspark.rdd.RDD0:typing.overloadXrÑ

boundaries;pyspark.mllib.regression.IsotonicRegressionModel.boundaries9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayrÜ
predictions<pyspark.mllib.regression.IsotonicRegressionModel.predictions9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayre
isotonic9pyspark.mllib.regression.IsotonicRegressionModel.isotonic
builtins.bool"builtins.bool‹	
IsotonicRegression+pyspark.mllib.regression.IsotonicRegression"builtins.object*á	
train1pyspark.mllib.regression.IsotonicRegression.train"d
0pyspark.mllib.regression.IsotonicRegressionModel"0pyspark.mllib.regression.IsotonicRegressionModel*°
clsó
1Type[pyspark.mllib.regression.IsotonicRegression]Z
+pyspark.mllib.regression.IsotonicRegression"+pyspark.mllib.regression.IsotonicRegression"type*ˆ
dataÎ
ípyspark.rdd.RDD[TypeAlias[Union[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]]]¬
ÅTypeAlias[Union[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]]ó
vUnion[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pyspark.mllib.linalg.Vector"pyspark.mllib.linalg.VectorP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.listR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple" pyspark.mllib._typing.VectorLike"pyspark.rdd.RDD*.
isotonic
builtins.bool"builtins.bool 0:builtins.classmethodpÃ
StreamingLinearAlgorithm1pyspark.mllib.regression.StreamingLinearAlgorithm"builtins.object*›
__init__:pyspark.mllib.regression.StreamingLinearAlgorithm.__init__"
None*p
selff
1pyspark.mllib.regression.StreamingLinearAlgorithm"1pyspark.mllib.regression.StreamingLinearAlgorithm*ò
modelå
0Union[pyspark.mllib.regression.LinearModel,None]L
$pyspark.mllib.regression.LinearModel"$pyspark.mllib.regression.LinearModel
None*œ
latestModel=pyspark.mllib.regression.StreamingLinearAlgorithm.latestModel"å
0Union[pyspark.mllib.regression.LinearModel,None]L
$pyspark.mllib.regression.LinearModel"$pyspark.mllib.regression.LinearModel
None*p
selff
1pyspark.mllib.regression.StreamingLinearAlgorithm"1pyspark.mllib.regression.StreamingLinearAlgorithm0*⁄
	_validate;pyspark.mllib.regression.StreamingLinearAlgorithm._validate"
None*p
selff
1pyspark.mllib.regression.StreamingLinearAlgorithm"1pyspark.mllib.regression.StreamingLinearAlgorithm*
dstream
Any*‘
	predictOn;pyspark.mllib.regression.StreamingLinearAlgorithm.predictOn"x
1pyspark.streaming.dstream.DStream[builtins.float] 
builtins.float"builtins.float"!pyspark.streaming.dstream.DStream*p
selff
1pyspark.mllib.regression.StreamingLinearAlgorithm"1pyspark.mllib.regression.StreamingLinearAlgorithm*ù
dstreamè
§pyspark.streaming.dstream.DStream[TypeAlias[Union[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]]]¬
ÅTypeAlias[Union[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]]ó
vUnion[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pyspark.mllib.linalg.Vector"pyspark.mllib.linalg.VectorP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.listR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple" pyspark.mllib._typing.VectorLike"!pyspark.streaming.dstream.DStream*±
predictOnValuesApyspark.mllib.regression.StreamingLinearAlgorithm.predictOnValues"¶
Spyspark.streaming.dstream.DStream[Tuple[pyspark.mllib.regression.K,builtins.float]]´
0Tuple[pyspark.mllib.regression.K,builtins.float]S
pyspark.mllib.regression.K"
builtins.object"builtins.object"builtins.object 
builtins.float"builtins.float"!pyspark.streaming.dstream.DStream*p
selff
1pyspark.mllib.regression.StreamingLinearAlgorithm"1pyspark.mllib.regression.StreamingLinearAlgorithm*ø
dstream±
∆pyspark.streaming.dstream.DStream[Tuple[pyspark.mllib.regression.K,TypeAlias[Union[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]]]]¬
£Tuple[pyspark.mllib.regression.K,TypeAlias[Union[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]]]S
pyspark.mllib.regression.K"
builtins.object"builtins.object"builtins.object¬
ÅTypeAlias[Union[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]]ó
vUnion[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pyspark.mllib.linalg.Vector"pyspark.mllib.linalg.VectorP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.listR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple" pyspark.mllib._typing.VectorLike"!pyspark.streaming.dstream.DStreamr—
_model8pyspark.mllib.regression.StreamingLinearAlgorithm._modelå
0Union[pyspark.mllib.regression.LinearModel,None]L
$pyspark.mllib.regression.LinearModel"$pyspark.mllib.regression.LinearModel
None˜
 StreamingLinearRegressionWithSGD9pyspark.mllib.regression.StreamingLinearRegressionWithSGD"1pyspark.mllib.regression.StreamingLinearAlgorithm*≥
__init__Bpyspark.mllib.regression.StreamingLinearRegressionWithSGD.__init__"
None*Ä
selfv
9pyspark.mllib.regression.StreamingLinearRegressionWithSGD"9pyspark.mllib.regression.StreamingLinearRegressionWithSGD*0
stepSize 
builtins.float"builtins.float *1
numIterations
builtins.int"builtins.int *9
miniBatchFraction 
builtins.float"builtins.float *6
convergenceTol 
builtins.float"builtins.float *∑
setInitialWeightsKpyspark.mllib.regression.StreamingLinearRegressionWithSGD.setInitialWeights"v
9pyspark.mllib.regression.StreamingLinearRegressionWithSGD"9pyspark.mllib.regression.StreamingLinearRegressionWithSGD*Ä
selfv
9pyspark.mllib.regression.StreamingLinearRegressionWithSGD"9pyspark.mllib.regression.StreamingLinearRegressionWithSGD*◊
initialWeights¬
ÅTypeAlias[Union[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]]ó
vUnion[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float]]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pyspark.mllib.linalg.Vector"pyspark.mllib.linalg.VectorP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.listR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple" pyspark.mllib._typing.VectorLike0*©
trainOnApyspark.mllib.regression.StreamingLinearRegressionWithSGD.trainOn"
None*Ä
selfv
9pyspark.mllib.regression.StreamingLinearRegressionWithSGD"9pyspark.mllib.regression.StreamingLinearRegressionWithSGD*À
dstreamΩ
Hpyspark.streaming.dstream.DStream[pyspark.mllib.regression.LabeledPoint]N
%pyspark.mllib.regression.LabeledPoint"%pyspark.mllib.regression.LabeledPoint"!pyspark.streaming.dstream.DStream08rp
stepSizeBpyspark.mllib.regression.StreamingLinearRegressionWithSGD.stepSize 
builtins.float"builtins.floatrv
numIterationsGpyspark.mllib.regression.StreamingLinearRegressionWithSGD.numIterations
builtins.int"builtins.intrÇ
miniBatchFractionKpyspark.mllib.regression.StreamingLinearRegressionWithSGD.miniBatchFraction 
builtins.float"builtins.floatr|
convergenceTolHpyspark.mllib.regression.StreamingLinearRegressionWithSGD.convergenceTol 
builtins.float"builtins.floatrŸ
_model@pyspark.mllib.regression.StreamingLinearRegressionWithSGD._modelå
0Union[pyspark.mllib.regression.LinearModel,None]L
$pyspark.mllib.regression.LinearModel"$pyspark.mllib.regression.LinearModel
None˝
_regression_train_wrapper2pyspark.mllib.regression._regression_train_wrapper"T
pyspark.mllib.regression.LM"
builtins.object"builtins.object"builtins.object*[

train_funcK
CallableType[builtins.function]&
builtins.function"builtins.function*í

modelClassÅ
!Type[pyspark.mllib.regression.LM]T
pyspark.mllib.regression.LM"
builtins.object"builtins.object"builtins.object"type*§
dataô
6pyspark.rdd.RDD[pyspark.mllib.regression.LabeledPoint]N
%pyspark.mllib.regression.LabeledPoint"%pyspark.mllib.regression.LabeledPoint"pyspark.rdd.RDD*º
initial_weights¶
{Union[numpy.ndarray[Any,Any],pyspark.mllib.linalg.Vector,builtins.list[builtins.float],builtins.tuple[builtins.float],None]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pyspark.mllib.linalg.Vector"pyspark.mllib.linalg.VectorP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.listR
builtins.tuple[builtins.float] 
builtins.float"builtins.float"builtins.tuple
None1
_testpyspark.mllib.regression._test"
None*î
__annotations__(pyspark.mllib.regression.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
npnumpy *w
__all__ pyspark.mllib.regression.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list