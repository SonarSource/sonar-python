
click√
Argumentclick.core.Argument"click.core.Parameter*∂
__init__click.core.Argument.__init__"
None*4
self*
click.core.Argument"click.core.Argument*_
param_declsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*W
requiredG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *
attrs
Any*©
human_readable_name'click.core.Argument.human_readable_name"
builtins.str"builtins.str*4
self*
click.core.Argument"click.core.Argument0:builtins.property`*Ñ
make_metavar click.core.Argument.make_metavar"
builtins.str"builtins.str*4
self*
click.core.Argument"click.core.Argument*Ø
_parse_decls click.core.Argument._parse_decls"π
WTuple[Union[builtins.str,None],builtins.list[builtins.str],builtins.list[builtins.str]]D
Union[builtins.str,None]
builtins.str"builtins.str
NoneJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*4
self*
click.core.Argument"click.core.Argument*Y
declsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*0
expose_value
builtins.bool"builtins.bool*Ì
get_usage_pieces$click.core.Argument.get_usage_pieces"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*4
self*
click.core.Argument"click.core.Argument*1
ctx(
click.core.Context"click.core.Context*ª
get_error_hint"click.core.Argument.get_error_hint"
builtins.str"builtins.str*4
self*
click.core.Argument"click.core.Argument*1
ctx(
click.core.Context"click.core.Context*È
add_to_parser!click.core.Argument.add_to_parser"
None*4
self*
click.core.Argument"click.core.Argument*B
parser6
click.parser.OptionParser"click.parser.OptionParser*1
ctx(
click.core.Context"click.core.ContextrT
param_type_name#click.core.Argument.param_type_name
builtins.str"builtins.strÒ%
BaseCommandclick.core.BaseCommand"builtins.object*Ô
__init__click.core.BaseCommand.__init__"
None*:
self0
click.core.BaseCommand"click.core.BaseCommand*N
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None*´
context_settingsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *˚
to_info_dict#click.core.BaseCommand.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*:
self0
click.core.BaseCommand"click.core.BaseCommand*1
ctx(
click.core.Context"click.core.Context*}
__repr__click.core.BaseCommand.__repr__"
builtins.str"builtins.str*20
click.core.BaseCommand"click.core.BaseCommand*∫
	get_usage click.core.BaseCommand.get_usage"
builtins.str"builtins.str*:
self0
click.core.BaseCommand"click.core.BaseCommand*1
ctx(
click.core.Context"click.core.Context*∏
get_helpclick.core.BaseCommand.get_help"
builtins.str"builtins.str*:
self0
click.core.BaseCommand"click.core.BaseCommand*1
ctx(
click.core.Context"click.core.Context*æ
make_context#click.core.BaseCommand.make_context"(
click.core.Context"click.core.Context*:
self0
click.core.BaseCommand"click.core.BaseCommand*S
	info_nameD
Union[builtins.str,None]
builtins.str"builtins.str
None*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*d
parentV
Union[click.core.Context,None](
click.core.Context"click.core.Context
None *
extra
Any*¿

parse_args!click.core.BaseCommand.parse_args"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*:
self0
click.core.BaseCommand"click.core.BaseCommand*1
ctx(
click.core.Context"click.core.Context*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*ü
invokeclick.core.BaseCommand.invoke"
Any*:
self0
click.core.BaseCommand"click.core.BaseCommand*1
ctx(
click.core.Context"click.core.Context*Ï
shell_complete%click.core.BaseCommand.shell_complete"ï
4builtins.list[click.shell_completion.CompletionItem]N
%click.shell_completion.CompletionItem"%click.shell_completion.CompletionItem"builtins.list*:
self0
click.core.BaseCommand"click.core.BaseCommand*1
ctx(
click.core.Context"click.core.Context*,

incomplete
builtins.str"builtins.str*˚
_main_shell_completion-click.core.BaseCommand._main_shell_completion"
None*:
self0
click.core.BaseCommand"click.core.BaseCommand*e
ctx_argsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*+
	prog_name
builtins.str"builtins.str*X
complete_varD
Union[builtins.str,None]
builtins.str"builtins.str
None *ò
__call__click.core.BaseCommand.__call__"
Any*:
self0
click.core.BaseCommand"click.core.BaseCommand*
args
Any*
kwargs
Any2Í
mainclick.core.BaseCommand.main±
mainclick.core.BaseCommand.main"
NoReturn
*:
self0
click.core.BaseCommand"click.core.BaseCommand*î
argsá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *U
	prog_nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *X
complete_varD
Union[builtins.str,None]
builtins.str"builtins.str
None *Q
standalone_mode:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
extra
Any0:typing.overloadXê
mainclick.core.BaseCommand.main"
Any*:
self0
click.core.BaseCommand"click.core.BaseCommand*î
argsá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *U
	prog_nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *X
complete_varD
Union[builtins.str,None]
builtins.str"builtins.str
None *5
standalone_mode
builtins.bool"builtins.bool *
extra
Any0:typing.overloadXrÉ
context_class$click.core.BaseCommand.context_classL
Type[click.core.Context](
click.core.Context"click.core.Context"typer[
allow_extra_args'click.core.BaseCommand.allow_extra_args
builtins.bool"builtins.boolri
allow_interspersed_args.click.core.BaseCommand.allow_interspersed_args
builtins.bool"builtins.boolrg
ignore_unknown_options-click.core.BaseCommand.ignore_unknown_options
builtins.bool"builtins.boolri
nameclick.core.BaseCommand.nameD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerî
context_settings'click.core.BaseCommand.context_settingsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictÖ2
Commandclick.core.Command"click.core.BaseCommand*Ÿ	
__init__click.core.Command.__init__"
None*2
self(
click.core.Command"click.core.Command*N
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None*´
context_settingsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *ó
callbackÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *∞
params°
/Union[builtins.list[click.core.Parameter],None]b
#builtins.list[click.core.Parameter],
click.core.Parameter"click.core.Parameter"builtins.list
None *P
helpD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
epilogD
Union[builtins.str,None]
builtins.str"builtins.str
None *V

short_helpD
Union[builtins.str,None]
builtins.str"builtins.str
None *[
options_metavarD
Union[builtins.str,None]
builtins.str"builtins.str
None *5
add_help_option
builtins.bool"builtins.bool *5
no_args_is_help
builtins.bool"builtins.bool *,
hidden
builtins.bool"builtins.bool *0

deprecated
builtins.bool"builtins.bool *Ô
to_info_dictclick.core.Command.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*Æ
	get_usageclick.core.Command.get_usage"
builtins.str"builtins.str*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*ˆ

get_paramsclick.core.Command.get_params"b
#builtins.list[click.core.Parameter],
click.core.Parameter"click.core.Parameter"builtins.list*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*Ò
format_usageclick.core.Command.format_usage"
None*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*O
	formatter@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*Ú
collect_usage_pieces'click.core.Command.collect_usage_pieces"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*Ù
get_help_option_names(click.core.Command.get_help_option_names"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*Ò
get_help_option"click.core.Command.get_help_option"S
Union[click.core.Option,None]&
click.core.Option"click.core.Option
None*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*Ã
make_parserclick.core.Command.make_parser"6
click.parser.OptionParser"click.parser.OptionParser*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*¨
get_helpclick.core.Command.get_help"
builtins.str"builtins.str*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*∏
get_short_help_str%click.core.Command.get_short_help_str"
builtins.str"builtins.str*2
self(
click.core.Command"click.core.Command*)
limit
builtins.int"builtins.int *Ô
format_helpclick.core.Command.format_help"
None*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*O
	formatter@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*˘
format_help_text#click.core.Command.format_help_text"
None*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*O
	formatter@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*ı
format_options!click.core.Command.format_options"
None*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*O
	formatter@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*Û
format_epilog click.core.Command.format_epilog"
None*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*O
	formatter@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*¥

parse_argsclick.core.Command.parse_args"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*ì
invokeclick.core.Command.invoke"
Any*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*‡
shell_complete!click.core.Command.shell_complete"ï
4builtins.list[click.shell_completion.CompletionItem]N
%click.shell_completion.CompletionItem"%click.shell_completion.CompletionItem"builtins.list*2
self(
click.core.Command"click.core.Command*1
ctx(
click.core.Context"click.core.Context*,

incomplete
builtins.str"builtins.strr∞
callbackclick.core.Command.callbackÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
Nonerá
paramsclick.core.Command.paramsb
#builtins.list[click.core.Parameter],
click.core.Parameter"click.core.Parameter"builtins.listre
helpclick.core.Command.helpD
Union[builtins.str,None]
builtins.str"builtins.str
Noneri
epilogclick.core.Command.epilogD
Union[builtins.str,None]
builtins.str"builtins.str
Noner{
options_metavar"click.core.Command.options_metavarD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerq

short_helpclick.core.Command.short_helpD
Union[builtins.str,None]
builtins.str"builtins.str
NonerU
add_help_option"click.core.Command.add_help_option
builtins.bool"builtins.boolrU
no_args_is_help"click.core.Command.no_args_is_help
builtins.bool"builtins.boolrC
hiddenclick.core.Command.hidden
builtins.bool"builtins.boolrK

deprecatedclick.core.Command.deprecated
builtins.bool"builtins.bool†
CommandCollectionclick.core.CommandCollection"click.core.MultiCommand*©
__init__%click.core.CommandCollection.__init__"
None*F
self<
click.core.CommandCollection"click.core.CommandCollection*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *Ω
sources≠
2Union[builtins.list[click.core.MultiCommand],None]k
&builtins.list[click.core.MultiCommand]2
click.core.MultiCommand"click.core.MultiCommand"builtins.list
None *
attrs
Any* 

add_source'click.core.CommandCollection.add_source"
None*F
self<
click.core.CommandCollection"click.core.CommandCollection*A
	multi_cmd2
click.core.MultiCommand"click.core.MultiCommand*∂
get_command(click.core.CommandCollection.get_command"V
Union[click.core.Command,None](
click.core.Command"click.core.Command
None*F
self<
click.core.CommandCollection"click.core.CommandCollection*1
ctx(
click.core.Context"click.core.Context**
cmd_name
builtins.str"builtins.str*Ç
list_commands*click.core.CommandCollection.list_commands"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*F
self<
click.core.CommandCollection"click.core.CommandCollection*1
ctx(
click.core.Context"click.core.Contextrú
sources$click.core.CommandCollection.sourcesk
&builtins.list[click.core.MultiCommand]2
click.core.MultiCommand"click.core.MultiCommand"builtins.listP
Contextclick.core.Context"builtins.object*∞
__init__click.core.Context.__init__"
None*2
self(
click.core.Context"click.core.Context*5
command(
click.core.Command"click.core.Command*d
parentV
Union[click.core.Context,None](
click.core.Context"click.core.Context
None *U
	info_nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *1
obj&
Union[Any,None]
Any
None *^
auto_envvar_prefixD
Union[builtins.str,None]
builtins.str"builtins.str
None *¶
default_mapí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *Z
terminal_widthD
Union[builtins.int,None]
builtins.int"builtins.int
None *]
max_content_widthD
Union[builtins.int,None]
builtins.int"builtins.int
None *7
resilient_parsing
builtins.bool"builtins.bool *_
allow_extra_argsG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *f
allow_interspersed_argsG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *e
ignore_unknown_optionsG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *õ
help_option_namesÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *£
token_normalize_funcÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *T
colorG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *[
show_defaultG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *º
to_info_dictclick.core.Context.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*2
self(
click.core.Context"click.core.Context*
	__enter__click.core.Context.__enter__"(
click.core.Context"click.core.Context**(
click.core.Context"click.core.Context*/
__exit__click.core.Context.__exit__* * * * *É
scopeclick.core.Context.scope"`
#typing.Iterator[click.core.Context](
click.core.Context"click.core.Context"typing.Iterator*2
self(
click.core.Context"click.core.Context*-
cleanup
builtins.bool"builtins.bool 0:contextlib.contextmanager*√
metaclick.core.Context.meta"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*2
self(
click.core.Context"click.core.Context0:builtins.property`*©
make_formatter!click.core.Context.make_formatter"@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*2
self(
click.core.Context"click.core.Context*‡
with_resource click.core.Context.with_resource"E
click.core.V"
builtins.object"builtins.object"builtins.object*2
self(
click.core.Context"click.core.Context*±
context_managerõ
/contextlib.AbstractContextManager[click.core.V]E
click.core.V"
builtins.object"builtins.object"builtins.object"!contextlib.AbstractContextManager*Ü
call_on_close click.core.Context.call_on_close"K
CallableType[builtins.function]&
builtins.function"builtins.function*2
self(
click.core.Context"click.core.Context*R
fK
CallableType[builtins.function]&
builtins.function"builtins.function*_
closeclick.core.Context.close"
None*2
self(
click.core.Context"click.core.Context*ò
command_pathclick.core.Context.command_path"
builtins.str"builtins.str*2
self(
click.core.Context"click.core.Context0:builtins.property`*á
	find_rootclick.core.Context.find_root"(
click.core.Context"click.core.Context*2
self(
click.core.Context"click.core.Context*∆
find_objectclick.core.Context.find_object"m
Union[click.core.V,None]E
click.core.V"
builtins.object"builtins.object"builtins.object
None*2
self(
click.core.Context"click.core.Context*t
object_typec
Type[click.core.V]E
click.core.V"
builtins.object"builtins.object"builtins.object"type*¢
ensure_object click.core.Context.ensure_object"E
click.core.V"
builtins.object"builtins.object"builtins.object*2
self(
click.core.Context"click.core.Context*t
object_typec
Type[click.core.V]E
click.core.V"
builtins.object"builtins.object"builtins.object"type*å
failclick.core.Context.fail"
NoReturn
*2
self(
click.core.Context"click.core.Context*)
message
builtins.str"builtins.str*c
abortclick.core.Context.abort"
NoReturn
*2
self(
click.core.Context"click.core.Context*ã
exitclick.core.Context.exit"
NoReturn
*2
self(
click.core.Context"click.core.Context*(
code
builtins.int"builtins.int *{
	get_usageclick.core.Context.get_usage"
builtins.str"builtins.str*2
self(
click.core.Context"click.core.Context*y
get_helpclick.core.Context.get_help"
builtins.str"builtins.str*2
self(
click.core.Context"click.core.Context*Œ
_make_sub_context$click.core.Context._make_sub_context"(
click.core.Context"click.core.Context*2
self(
click.core.Context"click.core.Context*5
command(
click.core.Command"click.core.Command*∫
invokeclick.core.Context.invoke"
Any**(
click.core.Context"click.core.Context*∑¥
9Union[click.core.Command,CallableType[builtins.function]](
click.core.Command"click.core.CommandK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any*Æ
forwardclick.core.Context.forward"
Any**(
click.core.Context"click.core.Context**(
click.core.Command"click.core.Command*
args
Any*
kwargs
Any*Î
set_parameter_source'click.core.Context.set_parameter_source"
None*2
self(
click.core.Context"click.core.Context*&
name
builtins.str"builtins.str*D
source8
click.core.ParameterSource"click.core.ParameterSource*ã
get_parameter_source'click.core.Context.get_parameter_source"n
&Union[click.core.ParameterSource,None]8
click.core.ParameterSource"click.core.ParameterSource
None*2
self(
click.core.Context"click.core.Context*&
name
builtins.str"builtins.str2œ
lookup_default!click.core.Context.lookup_defaultî
lookup_default!click.core.Context.lookup_default"&
Union[Any,None]
Any
None*2
self(
click.core.Context"click.core.Context*&
name
builtins.str"builtins.str*F
call:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:typing.overloadXÇ
lookup_default!click.core.Context.lookup_default"ì
/Union[Any,CallableType[builtins.function],None]
AnyK
CallableType[builtins.function]&
builtins.function"builtins.function
None*2
self(
click.core.Context"click.core.Context*&
name
builtins.str"builtins.str*F
call:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:typing.overloadXrß
formatter_class"click.core.Context.formatter_classp
$Type[click.formatting.HelpFormatter]@
click.formatting.HelpFormatter"click.formatting.HelpFormatter"typer{
parentclick.core.Context.parentV
Union[click.core.Context,None](
click.core.Context"click.core.Context
NonerO
commandclick.core.Context.command(
click.core.Command"click.core.Commandro
	info_nameclick.core.Context.info_nameD
Union[builtins.str,None]
builtins.str"builtins.str
Noner|
paramsclick.core.Context.paramsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrk
argsclick.core.Context.argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listr
protected_args!click.core.Context.protected_argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listr{
_opt_prefixes click.core.Context._opt_prefixesH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.setr&
objclick.core.Context.obj
Anyrz
_metaclick.core.Context._metaW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictr¬
default_mapclick.core.Context.default_mapí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
NonerÅ
invoked_subcommand%click.core.Context.invoked_subcommandD
Union[builtins.str,None]
builtins.str"builtins.str
Nonery
terminal_width!click.core.Context.terminal_widthD
Union[builtins.int,None]
builtins.int"builtins.int
Noner
max_content_width$click.core.Context.max_content_widthD
Union[builtins.int,None]
builtins.int"builtins.int
NonerW
allow_extra_args#click.core.Context.allow_extra_args
builtins.bool"builtins.boolre
allow_interspersed_args*click.core.Context.allow_interspersed_args
builtins.bool"builtins.boolrc
ignore_unknown_options)click.core.Context.ignore_unknown_options
builtins.bool"builtins.boolrÖ
help_option_names$click.core.Context.help_option_namesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listr»
token_normalize_func'click.core.Context.token_normalize_funcÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
NonerY
resilient_parsing$click.core.Context.resilient_parsing
builtins.bool"builtins.boolrÅ
auto_envvar_prefix%click.core.Context.auto_envvar_prefixD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerj
colorclick.core.Context.colorG
Union[builtins.bool,None]
builtins.bool"builtins.bool
Nonerx
show_defaultclick.core.Context.show_defaultG
Union[builtins.bool,None]
builtins.bool"builtins.bool
Noner∆
_close_callbacks#click.core.Context._close_callbackså
.builtins.list[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.listrA
_depthclick.core.Context._depth
builtins.int"builtins.intr€
_parameter_source$click.core.Context._parameter_sourceü
6builtins.dict[builtins.str,click.core.ParameterSource]
builtins.str"builtins.str8
click.core.ParameterSource"click.core.ParameterSource"builtins.dictr[
_exit_stackclick.core.Context._exit_stack,
contextlib.ExitStack"contextlib.ExitStack
Groupclick.core.Group"click.core.MultiCommand*±
__init__click.core.Group.__init__"
None*.
self$
click.core.Group"click.core.Group*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *È
commandsÿ
^Union[builtins.dict[builtins.str,click.core.Command],typing.Sequence[click.core.Command],None]á
.builtins.dict[builtins.str,click.core.Command]
builtins.str"builtins.str(
click.core.Command"click.core.Command"builtins.dict`
#typing.Sequence[click.core.Command](
click.core.Command"click.core.Command"typing.Sequence
None *
attrs
Any*Í
add_commandclick.core.Group.add_command"
None*.
self$
click.core.Group"click.core.Group*1
cmd(
click.core.Command"click.core.Command*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *í
get_commandclick.core.Group.get_command"V
Union[click.core.Command,None](
click.core.Command"click.core.Command
None*.
self$
click.core.Group"click.core.Group*1
ctx(
click.core.Context"click.core.Context**
cmd_name
builtins.str"builtins.str*ﬁ
list_commandsclick.core.Group.list_commands"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*.
self$
click.core.Group"click.core.Group*1
ctx(
click.core.Context"click.core.Context2Á
commandclick.core.Group.command·
commandclick.core.Group.command"(
click.core.Command"click.core.Command*.
self$
click.core.Group"click.core.Group*MK
CallableType[builtins.function]&
builtins.function"builtins.function0:typing.overloadX›
commandclick.core.Group.command"K
CallableType[builtins.function]&
builtins.function"builtins.function*.
self$
click.core.Group"click.core.Group*
args
Any*
kwargs
Any0:typing.overloadX2◊
groupclick.core.Group.groupŸ
groupclick.core.Group.group"$
click.core.Group"click.core.Group*.
self$
click.core.Group"click.core.Group*MK
CallableType[builtins.function]&
builtins.function"builtins.function0:typing.overloadXŸ
groupclick.core.Group.group"K
CallableType[builtins.function]&
builtins.function"builtins.function*.
self$
click.core.Group"click.core.Group*
args
Any*
kwargs
Any0:typing.overloadXr≤
command_classclick.core.Group.command_classÄ
$Union[Type[click.core.Command],None]L
Type[click.core.Command](
click.core.Command"click.core.Command"type
Noner˘
group_classclick.core.Group.group_classÀ
6Union[Type[click.core.Group],Type[builtins.type],None]F
Type[click.core.Group]$
click.core.Group"click.core.Group"type=
Type[builtins.type]
builtins.type"builtins.type"type
NonerØ
commandsclick.core.Group.commandsá
.builtins.dict[builtins.str,click.core.Command]
builtins.str"builtins.str(
click.core.Command"click.core.Command"builtins.dict‡$
MultiCommandclick.core.MultiCommand"click.core.Command*¶
__init__ click.core.MultiCommand.__init__"
None*<
self2
click.core.MultiCommand"click.core.MultiCommand*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *<
invoke_without_command
builtins.bool"builtins.bool *^
no_args_is_helpG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *^
subcommand_metavarD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
chain
builtins.bool"builtins.bool *û
result_callbackÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *
attrs
Any*˛
to_info_dict$click.core.MultiCommand.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context*Å
collect_usage_pieces,click.core.MultiCommand.collect_usage_pieces"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context*Ñ
format_options&click.core.MultiCommand.format_options"
None*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context*O
	formatter@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*Ù
result_callback'click.core.MultiCommand.result_callback"K
CallableType[builtins.function]&
builtins.function"builtins.function*<
self2
click.core.MultiCommand"click.core.MultiCommand*-
replace
builtins.bool"builtins.bool *Ü
format_commands'click.core.MultiCommand.format_commands"
None*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context*O
	formatter@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*√

parse_args"click.core.MultiCommand.parse_args"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*¢
invokeclick.core.MultiCommand.invoke"
Any*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context*Ã
resolve_command'click.core.MultiCommand.resolve_command"»
ZTuple[Union[builtins.str,None],Union[click.core.Command,None],builtins.list[builtins.str]]D
Union[builtins.str,None]
builtins.str"builtins.str
NoneV
Union[click.core.Command,None](
click.core.Command"click.core.Command
NoneJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*ß
get_command#click.core.MultiCommand.get_command"V
Union[click.core.Command,None](
click.core.Command"click.core.Command
None*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context**
cmd_name
builtins.str"builtins.str*Û
list_commands%click.core.MultiCommand.list_commands"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context*Ô
shell_complete&click.core.MultiCommand.shell_complete"ï
4builtins.list[click.shell_completion.CompletionItem]N
%click.shell_completion.CompletionItem"%click.shell_completion.CompletionItem"builtins.list*<
self2
click.core.MultiCommand"click.core.MultiCommand*1
ctx(
click.core.Context"click.core.Context*,

incomplete
builtins.str"builtins.strr\
allow_extra_args(click.core.MultiCommand.allow_extra_args
builtins.bool"builtins.boolrj
allow_interspersed_args/click.core.MultiCommand.allow_interspersed_args
builtins.bool"builtins.boolrh
invoke_without_command.click.core.MultiCommand.invoke_without_command
builtins.bool"builtins.boolr^
subcommand_metavar*click.core.MultiCommand.subcommand_metavar
builtins.str"builtins.strrF
chainclick.core.MultiCommand.chain
builtins.bool"builtins.boolr≈
_result_callback(click.core.MultiCommand._result_callbackÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None”/
Optionclick.core.Option"click.core.Parameter*É
__init__click.core.Option.__init__"
None*0
self&
click.core.Option"click.core.Option*õ
param_declsá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *Ü
show_defaultr
&Union[builtins.bool,builtins.str,None]
builtins.bool"builtins.bool
builtins.str"builtins.str
None *q
promptc
!Union[builtins.bool,builtins.str]
builtins.bool"builtins.bool
builtins.str"builtins.str *~
confirmation_promptc
!Union[builtins.bool,builtins.str]
builtins.bool"builtins.bool
builtins.str"builtins.str *5
prompt_required
builtins.bool"builtins.bool *0

hide_input
builtins.bool"builtins.bool *V
is_flagG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *8

flag_value&
Union[Any,None]
Any
None *.
multiple
builtins.bool"builtins.bool *+
count
builtins.bool"builtins.bool *8
allow_from_autoenv
builtins.bool"builtins.bool *x
typel
%Union[click.types.ParamType,Any,None].
click.types.ParamType"click.types.ParamType
Any
None *P
helpD
Union[builtins.str,None]
builtins.str"builtins.str
None *,
hidden
builtins.bool"builtins.bool *2
show_choices
builtins.bool"builtins.bool *1
show_envvar
builtins.bool"builtins.bool *
attrs
Any*π
to_info_dictclick.core.Option.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*0
self&
click.core.Option"click.core.Option*©
_parse_declsclick.core.Option._parse_decls"π
WTuple[Union[builtins.str,None],builtins.list[builtins.str],builtins.list[builtins.str]]D
Union[builtins.str,None]
builtins.str"builtins.str
NoneJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*0
self&
click.core.Option"click.core.Option*Y
declsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*0
expose_value
builtins.bool"builtins.bool*„
add_to_parserclick.core.Option.add_to_parser"
None*0
self&
click.core.Option"click.core.Option*B
parser6
click.parser.OptionParser"click.parser.OptionParser*1
ctx(
click.core.Context"click.core.Context*∏
get_help_record!click.core.Option.get_help_record"ú
,Union[Tuple[builtins.str,builtins.str],None]`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
None*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context*§
prompt_for_value"click.core.Option.prompt_for_value"
Any*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context*È
resolve_envvar_value&click.core.Option.resolve_envvar_value"D
Union[builtins.str,None]
builtins.str"builtins.str
None*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context*≈
value_from_envvar#click.core.Option.value_from_envvar"&
Union[Any,None]
Any
None*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context*†
consume_valueclick.core.Option.consume_value"l
%Tuple[Any,click.core.ParameterSource]
Any8
click.core.ParameterSource"click.core.ParameterSource*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context*ö
optsè
1typing.Mapping[builtins.str,click.core.Parameter]
builtins.str"builtins.str,
click.core.Parameter"click.core.Parameter"typing.Mapping2∞
get_defaultclick.core.Option.get_defaultñ
get_defaultclick.core.Option.get_default"&
Union[Any,None]
Any
None*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context*F
call:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:typing.overloadXË
get_defaultclick.core.Option.get_default"ì
/Union[Any,CallableType[builtins.function],None]
AnyK
CallableType[builtins.function]&
builtins.function"builtins.function
None*0
self&
click.core.Option"click.core.Option*1
ctx(
click.core.Context"click.core.Context**
call
builtins.bool"builtins.bool 0:typing.overloadXrR
param_type_name!click.core.Option.param_type_name
builtins.str"builtins.strrh
promptclick.core.Option.promptD
Union[builtins.str,None]
builtins.str"builtins.str
Noner°
confirmation_prompt%click.core.Option.confirmation_promptc
!Union[builtins.bool,builtins.str]
builtins.bool"builtins.bool
builtins.str"builtins.strrT
prompt_required!click.core.Option.prompt_required
builtins.bool"builtins.boolrJ

hide_inputclick.core.Option.hide_input
builtins.bool"builtins.boolrB
hiddenclick.core.Option.hidden
builtins.bool"builtins.boolrX
_flag_needs_value#click.core.Option._flag_needs_value
builtins.bool"builtins.boolr´
defaultclick.core.Option.defaultÑ
*Union[Any,CallableType[builtins.function]]
AnyK
CallableType[builtins.function]&
builtins.function"builtins.functionrD
is_flagclick.core.Option.is_flag
builtins.bool"builtins.boolrN
is_bool_flagclick.core.Option.is_bool_flag
builtins.bool"builtins.boolr3

flag_valueclick.core.Option.flag_value
Anyr@
countclick.core.Option.count
builtins.bool"builtins.boolrZ
allow_from_autoenv$click.core.Option.allow_from_autoenv
builtins.bool"builtins.boolrd
helpclick.core.Option.helpD
Union[builtins.str,None]
builtins.str"builtins.str
Noner¢
show_defaultclick.core.Option.show_defaultr
&Union[builtins.bool,builtins.str,None]
builtins.bool"builtins.bool
builtins.str"builtins.str
NonerN
show_choicesclick.core.Option.show_choices
builtins.bool"builtins.boolrL
show_envvarclick.core.Option.show_envvar
builtins.bool"builtins.boolÊA
	Parameterclick.core.Parameter"builtins.object*ì
__init__click.core.Parameter.__init__"
None*6
self,
click.core.Parameter"click.core.Parameter*õ
param_declsá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *x
typel
%Union[click.types.ParamType,Any,None].
click.types.ParamType"click.types.ParamType
Any
None *.
required
builtins.bool"builtins.bool *£
defaultì
/Union[Any,CallableType[builtins.function],None]
AnyK
CallableType[builtins.function]&
builtins.function"builtins.function
None *ó
callbackÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *Q
nargsD
Union[builtins.int,None]
builtins.int"builtins.int
None *.
multiple
builtins.bool"builtins.bool *S
metavarD
Union[builtins.str,None]
builtins.str"builtins.str
None *2
expose_value
builtins.bool"builtins.bool *.
is_eager
builtins.bool"builtins.bool *¡
envvar≤
6Union[builtins.str,typing.Sequence[builtins.str],None]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *ù
shell_completeÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *¬
to_info_dict!click.core.Parameter.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*6
self,
click.core.Parameter"click.core.Parameter*w
__repr__click.core.Parameter.__repr__"
builtins.str"builtins.str*.,
click.core.Parameter"click.core.Parameter*≤
_parse_decls!click.core.Parameter._parse_decls"π
WTuple[Union[builtins.str,None],builtins.list[builtins.str],builtins.list[builtins.str]]D
Union[builtins.str,None]
builtins.str"builtins.str
NoneJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*6
self,
click.core.Parameter"click.core.Parameter*Y
declsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*0
expose_value
builtins.bool"builtins.bool*¨
human_readable_name(click.core.Parameter.human_readable_name"
builtins.str"builtins.str*6
self,
click.core.Parameter"click.core.Parameter0:builtins.property`*á
make_metavar!click.core.Parameter.make_metavar"
builtins.str"builtins.str*6
self,
click.core.Parameter"click.core.Parameter*Ï
add_to_parser"click.core.Parameter.add_to_parser"
None*6
self,
click.core.Parameter"click.core.Parameter*B
parser6
click.parser.OptionParser"click.parser.OptionParser*1
ctx(
click.core.Context"click.core.Context*Ò
consume_value"click.core.Parameter.consume_value"l
%Tuple[Any,click.core.ParameterSource]
Any8
click.core.ParameterSource"click.core.ParameterSource*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*c
optsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping*ø
type_cast_value$click.core.Parameter.type_cast_value"
Any*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*
value
Any*•
value_is_missing%click.core.Parameter.value_is_missing"
builtins.bool"builtins.bool*6
self,
click.core.Parameter"click.core.Parameter*
value
Any*ª
process_value"click.core.Parameter.process_value"
Any*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*
value
Any*Ú
resolve_envvar_value)click.core.Parameter.resolve_envvar_value"D
Union[builtins.str,None]
builtins.str"builtins.str
None*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*Œ
value_from_envvar&click.core.Parameter.value_from_envvar"&
Union[Any,None]
Any
None*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*Ê
handle_parse_result(click.core.Parameter.handle_parse_result"
&Tuple[Any,builtins.list[builtins.str]]
AnyJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*c
optsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*¡
get_help_record$click.core.Parameter.get_help_record"ú
,Union[Tuple[builtins.str,builtins.str],None]`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
None*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*
get_usage_pieces%click.core.Parameter.get_usage_pieces"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*æ
get_error_hint#click.core.Parameter.get_error_hint"
builtins.str"builtins.str*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*Ê
shell_complete#click.core.Parameter.shell_complete"ï
4builtins.list[click.shell_completion.CompletionItem]N
%click.shell_completion.CompletionItem"%click.shell_completion.CompletionItem"builtins.list*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*,

incomplete
builtins.str"builtins.str2≈
get_default click.core.Parameter.get_defaultü
get_default click.core.Parameter.get_default"&
Union[Any,None]
Any
None*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context*F
call:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:typing.overloadXÒ
get_default click.core.Parameter.get_default"ì
/Union[Any,CallableType[builtins.function],None]
AnyK
CallableType[builtins.function]&
builtins.function"builtins.function
None*6
self,
click.core.Parameter"click.core.Parameter*1
ctx(
click.core.Context"click.core.Context**
call
builtins.bool"builtins.bool 0:typing.overloadXrU
param_type_name$click.core.Parameter.param_type_name
builtins.str"builtins.strrg
nameclick.core.Parameter.nameD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerm
optsclick.core.Parameter.optsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrÅ
secondary_opts#click.core.Parameter.secondary_optsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listrQ
typeclick.core.Parameter.type.
click.types.ParamType"click.types.ParamTyperI
requiredclick.core.Parameter.required
builtins.bool"builtins.boolr≤
callbackclick.core.Parameter.callbackÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
NonerA
nargsclick.core.Parameter.nargs
builtins.int"builtins.intrI
multipleclick.core.Parameter.multiple
builtins.bool"builtins.boolrQ
expose_value!click.core.Parameter.expose_value
builtins.bool"builtins.boolrΩ
defaultclick.core.Parameter.defaultì
/Union[Any,CallableType[builtins.function],None]
AnyK
CallableType[builtins.function]&
builtins.function"builtins.function
NonerI
is_eagerclick.core.Parameter.is_eager
builtins.bool"builtins.boolrm
metavarclick.core.Parameter.metavarD
Union[builtins.str,None]
builtins.str"builtins.str
Noner⁄
envvarclick.core.Parameter.envvar≤
6Union[builtins.str,typing.Sequence[builtins.str],None]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
NonerŒ
_custom_shell_complete+click.core.Parameter._custom_shell_completeÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None6
Abortclick.exceptions.Abort"builtins.RuntimeErrorR
BadArgumentUsage!click.exceptions.BadArgumentUsage"click.exceptions.UsageErrorÙ
BadOptionUsageclick.exceptions.BadOptionUsage"click.exceptions.UsageError*…
__init__(click.exceptions.BadOptionUsage.__init__"
None*L
selfB
click.exceptions.BadOptionUsage"click.exceptions.BadOptionUsage*-
option_name
builtins.str"builtins.str*)
message
builtins.str"builtins.str*a
ctxV
Union[click.core.Context,None](
click.core.Context"click.core.Context
None rX
option_name+click.exceptions.BadOptionUsage.option_name
builtins.str"builtins.strÿ
BadParameterclick.exceptions.BadParameter"click.exceptions.UsageError*◊
__init__&click.exceptions.BadParameter.__init__"
None*H
self>
click.exceptions.BadParameter"click.exceptions.BadParameter*)
message
builtins.str"builtins.str*a
ctxV
Union[click.core.Context,None](
click.core.Context"click.core.Context
None *i
param\
 Union[click.core.Parameter,None],
click.core.Parameter"click.core.Parameter
None *V

param_hintD
Union[builtins.str,None]
builtins.str"builtins.str
None *¶
format_message,click.exceptions.BadParameter.format_message"
builtins.str"builtins.str*H
self>
click.exceptions.BadParameter"click.exceptions.BadParameterrä
param#click.exceptions.BadParameter.param\
 Union[click.core.Parameter,None],
click.core.Parameter"click.core.Parameter
Noner|

param_hint(click.exceptions.BadParameter.param_hintD
Union[builtins.str,None]
builtins.str"builtins.str
None“
ClickExceptionclick.exceptions.ClickException"builtins.Exception*∑
__init__(click.exceptions.ClickException.__init__"
None*L
selfB
click.exceptions.ClickException"click.exceptions.ClickException*)
message
builtins.str"builtins.str*¨
format_message.click.exceptions.ClickException.format_message"
builtins.str"builtins.str*L
selfB
click.exceptions.ClickException"click.exceptions.ClickException*ñ
__str__'click.exceptions.ClickException.__str__"
builtins.str"builtins.str*DB
click.exceptions.ClickException"click.exceptions.ClickException*‡
show$click.exceptions.ClickException.show"
None*L
selfB
click.exceptions.ClickException"click.exceptions.ClickException*Z
fileN
Union[typing.IO[Any],None]$
typing.IO[Any]
Any"	typing.IO
None rT
	exit_code)click.exceptions.ClickException.exit_code
builtins.int"builtins.intrP
message'click.exceptions.ClickException.message
builtins.str"builtins.strä
	FileErrorclick.exceptions.FileError"click.exceptions.ClickException*˚
__init__#click.exceptions.FileError.__init__"
None*B
self8
click.exceptions.FileError"click.exceptions.FileError**
filename
builtins.str"builtins.str*P
hintD
Union[builtins.str,None]
builtins.str"builtins.str
None *ù
format_message)click.exceptions.FileError.format_message"
builtins.str"builtins.str*B
self8
click.exceptions.FileError"click.exceptions.FileErrorrS
ui_filename&click.exceptions.FileError.ui_filename
builtins.str"builtins.strrM
filename#click.exceptions.FileError.filename
builtins.str"builtins.strì	
MissingParameter!click.exceptions.MissingParameter"click.exceptions.BadParameter*Â
__init__*click.exceptions.MissingParameter.__init__"
None*P
selfF
!click.exceptions.MissingParameter"!click.exceptions.MissingParameter*S
messageD
Union[builtins.str,None]
builtins.str"builtins.str
None *a
ctxV
Union[click.core.Context,None](
click.core.Context"click.core.Context
None *i
param\
 Union[click.core.Parameter,None],
click.core.Parameter"click.core.Parameter
None *V

param_hintD
Union[builtins.str,None]
builtins.str"builtins.str
None *V

param_typeD
Union[builtins.str,None]
builtins.str"builtins.str
None *≤
format_message0click.exceptions.MissingParameter.format_message"
builtins.str"builtins.str*P
selfF
!click.exceptions.MissingParameter"!click.exceptions.MissingParameter*ú
__str__)click.exceptions.MissingParameter.__str__"
builtins.str"builtins.str*HF
!click.exceptions.MissingParameter"!click.exceptions.MissingParameterrÄ

param_type,click.exceptions.MissingParameter.param_typeD
Union[builtins.str,None]
builtins.str"builtins.str
None§
NoSuchOptionclick.exceptions.NoSuchOption"click.exceptions.UsageError*ç
__init__&click.exceptions.NoSuchOption.__init__"
None*H
self>
click.exceptions.NoSuchOption"click.exceptions.NoSuchOption*-
option_name
builtins.str"builtins.str*S
messageD
Union[builtins.str,None]
builtins.str"builtins.str
None *ù
possibilitiesá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *a
ctxV
Union[click.core.Context,None](
click.core.Context"click.core.Context
None *¶
format_message,click.exceptions.NoSuchOption.format_message"
builtins.str"builtins.str*H
self>
click.exceptions.NoSuchOption"click.exceptions.NoSuchOptionrV
option_name)click.exceptions.NoSuchOption.option_name
builtins.str"builtins.strr∆
possibilities+click.exceptions.NoSuchOption.possibilitiesá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
NoneÑ

UsageErrorclick.exceptions.UsageError"click.exceptions.ClickException*é
__init__$click.exceptions.UsageError.__init__"
None*D
self:
click.exceptions.UsageError"click.exceptions.UsageError*)
message
builtins.str"builtins.str*a
ctxV
Union[click.core.Context,None](
click.core.Context"click.core.Context
None *‘
show click.exceptions.UsageError.show"
None*D
self:
click.exceptions.UsageError"click.exceptions.UsageError*Z
fileN
Union[typing.IO[Any],None]$
typing.IO[Any]
Any"	typing.IO
None rP
	exit_code%click.exceptions.UsageError.exit_code
builtins.int"builtins.intr~
ctxclick.exceptions.UsageError.ctxV
Union[click.core.Context,None](
click.core.Context"click.core.Context
Noner~
cmdclick.exceptions.UsageError.cmdV
Union[click.core.Command,None](
click.core.Command"click.core.Command
None”
HelpFormatterclick.formatting.HelpFormatter"builtins.object*È
__init__'click.formatting.HelpFormatter.__init__"
None*J
self@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*4
indent_increment
builtins.int"builtins.int *Q
widthD
Union[builtins.int,None]
builtins.int"builtins.int
None *U
	max_widthD
Union[builtins.int,None]
builtins.int"builtins.int
None *≠
write$click.formatting.HelpFormatter.write"
None*J
self@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*(
string
builtins.str"builtins.str*Ö
indent%click.formatting.HelpFormatter.indent"
None*J
self@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*Ö
dedent%click.formatting.HelpFormatter.dedent"
None*J
self@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*µ
write_usage*click.formatting.HelpFormatter.write_usage"
None*J
self@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*&
prog
builtins.str"builtins.str*(
args
builtins.str"builtins.str *R
prefixD
Union[builtins.str,None]
builtins.str"builtins.str
None *æ
write_heading,click.formatting.HelpFormatter.write_heading"
None*J
self@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*)
heading
builtins.str"builtins.str*ó
write_paragraph.click.formatting.HelpFormatter.write_paragraph"
None*J
self@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*µ

write_text)click.formatting.HelpFormatter.write_text"
None*J
self@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*&
text
builtins.str"builtins.str*õ
write_dl'click.formatting.HelpFormatter.write_dl"
None*J
self@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*±
rows¶
1typing.Sequence[Tuple[builtins.str,builtins.str]]`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"typing.Sequence*+
col_max
builtins.int"builtins.int */
col_spacing
builtins.int"builtins.int *ˆ
section&click.formatting.HelpFormatter.section"2
typing.Iterator[None]
None"typing.Iterator*J
self@
click.formatting.HelpFormatter"click.formatting.HelpFormatter*&
name
builtins.str"builtins.str0:contextlib.contextmanager*÷
indentation*click.formatting.HelpFormatter.indentation"2
typing.Iterator[None]
None"typing.Iterator*J
self@
click.formatting.HelpFormatter"click.formatting.HelpFormatter0:contextlib.contextmanager*ù
getvalue'click.formatting.HelpFormatter.getvalue"
builtins.str"builtins.str*J
self@
click.formatting.HelpFormatter"click.formatting.HelpFormatterra
indent_increment/click.formatting.HelpFormatter.indent_increment
builtins.int"builtins.intrK
width$click.formatting.HelpFormatter.width
builtins.int"builtins.intr]
current_indent-click.formatting.HelpFormatter.current_indent
builtins.int"builtins.intr{
buffer%click.formatting.HelpFormatter.bufferJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list»!
OptionParserclick.parser.OptionParser"builtins.object*›
__init__"click.parser.OptionParser.__init__"
None*@
self6
click.parser.OptionParser"click.parser.OptionParser*a
ctxV
Union[click.core.Context,None](
click.core.Context"click.core.Context
None *ç

add_option$click.parser.OptionParser.add_option"
None*@
self6
click.parser.OptionParser"click.parser.OptionParser*/
obj&
click.core.Option"click.core.Option*X
optsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*N
destD
Union[builtins.str,None]
builtins.str"builtins.str
None*R
actionD
Union[builtins.str,None]
builtins.str"builtins.str
None *)
nargs
builtins.int"builtins.int *3
const&
Union[Any,None]
Any
None *≤
add_argument&click.parser.OptionParser.add_argument"
None*@
self6
click.parser.OptionParser"click.parser.OptionParser*3
obj*
click.core.Argument"click.core.Argument*N
destD
Union[builtins.str,None]
builtins.str"builtins.str
None*)
nargs
builtins.int"builtins.int *¿

parse_args$click.parser.OptionParser.parse_args"Û
fTuple[builtins.dict[builtins.str,Any],builtins.list[builtins.str],builtins.list[click.core.Parameter]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listb
#builtins.list[click.core.Parameter],
click.core.Parameter"click.core.Parameter"builtins.list*@
self6
click.parser.OptionParser"click.parser.OptionParser*T
argsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*Ÿ
_process_args_for_args0click.parser.OptionParser._process_args_for_args"
None*@
self6
click.parser.OptionParser"click.parser.OptionParser*A
state6
click.parser.ParsingState"click.parser.ParsingState*ﬂ
_process_args_for_options3click.parser.OptionParser._process_args_for_options"
None*@
self6
click.parser.OptionParser"click.parser.OptionParser*A
state6
click.parser.ParsingState"click.parser.ParsingState*Ã
_match_long_opt)click.parser.OptionParser._match_long_opt"
None*@
self6
click.parser.OptionParser"click.parser.OptionParser*%
opt
builtins.str"builtins.str*X
explicit_valueD
Union[builtins.str,None]
builtins.str"builtins.str
None*A
state6
click.parser.ParsingState"click.parser.ParsingState*Ù
_match_short_opt*click.parser.OptionParser._match_short_opt"
None*@
self6
click.parser.OptionParser"click.parser.OptionParser*%
arg
builtins.str"builtins.str*A
state6
click.parser.ParsingState"click.parser.ParsingState*Ω
_get_value_from_state/click.parser.OptionParser._get_value_from_state"
Any*@
self6
click.parser.OptionParser"click.parser.OptionParser*-
option_name
builtins.str"builtins.str*6
option*
click.parser.Option"click.parser.Option*A
state6
click.parser.ParsingState"click.parser.ParsingState*Ó
_process_opts'click.parser.OptionParser._process_opts"
None*@
self6
click.parser.OptionParser"click.parser.OptionParser*%
arg
builtins.str"builtins.str*A
state6
click.parser.ParsingState"click.parser.ParsingStater|
ctxclick.parser.OptionParser.ctxV
Union[click.core.Context,None](
click.core.Context"click.core.Context
Nonerl
allow_interspersed_args1click.parser.OptionParser.allow_interspersed_args
builtins.bool"builtins.boolrj
ignore_unknown_options0click.parser.OptionParser.ignore_unknown_options
builtins.bool"builtins.boolrø

_short_opt$click.parser.OptionParser._short_optä
/builtins.dict[builtins.str,click.parser.Option]
builtins.str"builtins.str*
click.parser.Option"click.parser.Option"builtins.dictrΩ
	_long_opt#click.parser.OptionParser._long_optä
/builtins.dict[builtins.str,click.parser.Option]
builtins.str"builtins.str*
click.parser.Option"click.parser.Option"builtins.dictrÇ
_opt_prefixes'click.parser.OptionParser._opt_prefixesH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.setrè
_argsclick.parser.OptionParser._argse
$builtins.list[click.parser.Argument].
click.parser.Argument"click.parser.Argument"builtins.list–
Choiceclick.types.Choice"click.types.ParamType*¯
__init__click.types.Choice.__init__"
None*2
self(
click.types.Choice"click.types.Choice*[
choicesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*4
case_sensitive
builtins.bool"builtins.bool *º
to_info_dictclick.types.Choice.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*2
self(
click.types.Choice"click.types.Choice*∏
get_metavarclick.types.Choice.get_metavar"
builtins.str"builtins.str*2
self(
click.types.Choice"click.types.Choice*7
param,
click.core.Parameter"click.core.Parameter*»
get_missing_message&click.types.Choice.get_missing_message"
builtins.str"builtins.str*2
self(
click.types.Choice"click.types.Choice*7
param,
click.core.Parameter"click.core.Parameter*¿
convertclick.types.Choice.convert"
Any*2
self(
click.types.Choice"click.types.Choice*
value
Any*g
param\
 Union[click.core.Parameter,None],
click.core.Parameter"click.core.Parameter
None*_
ctxV
Union[click.core.Context,None](
click.core.Context"click.core.Context
None*q
__repr__click.types.Choice.__repr__"
builtins.str"builtins.str**(
click.types.Choice"click.types.Choice*ô
shell_complete!click.types.Choice.shell_complete"ï
4builtins.list[click.shell_completion.CompletionItem]N
%click.shell_completion.CompletionItem"%click.shell_completion.CompletionItem"builtins.list*2
self(
click.types.Choice"click.types.Choice*1
ctx(
click.core.Context"click.core.Context*7
param,
click.core.Parameter"click.core.Parameter*,

incomplete
builtins.str"builtins.strr=
nameclick.types.Choice.name
builtins.str"builtins.strru
choicesclick.types.Choice.choicesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.SequencerS
case_sensitive!click.types.Choice.case_sensitive
builtins.bool"builtins.bool–
DateTimeclick.types.DateTime"click.types.ParamType*Ö
__init__click.types.DateTime.__init__"
None*6
self,
click.types.DateTime"click.types.DateTime*ó
formatsá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *¬
to_info_dict!click.types.DateTime.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*6
self,
click.types.DateTime"click.types.DateTime*æ
get_metavar click.types.DateTime.get_metavar"
builtins.str"builtins.str*6
self,
click.types.DateTime"click.types.DateTime*7
param,
click.core.Parameter"click.core.Parameter*å
_try_to_convert_date)click.types.DateTime._try_to_convert_date"S
Union[datetime.datetime,None]&
datetime.datetime"datetime.datetime
None*6
self,
click.types.DateTime"click.types.DateTime*
value
Any*(
format
builtins.str"builtins.str*∆
convertclick.types.DateTime.convert"
Any*6
self,
click.types.DateTime"click.types.DateTime*
value
Any*g
param\
 Union[click.core.Parameter,None],
click.core.Parameter"click.core.Parameter
None*_
ctxV
Union[click.core.Context,None](
click.core.Context"click.core.Context
None*w
__repr__click.types.DateTime.__repr__"
builtins.str"builtins.str*.,
click.types.DateTime"click.types.DateTimer?
nameclick.types.DateTime.name
builtins.str"builtins.strrw
formatsclick.types.DateTime.formatsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.SequenceÍ
Fileclick.types.File"click.types.ParamType*∂
__init__click.types.File.__init__"
None*.
self$
click.types.File"click.types.File*(
mode
builtins.str"builtins.str *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
lazyG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *,
atomic
builtins.bool"builtins.bool *∂
to_info_dictclick.types.File.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*.
self$
click.types.File"click.types.File*õ
resolve_lazy_flag"click.types.File.resolve_lazy_flag"
builtins.bool"builtins.bool*.
self$
click.types.File"click.types.File*
value
Any*∫
convertclick.types.File.convert"
Any*.
self$
click.types.File"click.types.File*
value
Any*g
param\
 Union[click.core.Parameter,None],
click.core.Parameter"click.core.Parameter
None*_
ctxV
Union[click.core.Context,None](
click.core.Context"click.core.Context
None*ì
shell_completeclick.types.File.shell_complete"ï
4builtins.list[click.shell_completion.CompletionItem]N
%click.shell_completion.CompletionItem"%click.shell_completion.CompletionItem"builtins.list*.
self$
click.types.File"click.types.File*1
ctx(
click.core.Context"click.core.Context*7
param,
click.core.Parameter"click.core.Parameter*,

incomplete
builtins.str"builtins.strr;
nameclick.types.File.name
builtins.str"builtins.strr[
envvar_list_splitter%click.types.File.envvar_list_splitter
builtins.str"builtins.strr;
modeclick.types.File.mode
builtins.str"builtins.strrk
encodingclick.types.File.encodingD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerg
errorsclick.types.File.errorsD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerf
lazyclick.types.File.lazyG
Union[builtins.bool,None]
builtins.bool"builtins.bool
NonerA
atomicclick.types.File.atomic
builtins.bool"builtins.bool‰

FloatRangeclick.types.FloatRange"click.types._NumberRangeBase"click.types.FloatParamType*¨
__init__click.types.FloatRange.__init__"
None*:
self0
click.types.FloatRange"click.types.FloatRange*U
minJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *U
maxJ
Union[builtins.float,None] 
builtins.float"builtins.float
None *.
min_open
builtins.bool"builtins.bool *.
max_open
builtins.bool"builtins.bool *+
clamp
builtins.bool"builtins.bool *ë
_clampclick.types.FloatRange._clamp" 
builtins.float"builtins.float*:
self0
click.types.FloatRange"click.types.FloatRange*+
bound 
builtins.float"builtins.float*≤
dir®
2Union[Literal[builtins.int],Literal[builtins.int]]7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int*(
open
builtins.bool"builtins.boolrA
nameclick.types.FloatRange.name
builtins.str"builtins.strü
IntRangeclick.types.IntRange"click.types._NumberRangeBase"click.types.IntParamType*É
_clampclick.types.IntRange._clamp"
builtins.int"builtins.int*6
self,
click.types.IntRange"click.types.IntRange*'
bound
builtins.int"builtins.int*≤
dir®
2Union[Literal[builtins.int],Literal[builtins.int]]7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int*(
open
builtins.bool"builtins.boolr?
nameclick.types.IntRange.name
builtins.str"builtins.str‚
	ParamTypeclick.types.ParamType"builtins.object*≈
to_info_dict"click.types.ParamType.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*8
self.
click.types.ParamType"click.types.ParamType*œ
__call__click.types.ParamType.__call__"
Any*8
self.
click.types.ParamType"click.types.ParamType*
value
Any*i
param\
 Union[click.core.Parameter,None],
click.core.Parameter"click.core.Parameter
None *a
ctxV
Union[click.core.Context,None](
click.core.Context"click.core.Context
None *È
get_metavar!click.types.ParamType.get_metavar"D
Union[builtins.str,None]
builtins.str"builtins.str
None*8
self.
click.types.ParamType"click.types.ParamType*7
param,
click.core.Parameter"click.core.Parameter*˘
get_missing_message)click.types.ParamType.get_missing_message"D
Union[builtins.str,None]
builtins.str"builtins.str
None*8
self.
click.types.ParamType"click.types.ParamType*7
param,
click.core.Parameter"click.core.Parameter*…
convertclick.types.ParamType.convert"
Any*8
self.
click.types.ParamType"click.types.ParamType*
value
Any*g
param\
 Union[click.core.Parameter,None],
click.core.Parameter"click.core.Parameter
None*_
ctxV
Union[click.core.Context,None](
click.core.Context"click.core.Context
None*Ó
split_envvar_value(click.types.ParamType.split_envvar_value"N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*8
self.
click.types.ParamType"click.types.ParamType*$
rv
builtins.str"builtins.str*„
failclick.types.ParamType.fail"
NoReturn
*8
self.
click.types.ParamType"click.types.ParamType*)
message
builtins.str"builtins.str*i
param\
 Union[click.core.Parameter,None],
click.core.Parameter"click.core.Parameter
None *a
ctxV
Union[click.core.Context,None](
click.core.Context"click.core.Context
None *¢
shell_complete$click.types.ParamType.shell_complete"ï
4builtins.list[click.shell_completion.CompletionItem]N
%click.shell_completion.CompletionItem"%click.shell_completion.CompletionItem"builtins.list*8
self.
click.types.ParamType"click.types.ParamType*1
ctx(
click.core.Context"click.core.Context*7
param,
click.core.Parameter"click.core.Parameter*,

incomplete
builtins.str"builtins.strrR
is_composite"click.types.ParamType.is_composite
builtins.bool"builtins.boolrB
arityclick.types.ParamType.arity
builtins.int"builtins.intr@
nameclick.types.ParamType.name
builtins.str"builtins.strrà
envvar_list_splitter*click.types.ParamType.envvar_list_splitterD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÉ
Pathclick.types.Path"click.types.ParamType*∫
__init__click.types.Path.__init__"
None*.
self$
click.types.Path"click.types.Path*,
exists
builtins.bool"builtins.bool */
	file_okay
builtins.bool"builtins.bool *.
dir_okay
builtins.bool"builtins.bool *.
writable
builtins.bool"builtins.bool *.
readable
builtins.bool"builtins.bool *2
resolve_path
builtins.bool"builtins.bool *0

allow_dash
builtins.bool"builtins.bool *R
	path_typeA
Union[Type[Any],None]
	Type[Any]
Any"type
None *0

executable
builtins.bool"builtins.bool *∂
to_info_dictclick.types.Path.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*.
self$
click.types.Path"click.types.Path*É
coerce_path_result#click.types.Path.coerce_path_result"
Any*.
self$
click.types.Path"click.types.Path*
rv
Any*∫
convertclick.types.Path.convert"
Any*.
self$
click.types.Path"click.types.Path*
value
Any*g
param\
 Union[click.core.Parameter,None],
click.core.Parameter"click.core.Parameter
None*_
ctxV
Union[click.core.Context,None](
click.core.Context"click.core.Context
None*ì
shell_completeclick.types.Path.shell_complete"ï
4builtins.list[click.shell_completion.CompletionItem]N
%click.shell_completion.CompletionItem"%click.shell_completion.CompletionItem"builtins.list*.
self$
click.types.Path"click.types.Path*1
ctx(
click.core.Context"click.core.Context*7
param,
click.core.Parameter"click.core.Parameter*,

incomplete
builtins.str"builtins.strr[
envvar_list_splitter%click.types.Path.envvar_list_splitter
builtins.str"builtins.strrA
existsclick.types.Path.exists
builtins.bool"builtins.boolrG
	file_okayclick.types.Path.file_okay
builtins.bool"builtins.boolrE
dir_okayclick.types.Path.dir_okay
builtins.bool"builtins.boolrE
readableclick.types.Path.readable
builtins.bool"builtins.boolrE
writableclick.types.Path.writable
builtins.bool"builtins.boolrI

executableclick.types.Path.executable
builtins.bool"builtins.boolrM
resolve_pathclick.types.Path.resolve_path
builtins.bool"builtins.boolrI

allow_dashclick.types.Path.allow_dash
builtins.bool"builtins.boolr`
typeclick.types.Path.typeA
Union[Type[Any],None]
	Type[Any]
Any"type
Noneä

Tupleclick.types.Tuple"click.types.CompositeParamType*µ
__init__click.types.Tuple.__init__"
None*0
self&
click.types.Tuple"click.types.Tuple*–
typesƒ
7typing.Sequence[Union[Type[Any],click.types.ParamType]]x
&Union[Type[Any],click.types.ParamType]
	Type[Any]
Any"type.
click.types.ParamType"click.types.ParamType"typing.Sequence*π
to_info_dictclick.types.Tuple.to_info_dict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*0
self&
click.types.Tuple"click.types.Tuple*Ö
nameclick.types.Tuple.name"
builtins.str"builtins.str*0
self&
click.types.Tuple"click.types.Tuple0:builtins.property`*á
arityclick.types.Tuple.arity"
builtins.int"builtins.int*0
self&
click.types.Tuple"click.types.Tuple0:builtins.property`*Ω
convertclick.types.Tuple.convert"
Any*0
self&
click.types.Tuple"click.types.Tuple*
value
Any*g
param\
 Union[click.core.Parameter,None],
click.core.Parameter"click.core.Parameter
None*_
ctxV
Union[click.core.Context,None](
click.core.Context"click.core.Context
Nonerá
typesclick.types.Tuple.typese
$builtins.list[click.types.ParamType].
click.types.ParamType"click.types.ParamType"builtins.listµ
argumentclick.decorators.argument"K
CallableType[builtins.function]&
builtins.function"builtins.function*-
param_decls
builtins.str"builtins.str*
attrs
AnyÃ
confirmation_option$click.decorators.confirmation_option"K
CallableType[builtins.function]&
builtins.function"builtins.function*-
param_decls
builtins.str"builtins.str*
kwargs
Anyº
help_optionclick.decorators.help_option"K
CallableType[builtins.function]&
builtins.function"builtins.function*-
param_decls
builtins.str"builtins.str*
kwargs
AnyÂ
make_pass_decorator$click.decorators.make_pass_decorator"K
CallableType[builtins.function]&
builtins.function"builtins.function*-
object_type
	Type[Any]
Any"type*,
ensure
builtins.bool"builtins.bool ±
optionclick.decorators.option"K
CallableType[builtins.function]&
builtins.function"builtins.function*-
param_decls
builtins.str"builtins.str*
attrs
Any˛
pass_contextclick.decorators.pass_context"c
click.decorators.FK
CallableType[builtins.function]&
builtins.function"builtins.function*j
fc
click.decorators.FK
CallableType[builtins.function]&
builtins.function"builtins.functionˆ
pass_objclick.decorators.pass_obj"c
click.decorators.FK
CallableType[builtins.function]&
builtins.function"builtins.function*j
fc
click.decorators.FK
CallableType[builtins.function]&
builtins.function"builtins.functionƒ
password_option click.decorators.password_option"K
CallableType[builtins.function]&
builtins.function"builtins.function*-
param_decls
builtins.str"builtins.str*
kwargs
Anyù
version_optionclick.decorators.version_option"K
CallableType[builtins.function]&
builtins.function"builtins.function*S
versionD
Union[builtins.str,None]
builtins.str"builtins.str
None *-
param_decls
builtins.str"builtins.str*X
package_nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *U
	prog_nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
messageD
Union[builtins.str,None]
builtins.str"builtins.str
None *
kwargs
Anyæ
	wrap_textclick.formatting.wrap_text"
builtins.str"builtins.str*&
text
builtins.str"builtins.str*)
width
builtins.int"builtins.int *2
initial_indent
builtins.str"builtins.str *5
subsequent_indent
builtins.str"builtins.str *9
preserve_paragraphs
builtins.bool"builtins.bool %
clearclick.termui.clear"
None˛
confirmclick.termui.confirm"
builtins.bool"builtins.bool*&
text
builtins.str"builtins.str*V
defaultG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *+
abort
builtins.bool"builtins.bool *1
prompt_suffix
builtins.str"builtins.str *2
show_default
builtins.bool"builtins.bool *)
err
builtins.bool"builtins.bool ∏
echo_via_pagerclick.termui.echo_via_pager"
None*®
text_or_generatorê
QUnion[typing.Iterable[builtins.str],CallableType[builtins.function],builtins.str]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.IterableK
CallableType[builtins.function]&
builtins.function"builtins.function
builtins.str"builtins.str*T
colorG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None ﬂ
editclick.termui.edit"o
Union[typing.AnyStr,None]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object
None*{
texto
Union[typing.AnyStr,None]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object
None *R
editorD
Union[builtins.str,None]
builtins.str"builtins.str
None *»
envº
5Union[typing.Mapping[builtins.str,builtins.str],None]w
)typing.Mapping[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"typing.Mapping
None *2
require_save
builtins.bool"builtins.bool *-
	extension
builtins.str"builtins.str *T
filenameD
Union[builtins.str,None]
builtins.str"builtins.str
None i
getcharclick.termui.getchar"
builtins.str"builtins.str**
echo
builtins.bool"builtins.bool º
launchclick.termui.launch"
builtins.int"builtins.int*%
url
builtins.str"builtins.str**
wait
builtins.bool"builtins.bool *,
locate
builtins.bool"builtins.bool ¢
pauseclick.termui.pause"
None*P
infoD
Union[builtins.str,None]
builtins.str"builtins.str
None *)
err
builtins.bool"builtins.bool ‹

progressbarclick.termui.progressbar"ô
.click._termui_impl.ProgressBar[click.termui.V]G
click.termui.V"
builtins.object"builtins.object"builtins.object"click._termui_impl.ProgressBar*«
iterable∂
+Union[typing.Iterable[click.termui.V],None]{
typing.Iterable[click.termui.V]G
click.termui.V"
builtins.object"builtins.object"builtins.object"typing.Iterable
None *R
lengthD
Union[builtins.int,None]
builtins.int"builtins.int
None *Q
labelD
Union[builtins.str,None]
builtins.str"builtins.str
None *.
show_eta
builtins.bool"builtins.bool *[
show_percentG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *.
show_pos
builtins.bool"builtins.bool *ù
item_show_funcÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *-
	fill_char
builtins.str"builtins.str *.

empty_char
builtins.str"builtins.str *0
bar_template
builtins.str"builtins.str *,
info_sep
builtins.str"builtins.str *)
width
builtins.int"builtins.int *S
fileG
Union[typing.TextIO,None]
typing.TextIO"typing.TextIO
None *T
colorG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *4
update_min_steps
builtins.int"builtins.int ì
promptclick.termui.prompt"
Any*&
text
builtins.str"builtins.str*5
default&
Union[Any,None]
Any
None *0

hide_input
builtins.bool"builtins.bool *~
confirmation_promptc
!Union[builtins.bool,builtins.str]
builtins.bool"builtins.bool
builtins.str"builtins.str *x
typel
%Union[click.types.ParamType,Any,None].
click.types.ParamType"click.types.ParamType
Any
None *ô

value_procÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *1
prompt_suffix
builtins.str"builtins.str *2
show_default
builtins.bool"builtins.bool *)
err
builtins.bool"builtins.bool *2
show_choices
builtins.bool"builtins.bool Õ
sechoclick.termui.secho"
None*5
message&
Union[Any,None]
Any
None *Æ
file°
$Union[typing.IO[typing.AnyStr],None]m
typing.IO[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"	typing.IO
None *(
nl
builtins.bool"builtins.bool *)
err
builtins.bool"builtins.bool *T
colorG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *
styles
Any™
styleclick.termui.style"
builtins.str"builtins.str*
text
Any*∂
fg´
SUnion[builtins.int,Tuple[builtins.int,builtins.int,builtins.int],builtins.str,None]
builtins.int"builtins.intã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.str"builtins.str
None *∂
bg´
SUnion[builtins.int,Tuple[builtins.int,builtins.int,builtins.int],builtins.str,None]
builtins.int"builtins.intã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.str"builtins.str
None *S
boldG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *R
dimG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *X
	underlineG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *W
overlineG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
italicG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *T
blinkG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *V
reverseG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *\
strikethroughG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *+
reset
builtins.bool"builtins.bool e
unstyleclick.termui.unstyle"
builtins.str"builtins.str*&
text
builtins.str"builtins.str‡
echoclick.utils.echo"
None*5
message&
Union[Any,None]
Any
None *Z
fileN
Union[typing.IO[Any],None]$
typing.IO[Any]
Any"	typing.IO
None *(
nl
builtins.bool"builtins.bool *)
err
builtins.bool"builtins.bool *T
colorG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None Æ
format_filenameclick.utils.format_filename"
builtins.str"builtins.str*∞
filename°
3Union[builtins.str,builtins.bytes,os.PathLike[Any]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes(
os.PathLike[Any]
Any"os.PathLike*-
shorten
builtins.bool"builtins.bool “
get_app_dirclick.utils.get_app_dir"
builtins.str"builtins.str**
app_name
builtins.str"builtins.str*-
roaming
builtins.bool"builtins.bool *1
force_posix
builtins.bool"builtins.bool €
get_binary_streamclick.utils.get_binary_stream""
typing.BinaryIO"typing.BinaryIO*Ç
name˜
HUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str˝
get_text_streamclick.utils.get_text_stream"
typing.TextIO"typing.TextIO*Ç
name˜
HUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None ¢
	open_fileclick.utils.open_file"$
typing.IO[Any]
Any"	typing.IO**
filename
builtins.str"builtins.str*(
mode
builtins.str"builtins.str *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None **
lazy
builtins.bool"builtins.bool *,
atomic
builtins.bool"builtins.bool "∆
commandclick.decorators.command±
commandclick.decorators.command"(
click.core.Command"click.core.Command*MK
CallableType[builtins.function]&
builtins.function"builtins.function0:typing.overloadXÎ
commandclick.decorators.command"K
CallableType[builtins.function]&
builtins.function"builtins.function*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *
attrs
Any0:typing.overloadX˛
commandclick.decorators.command"K
CallableType[builtins.function]&
builtins.function"builtins.function*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *ê
clsÑ
Type[click.decorators.CmdType]Z
click.decorators.CmdType(
click.core.Command"click.core.Command"click.core.Command"type *
attrs
Any0:typing.overloadX"µ
groupclick.decorators.group©
groupclick.decorators.group"$
click.core.Group"click.core.Group*MK
CallableType[builtins.function]&
builtins.function"builtins.function0:typing.overloadXÁ
groupclick.decorators.group"K
CallableType[builtins.function]&
builtins.function"builtins.function*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *
attrs
Any0:typing.overloadX"“
get_current_context!click.globals.get_current_context¡
get_current_context!click.globals.get_current_context"(
click.core.Context"click.core.Context*H
silent:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:typing.overloadX”
get_current_context!click.globals.get_current_context"V
Union[click.core.Context,None](
click.core.Context"click.core.Context
None*,
silent
builtins.bool"builtins.bool 0:typing.overloadX*f
__path__click.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*Å
__annotations__click.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*P
BOOLclick.types.BOOL6
click.types.BoolParamType"click.types.BoolParamType*T
FLOATclick.types.FLOAT8
click.types.FloatParamType"click.types.FloatParamType*L
INTclick.types.INT4
click.types.IntParamType"click.types.IntParamType*X
STRINGclick.types.STRING:
click.types.StringParamType"click.types.StringParamType*l
UNPROCESSEDclick.types.UNPROCESSEDD
 click.types.UnprocessedParamType" click.types.UnprocessedParamType*X
UUIDclick.types.UUID>
click.types.UUIDParameterType"click.types.UUIDParameterType*>
__version__click.__version__
builtins.str"builtins.str