
unittest.util‡
_shortenunittest.util._shorten"
builtins.str"builtins.str*#
s
builtins.str"builtins.str*+
	prefixlen
builtins.int"builtins.int*+
	suffixlen
builtins.int"builtins.intz38z39z310z311z312z313z314—
_common_shorten_repr"unittest.util._common_shorten_repr"L
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple*&
args
builtins.str"builtins.strz38z39z310z311z312z313z314Ω
	safe_reprunittest.util.safe_repr"
builtins.str"builtins.str*+
obj"
builtins.object"builtins.object*+
short
builtins.bool"builtins.bool z38z39z310z311z312z313z314ä
strclassunittest.util.strclass"
builtins.str"builtins.str*'
cls
builtins.type"builtins.typez38z39z310z311z312z313z314ƒ
sorted_list_difference$unittest.util.sorted_list_difference"ƒ
FTuple[builtins.list[unittest.util._T],builtins.list[unittest.util._T]]{
builtins.list[unittest.util._T]I
unittest.util._T"
builtins.object"builtins.object"builtins.object"builtins.list{
builtins.list[unittest.util._T]I
unittest.util._T"
builtins.object"builtins.object"builtins.object"builtins.list*ç
expected
!typing.Sequence[unittest.util._T]I
unittest.util._T"
builtins.object"builtins.object"builtins.object"typing.Sequence*ã
actual
!typing.Sequence[unittest.util._T]I
unittest.util._T"
builtins.object"builtins.object"builtins.object"typing.Sequencez38z39z310z311z312z313z314Œ
unorderable_list_difference)unittest.util.unorderable_list_difference"ƒ
FTuple[builtins.list[unittest.util._T],builtins.list[unittest.util._T]]{
builtins.list[unittest.util._T]I
unittest.util._T"
builtins.object"builtins.object"builtins.object"builtins.list{
builtins.list[unittest.util._T]I
unittest.util._T"
builtins.object"builtins.object"builtins.object"builtins.list*ç
expected
!typing.Sequence[unittest.util._T]I
unittest.util._T"
builtins.object"builtins.object"builtins.object"typing.Sequence*ã
actual
!typing.Sequence[unittest.util._T]I
unittest.util._T"
builtins.object"builtins.object"builtins.object"typing.Sequencez38z39z310z311z312z313z314ã
three_way_cmpunittest.util.three_way_cmp"
builtins.int"builtins.int*
x
Any*
y
Anyz38z39z310z311z312z313z314≤
_count_diff_all_purpose%unittest.util._count_diff_all_purpose"∞
Obuiltins.list[TypeAlias[Tuple[unittest.util._T,unittest.util._T,builtins.int]]]Õ
@TypeAlias[Tuple[unittest.util._T,unittest.util._T,builtins.int]]Ì
5Tuple[unittest.util._T,unittest.util._T,builtins.int]I
unittest.util._T"
builtins.object"builtins.object"builtins.objectI
unittest.util._T"
builtins.object"builtins.object"builtins.object
builtins.int"builtins.int"unittest.util._Mismatch"builtins.list*ã
actual
!typing.Sequence[unittest.util._T]I
unittest.util._T"
builtins.object"builtins.object"builtins.object"typing.Sequence*ç
expected
!typing.Sequence[unittest.util._T]I
unittest.util._T"
builtins.object"builtins.object"builtins.object"typing.Sequencez38z39z310z311z312z313z314¨
_count_diff_hashable"unittest.util._count_diff_hashable"∞
Obuiltins.list[TypeAlias[Tuple[unittest.util._T,unittest.util._T,builtins.int]]]Õ
@TypeAlias[Tuple[unittest.util._T,unittest.util._T,builtins.int]]Ì
5Tuple[unittest.util._T,unittest.util._T,builtins.int]I
unittest.util._T"
builtins.object"builtins.object"builtins.objectI
unittest.util._T"
builtins.object"builtins.object"builtins.object
builtins.int"builtins.int"unittest.util._Mismatch"builtins.list*ã
actual
!typing.Sequence[unittest.util._T]I
unittest.util._T"
builtins.object"builtins.object"builtins.object"typing.Sequence*ç
expected
!typing.Sequence[unittest.util._T]I
unittest.util._T"
builtins.object"builtins.object"builtins.object"typing.Sequencez38z39z310z311z312z313z314*™
__annotations__unittest.util.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313*314*g
_MAX_LENGTHunittest.util._MAX_LENGTH
builtins.int"builtins.int*38*39*310*311*312*313*314*q
_PLACEHOLDER_LENunittest.util._PLACEHOLDER_LEN
builtins.int"builtins.int*38*39*310*311*312*313*314*m
_MIN_BEGIN_LENunittest.util._MIN_BEGIN_LEN
builtins.int"builtins.int*38*39*310*311*312*313*314*i
_MIN_END_LENunittest.util._MIN_END_LEN
builtins.int"builtins.int*38*39*310*311*312*313*314*o
_MIN_COMMON_LENunittest.util._MIN_COMMON_LEN
builtins.int"builtins.int*38*39*310*311*312*313*314*k
_MIN_DIFF_LENunittest.util._MIN_DIFF_LEN
builtins.int"builtins.int*38*39*310*311*312*313*314