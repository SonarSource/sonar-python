
pydantic.config§
SchemaExtraCallable#pydantic.config.SchemaExtraCallable"builtins.object2‘
__call__,pydantic.config.SchemaExtraCallable.__call__î
__call__,pydantic.config.SchemaExtraCallable.__call__"
None*T
selfJ
#pydantic.config.SchemaExtraCallable"#pydantic.config.SchemaExtraCallable*c
schemaW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict0:typing.overload@XÇ
__call__,pydantic.config.SchemaExtraCallable.__call__"
None*T
selfJ
#pydantic.config.SchemaExtraCallable"#pydantic.config.SchemaExtraCallable*c
schemaW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*l
model_class[
Type[pydantic.main.BaseModel]2
pydantic.main.BaseModel"pydantic.main.BaseModel"type0:typing.overload@XXâ
Extrapydantic.config.Extra"builtins.str"	enum.EnumHrB
allowpydantic.config.Extra.allow
builtins.str"builtins.strrD
ignorepydantic.config.Extra.ignore
builtins.str"builtins.strrD
forbidpydantic.config.Extra.forbid
builtins.str"builtins.strœ$

BaseConfigpydantic.config.BaseConfig"builtins.object*≈
get_field_info)pydantic.config.BaseConfig.get_field_info"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*m
clsd
 Type[pydantic.config.BaseConfig]8
pydantic.config.BaseConfig"pydantic.config.BaseConfig"type*&
name
builtins.str"builtins.str0:builtins.classmethodp*ë
prepare_field(pydantic.config.BaseConfig.prepare_field"
None*m
clsd
 Type[pydantic.config.BaseConfig]8
pydantic.config.BaseConfig"pydantic.config.BaseConfig"type*C
field8
pydantic.fields.ModelField"pydantic.fields.ModelField0:builtins.classmethodpro
title pydantic.config.BaseConfig.titleD
Union[builtins.str,None]
builtins.str"builtins.str
NonerW
anystr_lower'pydantic.config.BaseConfig.anystr_lower
builtins.bool"builtins.boolrm
anystr_strip_whitespace2pydantic.config.BaseConfig.anystr_strip_whitespace
builtins.bool"builtins.boolr_
min_anystr_length,pydantic.config.BaseConfig.min_anystr_length
builtins.int"builtins.intrá
max_anystr_length,pydantic.config.BaseConfig.max_anystr_lengthD
Union[builtins.int,None]
builtins.int"builtins.int
NonerW
validate_all'pydantic.config.BaseConfig.validate_all
builtins.bool"builtins.boolrY
extra pydantic.config.BaseConfig.extra.
pydantic.config.Extra"pydantic.config.Extrar[
allow_mutation)pydantic.config.BaseConfig.allow_mutation
builtins.bool"builtins.boolrK
frozen!pydantic.config.BaseConfig.frozen
builtins.bool"builtins.boolr{
allow_population_by_field_name9pydantic.config.BaseConfig.allow_population_by_field_name
builtins.bool"builtins.boolr]
use_enum_values*pydantic.config.BaseConfig.use_enum_values
builtins.bool"builtins.boolrç
fields!pydantic.config.BaseConfig.fieldsﬂ
Xbuiltins.dict[builtins.str,Union[builtins.str,builtins.dict[builtins.str,builtins.str]]]
builtins.str"builtins.str’
<Union[builtins.str,builtins.dict[builtins.str,builtins.str]]
builtins.str"builtins.stru
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict"builtins.dictre
validate_assignment.pydantic.config.BaseConfig.validate_assignment
builtins.bool"builtins.boolrº
error_msg_templates.pydantic.config.BaseConfig.error_msg_templatesu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dictrm
arbitrary_types_allowed2pydantic.config.BaseConfig.arbitrary_types_allowed
builtins.bool"builtins.boolrO
orm_mode#pydantic.config.BaseConfig.orm_mode
builtins.bool"builtins.boolrò
getter_dict&pydantic.config.BaseConfig.getter_dicta
Type[pydantic.utils.GetterDict]6
pydantic.utils.GetterDict"pydantic.utils.GetterDict"typer∆
alias_generator*pydantic.config.BaseConfig.alias_generatorÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
Nonerå
keep_untouched)pydantic.config.BaseConfig.keep_untouchedO
builtins.tuple[builtins.type]
builtins.type"builtins.type"builtins.tupler≠
schema_extra'pydantic.config.BaseConfig.schema_extraÛ
JUnion[builtins.dict[builtins.str,Any],pydantic.config.SchemaExtraCallable]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictJ
#pydantic.config.SchemaExtraCallable"#pydantic.config.SchemaExtraCallablerÄ

json_loads%pydantic.config.BaseConfig.json_loadsK
CallableType[builtins.function]&
builtins.function"builtins.functionrÄ

json_dumps%pydantic.config.BaseConfig.json_dumpsK
CallableType[builtins.function]&
builtins.function"builtins.functionrû
json_encoders(pydantic.config.BaseConfig.json_encoders‚
Wbuiltins.dict[Union[Type[Any],builtins.str],TypeAlias[CallableType[builtins.function]]]]
Union[Type[Any],builtins.str]
	Type[Any]
Any"type
builtins.str"builtins.strò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"pydantic.typing.AnyCallable"builtins.dictrw
underscore_attrs_are_private7pydantic.config.BaseConfig.underscore_attrs_are_private
builtins.bool"builtins.boolr…
copy_on_model_validation3pydantic.config.BaseConfig.copy_on_model_validation˜
HUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strrU
smart_union&pydantic.config.BaseConfig.smart_union
builtins.bool"builtins.boolä
inherit_configpydantic.config.inherit_config"±
+TypeAlias[Type[pydantic.config.BaseConfig]]d
 Type[pydantic.config.BaseConfig]8
pydantic.config.BaseConfig"pydantic.config.BaseConfig"type"pydantic.config.ConfigType*√
self_config±
+TypeAlias[Type[pydantic.config.BaseConfig]]d
 Type[pydantic.config.BaseConfig]8
pydantic.config.BaseConfig"pydantic.config.BaseConfig"type"pydantic.config.ConfigType*≈
parent_config±
+TypeAlias[Type[pydantic.config.BaseConfig]]d
 Type[pydantic.config.BaseConfig]8
pydantic.config.BaseConfig"pydantic.config.BaseConfig"type"pydantic.config.ConfigType*
	namespace
Anyÿ
prepare_configpydantic.config.prepare_config"
None*p
configd
 Type[pydantic.config.BaseConfig]8
pydantic.config.BaseConfig"pydantic.config.BaseConfig"type**
cls_name
builtins.str"builtins.str*ã
__annotations__pydantic.config.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*€
__all__pydantic.config.__all__∂
:Tuple[builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str