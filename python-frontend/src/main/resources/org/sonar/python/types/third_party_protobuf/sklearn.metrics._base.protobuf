
sklearn.metrics._baseô'
combinationsitertools.combinations"typing.Iterator*æ
__iter__itertools.combinations.__iter__"≈
itertools.combinations.Selfã
'itertools.combinations[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.combinations"itertools.combinations*»≈
itertools.combinations.Selfã
'itertools.combinations[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.combinations"itertools.combinations*é
__next__itertools.combinations.__next__"H
itertools._T_co"
builtins.object"builtins.object"builtins.object*ñ
selfã
'itertools.combinations[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.combinations2ã!
__new__itertools.combinations.__new__‚
__new__itertools.combinations.__new__"á
8itertools.combinations[Tuple[itertools._T,itertools._T]]≤
 Tuple[itertools._T,itertools._T]E
itertools._T"
builtins.object"builtins.object"builtins.objectE
itertools._T"
builtins.object"builtins.object"builtins.object"itertools.combinations*œ
cls≈
-Type[itertools.combinations[itertools._T_co]]ã
'itertools.combinations[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.combinations"type*Ö
iterablew
typing.Iterable[itertools._T]E
itertools._T"
builtins.object"builtins.object"builtins.object"typing.Iterable*>
r7
Literal[builtins.int]	
builtins.int"builtins.int0:typing.overloadX√
__new__itertools.combinations.__new__"Ë
Eitertools.combinations[Tuple[itertools._T,itertools._T,itertools._T]]Ü
-Tuple[itertools._T,itertools._T,itertools._T]E
itertools._T"
builtins.object"builtins.object"builtins.objectE
itertools._T"
builtins.object"builtins.object"builtins.objectE
itertools._T"
builtins.object"builtins.object"builtins.object"itertools.combinations*œ
cls≈
-Type[itertools.combinations[itertools._T_co]]ã
'itertools.combinations[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.combinations"type*Ö
iterablew
typing.Iterable[itertools._T]E
itertools._T"
builtins.object"builtins.object"builtins.object"typing.Iterable*>
r7
Literal[builtins.int]	
builtins.int"builtins.int0:typing.overloadX§
__new__itertools.combinations.__new__"…
Ritertools.combinations[Tuple[itertools._T,itertools._T,itertools._T,itertools._T]]⁄
:Tuple[itertools._T,itertools._T,itertools._T,itertools._T]E
itertools._T"
builtins.object"builtins.object"builtins.objectE
itertools._T"
builtins.object"builtins.object"builtins.objectE
itertools._T"
builtins.object"builtins.object"builtins.objectE
itertools._T"
builtins.object"builtins.object"builtins.object"itertools.combinations*œ
cls≈
-Type[itertools.combinations[itertools._T_co]]ã
'itertools.combinations[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.combinations"type*Ö
iterablew
typing.Iterable[itertools._T]E
itertools._T"
builtins.object"builtins.object"builtins.object"typing.Iterable*>
r7
Literal[builtins.int]	
builtins.int"builtins.int0:typing.overloadXÖ
__new__itertools.combinations.__new__"™
_itertools.combinations[Tuple[itertools._T,itertools._T,itertools._T,itertools._T,itertools._T]]Æ
GTuple[itertools._T,itertools._T,itertools._T,itertools._T,itertools._T]E
itertools._T"
builtins.object"builtins.object"builtins.objectE
itertools._T"
builtins.object"builtins.object"builtins.objectE
itertools._T"
builtins.object"builtins.object"builtins.objectE
itertools._T"
builtins.object"builtins.object"builtins.objectE
itertools._T"
builtins.object"builtins.object"builtins.object"itertools.combinations*œ
cls≈
-Type[itertools.combinations[itertools._T_co]]ã
'itertools.combinations[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.combinations"type*Ö
iterablew
typing.Iterable[itertools._T]E
itertools._T"
builtins.object"builtins.object"builtins.object"typing.Iterable*>
r7
Literal[builtins.int]	
builtins.int"builtins.int0:typing.overloadXÖ
__new__itertools.combinations.__new__"≈
4itertools.combinations[builtins.tuple[itertools._T]]u
builtins.tuple[itertools._T]E
itertools._T"
builtins.object"builtins.object"builtins.object"builtins.tuple"itertools.combinations*œ
cls≈
-Type[itertools.combinations[itertools._T_co]]ã
'itertools.combinations[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.combinations"type*Ö
iterablew
typing.Iterable[itertools._T]E
itertools._T"
builtins.object"builtins.object"builtins.object"typing.Iterable*#
r
builtins.int"builtins.int0:typing.overloadXPô!
check_array$sklearn.utils.validation.check_array"
Any*
array
Any*“
accept_sparseº
|Union[typing.Sequence[builtins.str],Tuple[builtins.str,builtins.str],builtins.list[builtins.str],builtins.str,builtins.bool]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
builtins.str"builtins.str
builtins.bool"builtins.bool *9
accept_large_sparse
builtins.bool"builtins.bool *Â
dtype◊
dUnion[None,typing.Sequence[builtins.type],Literal[builtins.str],Literal[builtins.str],builtins.type]
NoneQ
typing.Sequence[builtins.type]
builtins.type"builtins.type"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
builtins.type"builtins.type *≈
order∑
7Union[Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None **
copy
builtins.bool"builtins.bool *{
force_all_finitec
!Union[builtins.str,builtins.bool]
builtins.str"builtins.str
builtins.bool"builtins.bool */
	ensure_2d
builtins.bool"builtins.bool *.
allow_nd
builtins.bool"builtins.bool *ç

ensure_min_samplesÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *é

ensure_min_featuresÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *´
	estimatorô
3Union[None,builtins.str,sklearn.base.BaseEstimator]
None
builtins.str"builtins.str8
sklearn.base.BaseEstimator"sklearn.base.BaseEstimator *.

input_name
builtins.str"builtins.str j
check_consistent_length0sklearn.utils.validation.check_consistent_length"
None*
arrays
Anyõ
type_of_target'sklearn.utils.multiclass.type_of_target"
builtins.str"builtins.str*ë
yâ
ßUnion[TypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]],TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]]¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLike*.

input_name
builtins.str"builtins.str *ë
__annotations__%sklearn.metrics._base.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
npnumpy 