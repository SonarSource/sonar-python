
sqlalchemy.orm.decl_apiÅ
_DeclarativeBase(sqlalchemy.orm.decl_api._DeclarativeBase"builtins.object*Î
__init__1sqlalchemy.orm.decl_api._DeclarativeBase.__init__"
None*^
selfT
(sqlalchemy.orm.decl_api._DeclarativeBase"(sqlalchemy.orm.decl_api._DeclarativeBase*
args
Any*
kwargs
Anyz38z39z310z311z312z313j38j39j310j311j312j313rü
registry1sqlalchemy.orm.decl_api._DeclarativeBase.registryD
 sqlalchemy.orm.decl_api.registry" sqlalchemy.orm.decl_api.registry*38*39*310*311*312*313rõ
metadata1sqlalchemy.orm.decl_api._DeclarativeBase.metadata@
sqlalchemy.sql.schema.MetaData"sqlalchemy.sql.schema.MetaData*38*39*310*311*312*313rÅ
__abstract__5sqlalchemy.orm.decl_api._DeclarativeBase.__abstract__
builtins.bool"builtins.bool*38*39*310*311*312*313rn
__mapper_cls__7sqlalchemy.orm.decl_api._DeclarativeBase.__mapper_cls__
Any*38*39*310*311*312*313rt
__class_getitem__:sqlalchemy.orm.decl_api._DeclarativeBase.__class_getitem__
Any*38*39*310*311*312*313û
DeclarativeMeta'sqlalchemy.orm.decl_api.DeclarativeMeta"builtins.type*“
__init__0sqlalchemy.orm.decl_api.DeclarativeMeta.__init__"
None*[
clsR
'sqlalchemy.orm.decl_api.DeclarativeMeta"'sqlalchemy.orm.decl_api.DeclarativeMeta*+
	classname
builtins.str"builtins.str*T
basesI
builtins.tuple[Type[Any]]
	Type[Any]
Any"type"builtins.tuple*b
dict_W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict**
kw"
builtins.object"builtins.objectz38z39z310z311z312z313*Ä
__setattr__3sqlalchemy.orm.decl_api.DeclarativeMeta.__setattr__"
None*[
clsR
'sqlalchemy.orm.decl_api.DeclarativeMeta"'sqlalchemy.orm.decl_api.DeclarativeMeta*%
key
builtins.str"builtins.str*
value
Anyz38z39z310z311z312z313*ﬁ
__delattr__3sqlalchemy.orm.decl_api.DeclarativeMeta.__delattr__"
None*TR
'sqlalchemy.orm.decl_api.DeclarativeMeta"'sqlalchemy.orm.decl_api.DeclarativeMeta*
builtins.str"builtins.strz38z39z310z311z312z313j38j39j310j311j312j313ì
declared_attr%sqlalchemy.orm.decl_api.declared_attr"$sqlalchemy.orm.base._MappedAttribute"builtins.property*˛
__init__.sqlalchemy.orm.decl_api.declared_attr.__init__"
None*X
selfN
%sqlalchemy.orm.decl_api.declared_attr"%sqlalchemy.orm.decl_api.declared_attr*
fget
Any*/
	cascading
builtins.bool"builtins.bool z38z39z310z311z312z313*r
__get__-sqlalchemy.orm.decl_api.declared_attr.__get__*
self*	
self_*
clsz38z39z310z311z312z313*ê
	cascading/sqlalchemy.orm.decl_api.declared_attr.cascading*
self0:*sqlalchemy.util.langhelpers.hybridpropertyz38z39z310z311z312z313j38j39j310j311j312j313Ã
_stateful_declared_attr/sqlalchemy.orm.decl_api._stateful_declared_attr"%sqlalchemy.orm.decl_api.declared_attr*È
__init__8sqlalchemy.orm.decl_api._stateful_declared_attr.__init__"
None*l
selfb
/sqlalchemy.orm.decl_api._stateful_declared_attr"/sqlalchemy.orm.decl_api._stateful_declared_attr*
kw
Anyz38z39z310z311z312z313*r
__call__8sqlalchemy.orm.decl_api._stateful_declared_attr.__call__*
self*
fnz38z39z310z311z312z313j38j39j310j311j312j313r]
kw2sqlalchemy.orm.decl_api._stateful_declared_attr.kw
Any*38*39*310*311*312*313§/
registry sqlalchemy.orm.decl_api.registry"builtins.object*é
__init__)sqlalchemy.orm.decl_api.registry.__init__"
None*N
selfD
 sqlalchemy.orm.decl_api.registry" sqlalchemy.orm.decl_api.registry*ä
metadataz
*Union[sqlalchemy.sql.schema.MetaData,None]@
sqlalchemy.sql.schema.MetaData"sqlalchemy.sql.schema.MetaData
None * 
class_registry≥
1Union[builtins.dict[builtins.str,Type[Any]],None]r
%builtins.dict[builtins.str,Type[Any]]
builtins.str"builtins.str
	Type[Any]
Any"type"builtins.dict
None *^
constructorK
CallableType[builtins.function]&
builtins.function"builtins.function *¶
_bindò
4Union[sqlalchemy.engine.interfaces.Connectable,None]T
(sqlalchemy.engine.interfaces.Connectable"(sqlalchemy.engine.interfaces.Connectable
None z38z39z310z311z312z313*Ó
mappers(sqlalchemy.orm.decl_api.registry.mappers"6
builtins.frozenset[Any]
Any"builtins.frozenset*N
selfD
 sqlalchemy.orm.decl_api.registry" sqlalchemy.orm.decl_api.registry0:builtins.property`z38z39z310z311z312z313*‹
	configure*sqlalchemy.orm.decl_api.registry.configure"
None*N
selfD
 sqlalchemy.orm.decl_api.registry" sqlalchemy.orm.decl_api.registry*-
cascade
builtins.bool"builtins.bool z38z39z310z311z312z313*ÿ
dispose(sqlalchemy.orm.decl_api.registry.dispose"
None*N
selfD
 sqlalchemy.orm.decl_api.registry" sqlalchemy.orm.decl_api.registry*-
cascade
builtins.bool"builtins.bool z38z39z310z311z312z313*¥
mapped'sqlalchemy.orm.decl_api.registry.mapped"E
sqlalchemy.orm.decl_api._ClsT
	Type[Any]
Any"type"type*N
selfD
 sqlalchemy.orm.decl_api.registry" sqlalchemy.orm.decl_api.registry*N
clsE
sqlalchemy.orm.decl_api._ClsT
	Type[Any]
Any"type"typez38z39z310z311z312z313*v
map_declaratively2sqlalchemy.orm.decl_api.registry.map_declaratively*
self*
clsz38z39z310z311z312z313*–
map_imperatively1sqlalchemy.orm.decl_api.registry.map_imperatively"
Any*N
selfD
 sqlalchemy.orm.decl_api.registry" sqlalchemy.orm.decl_api.registry*
class_
Any*n
local_table[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z3132—
generate_base.sqlalchemy.orm.decl_api.registry.generate_base
generate_base.sqlalchemy.orm.decl_api.registry.generate_base"é
.Type[sqlalchemy.orm.decl_api._DeclarativeBase]T
(sqlalchemy.orm.decl_api._DeclarativeBase"(sqlalchemy.orm.decl_api._DeclarativeBase"type*N
selfD
 sqlalchemy.orm.decl_api.registry" sqlalchemy.orm.decl_api.registry*i
mapper[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *£
clsó
*Union[Type[Any],builtins.tuple[Type[Any]]]
	Type[Any]
Any"typeI
builtins.tuple[Type[Any]]
	Type[Any]
Any"type"builtins.tuple *(
name
builtins.str"builtins.str 0:typing.overloadX◊
generate_base.sqlalchemy.orm.decl_api.registry.generate_base"π
sqlalchemy.orm.decl_api._DeclTé
.Type[sqlalchemy.orm.decl_api._DeclarativeBase]T
(sqlalchemy.orm.decl_api._DeclarativeBase"(sqlalchemy.orm.decl_api._DeclarativeBase"type"type*N
selfD
 sqlalchemy.orm.decl_api.registry" sqlalchemy.orm.decl_api.registry*i
mapper[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *£
clsó
*Union[Type[Any],builtins.tuple[Type[Any]]]
	Type[Any]
Any"typeI
builtins.tuple[Type[Any]]
	Type[Any]
Any"type"builtins.tuple *(
name
builtins.str"builtins.str *π
	metaclass©
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function",sqlalchemy.orm.decl_api._DeclarativeBaseMeta0:typing.overloadX¶
generate_base.sqlalchemy.orm.decl_api.registry.generate_base"é
.Type[sqlalchemy.orm.decl_api._DeclarativeBase]T
(sqlalchemy.orm.decl_api._DeclarativeBase"(sqlalchemy.orm.decl_api._DeclarativeBase"type*N
selfD
 sqlalchemy.orm.decl_api.registry" sqlalchemy.orm.decl_api.registry*g
mapper[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None*°
clsó
*Union[Type[Any],builtins.tuple[Type[Any]]]
	Type[Any]
Any"typeI
builtins.tuple[Type[Any]]
	Type[Any]
Any"type"builtins.tuple*&
name
builtins.str"builtins.str*π
	metaclass©
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function",sqlalchemy.orm.decl_api._DeclarativeBaseMeta0:typing.overloadX"38"39"310"311"312"3132˘
as_declarative_base4sqlalchemy.orm.decl_api.registry.as_declarative_baseË
as_declarative_base4sqlalchemy.orm.decl_api.registry.as_declarative_base"K
CallableType[builtins.function]&
builtins.function"builtins.function*N
selfD
 sqlalchemy.orm.decl_api.registry" sqlalchemy.orm.decl_api.registry*i
mapper[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None 0:typing.overloadX§
as_declarative_base4sqlalchemy.orm.decl_api.registry.as_declarative_base"K
CallableType[builtins.function]&
builtins.function"builtins.function*N
selfD
 sqlalchemy.orm.decl_api.registry" sqlalchemy.orm.decl_api.registry*i
mapper[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *π
	metaclass©
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function",sqlalchemy.orm.decl_api._DeclarativeBaseMeta0:typing.overloadX"38"39"310"311"312"313j38j39j310j311j312j313rì
metadata)sqlalchemy.orm.decl_api.registry.metadata@
sqlalchemy.sql.schema.MetaData"sqlalchemy.sql.schema.MetaData*38*39*310*311*312*313r§
constructor,sqlalchemy.orm.decl_api.registry.constructorK
CallableType[builtins.function]&
builtins.function"builtins.function*38*39*310*311*312*313•
has_inherited_table+sqlalchemy.orm.decl_api.has_inherited_table"
builtins.bool"builtins.bool*%
cls
	Type[Any]
Any"typez38z39z310z311z312z313ú
synonym_for#sqlalchemy.orm.decl_api.synonym_for"
Any*
name
Any*0

map_column
builtins.bool"builtins.bool z38z39z310z311z312z313Ò
declarative_mixin)sqlalchemy.orm.decl_api.declarative_mixin"E
sqlalchemy.orm.decl_api._ClsT
	Type[Any]
Any"type"type*N
clsE
sqlalchemy.orm.decl_api._ClsT
	Type[Any]
Any"type"typez38z39z310z311z312z313"û
declarative_base(sqlalchemy.orm.decl_api.declarative_baseˇ
declarative_base(sqlalchemy.orm.decl_api.declarative_base"é
.Type[sqlalchemy.orm.decl_api._DeclarativeBase]T
(sqlalchemy.orm.decl_api._DeclarativeBase"(sqlalchemy.orm.decl_api._DeclarativeBase"type*•
bindò
4Union[sqlalchemy.engine.interfaces.Connectable,None]T
(sqlalchemy.engine.interfaces.Connectable"(sqlalchemy.engine.interfaces.Connectable
None *ä
metadataz
*Union[sqlalchemy.sql.schema.MetaData,None]@
sqlalchemy.sql.schema.MetaData"sqlalchemy.sql.schema.MetaData
None *i
mapper[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *£
clsó
*Union[Type[Any],builtins.tuple[Type[Any]]]
	Type[Any]
Any"typeI
builtins.tuple[Type[Any]]
	Type[Any]
Any"type"builtins.tuple *(
name
builtins.str"builtins.str *^
constructorK
CallableType[builtins.function]&
builtins.function"builtins.function * 
class_registry≥
1Union[builtins.dict[builtins.str,Type[Any]],None]r
%builtins.dict[builtins.str,Type[Any]]
builtins.str"builtins.str
	Type[Any]
Any"type"builtins.dict
None 0:typing.overloadXÊ

declarative_base(sqlalchemy.orm.decl_api.declarative_base"π
sqlalchemy.orm.decl_api._DeclTé
.Type[sqlalchemy.orm.decl_api._DeclarativeBase]T
(sqlalchemy.orm.decl_api._DeclarativeBase"(sqlalchemy.orm.decl_api._DeclarativeBase"type"type*•
bindò
4Union[sqlalchemy.engine.interfaces.Connectable,None]T
(sqlalchemy.engine.interfaces.Connectable"(sqlalchemy.engine.interfaces.Connectable
None *ä
metadataz
*Union[sqlalchemy.sql.schema.MetaData,None]@
sqlalchemy.sql.schema.MetaData"sqlalchemy.sql.schema.MetaData
None *i
mapper[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *£
clsó
*Union[Type[Any],builtins.tuple[Type[Any]]]
	Type[Any]
Any"typeI
builtins.tuple[Type[Any]]
	Type[Any]
Any"type"builtins.tuple *(
name
builtins.str"builtins.str *^
constructorK
CallableType[builtins.function]&
builtins.function"builtins.function * 
class_registry≥
1Union[builtins.dict[builtins.str,Type[Any]],None]r
%builtins.dict[builtins.str,Type[Any]]
builtins.str"builtins.str
	Type[Any]
Any"type"builtins.dict
None *π
	metaclass©
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function",sqlalchemy.orm.decl_api._DeclarativeBaseMeta0:typing.overloadXÿ

declarative_base(sqlalchemy.orm.decl_api.declarative_base"π
sqlalchemy.orm.decl_api._DeclTé
.Type[sqlalchemy.orm.decl_api._DeclarativeBase]T
(sqlalchemy.orm.decl_api._DeclarativeBase"(sqlalchemy.orm.decl_api._DeclarativeBase"type"type*£
bindò
4Union[sqlalchemy.engine.interfaces.Connectable,None]T
(sqlalchemy.engine.interfaces.Connectable"(sqlalchemy.engine.interfaces.Connectable
None*à
metadataz
*Union[sqlalchemy.sql.schema.MetaData,None]@
sqlalchemy.sql.schema.MetaData"sqlalchemy.sql.schema.MetaData
None*g
mapper[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None*°
clsó
*Union[Type[Any],builtins.tuple[Type[Any]]]
	Type[Any]
Any"typeI
builtins.tuple[Type[Any]]
	Type[Any]
Any"type"builtins.tuple*&
name
builtins.str"builtins.str*\
constructorK
CallableType[builtins.function]&
builtins.function"builtins.function*»
class_registry≥
1Union[builtins.dict[builtins.str,Type[Any]],None]r
%builtins.dict[builtins.str,Type[Any]]
builtins.str"builtins.str
	Type[Any]
Any"type"builtins.dict
None*π
	metaclass©
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function",sqlalchemy.orm.decl_api._DeclarativeBaseMeta0:typing.overloadX"38"39"310"311"312"313"§
as_declarative&sqlalchemy.orm.decl_api.as_declarativeá
as_declarative&sqlalchemy.orm.decl_api.as_declarative"K
CallableType[builtins.function]&
builtins.function"builtins.function*•
bindò
4Union[sqlalchemy.engine.interfaces.Connectable,None]T
(sqlalchemy.engine.interfaces.Connectable"(sqlalchemy.engine.interfaces.Connectable
None *ä
metadataz
*Union[sqlalchemy.sql.schema.MetaData,None]@
sqlalchemy.sql.schema.MetaData"sqlalchemy.sql.schema.MetaData
None * 
class_registry≥
1Union[builtins.dict[builtins.str,Type[Any]],None]r
%builtins.dict[builtins.str,Type[Any]]
builtins.str"builtins.str
	Type[Any]
Any"type"builtins.dict
None *i
mapper[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None 0:typing.overloadX√
as_declarative&sqlalchemy.orm.decl_api.as_declarative"K
CallableType[builtins.function]&
builtins.function"builtins.function*•
bindò
4Union[sqlalchemy.engine.interfaces.Connectable,None]T
(sqlalchemy.engine.interfaces.Connectable"(sqlalchemy.engine.interfaces.Connectable
None *ä
metadataz
*Union[sqlalchemy.sql.schema.MetaData,None]@
sqlalchemy.sql.schema.MetaData"sqlalchemy.sql.schema.MetaData
None * 
class_registry≥
1Union[builtins.dict[builtins.str,Type[Any]],None]r
%builtins.dict[builtins.str,Type[Any]]
builtins.str"builtins.str
	Type[Any]
Any"type"builtins.dict
None *i
mapper[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *π
	metaclass©
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function",sqlalchemy.orm.decl_api._DeclarativeBaseMeta0:typing.overloadX"38"39"310"311"312"313*Ø
__annotations__'sqlalchemy.orm.decl_api.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313