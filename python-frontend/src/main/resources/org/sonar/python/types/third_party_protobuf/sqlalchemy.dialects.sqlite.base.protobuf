
sqlalchemy.dialects.sqlite.baseË
BLOBsqlalchemy.sql.sqltypes.BLOB"#sqlalchemy.sql.sqltypes.LargeBinaryj38j39j310j311j312j313j314r|
__visit_name__+sqlalchemy.sql.sqltypes.BLOB.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313*314Ì
BOOLEANsqlalchemy.sql.sqltypes.BOOLEAN"sqlalchemy.sql.sqltypes.Booleanj38j39j310j311j312j313j314r
__visit_name__.sqlalchemy.sql.sqltypes.BOOLEAN.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313*314„
CHARsqlalchemy.sql.sqltypes.CHAR"sqlalchemy.sql.sqltypes.Stringj38j39j310j311j312j313j314r|
__visit_name__+sqlalchemy.sql.sqltypes.CHAR.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313*314Ì
DECIMALsqlalchemy.sql.sqltypes.DECIMAL"sqlalchemy.sql.sqltypes.Numericj38j39j310j311j312j313j314r
__visit_name__.sqlalchemy.sql.sqltypes.DECIMAL.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313*314Â
FLOATsqlalchemy.sql.sqltypes.FLOAT"sqlalchemy.sql.sqltypes.Floatj38j39j310j311j312j313j314r}
__visit_name__,sqlalchemy.sql.sqltypes.FLOAT.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313*314Ì
INTEGERsqlalchemy.sql.sqltypes.INTEGER"sqlalchemy.sql.sqltypes.Integerj38j39j310j311j312j313j314r
__visit_name__.sqlalchemy.sql.sqltypes.INTEGER.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313*314Ì
NUMERICsqlalchemy.sql.sqltypes.NUMERIC"sqlalchemy.sql.sqltypes.Numericj38j39j310j311j312j313j314r
__visit_name__.sqlalchemy.sql.sqltypes.NUMERIC.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313*314‚
REALsqlalchemy.sql.sqltypes.REAL"sqlalchemy.sql.sqltypes.Floatj38j39j310j311j312j313j314r|
__visit_name__+sqlalchemy.sql.sqltypes.REAL.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313*314ˆ
SMALLINT sqlalchemy.sql.sqltypes.SMALLINT"$sqlalchemy.sql.sqltypes.SmallIntegerj38j39j310j311j312j313j314rÄ
__visit_name__/sqlalchemy.sql.sqltypes.SMALLINT.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313*314·
TEXTsqlalchemy.sql.sqltypes.TEXT"sqlalchemy.sql.sqltypes.Textj38j39j310j311j312j313j314r|
__visit_name__+sqlalchemy.sql.sqltypes.TEXT.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313*314’
	TIMESTAMP!sqlalchemy.sql.sqltypes.TIMESTAMP" sqlalchemy.sql.sqltypes.DateTime*„
__init__*sqlalchemy.sql.sqltypes.TIMESTAMP.__init__"
None*P
selfF
!sqlalchemy.sql.sqltypes.TIMESTAMP"!sqlalchemy.sql.sqltypes.TIMESTAMP*.
timezone
builtins.bool"builtins.bool z38z39z310z311z312z313z314*x
get_dbapi_type0sqlalchemy.sql.sqltypes.TIMESTAMP.get_dbapi_type*
self*	
dbapiz38z39z310z311z312z313z314j38j39j310j311j312j313j314rÅ
__visit_name__0sqlalchemy.sql.sqltypes.TIMESTAMP.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313*314Ï
VARCHARsqlalchemy.sql.sqltypes.VARCHAR"sqlalchemy.sql.sqltypes.Stringj38j39j310j311j312j313j314r
__visit_name__.sqlalchemy.sql.sqltypes.VARCHAR.__visit_name__
builtins.str"builtins.str*38*39*310*311*312*313*314k
JSON$sqlalchemy.dialects.sqlite.json.JSON"sqlalchemy.sql.sqltypes.JSONj38j39j310j311j312j313j314ô
_SQliteJson+sqlalchemy.dialects.sqlite.base._SQliteJson"$sqlalchemy.dialects.sqlite.json.JSON*ï
result_processor<sqlalchemy.dialects.sqlite.base._SQliteJson.result_processor*
self*
dialect*
coltypez38z39z310z311z312z313z314j38j39j310j311j312j313j314Ô
_DateTimeMixin.sqlalchemy.dialects.sqlite.base._DateTimeMixin"builtins.object*…
__init__7sqlalchemy.dialects.sqlite.base._DateTimeMixin.__init__"
None*j
self`
.sqlalchemy.dialects.sqlite.base._DateTimeMixin".sqlalchemy.dialects.sqlite.base._DateTimeMixin*q
storage_format[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *i
regexp[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313z314*£
format_is_text_affinityFsqlalchemy.dialects.sqlite.base._DateTimeMixin.format_is_text_affinity*
self0:builtins.property`z38z39z310z311z312z313z314*y
adapt4sqlalchemy.dialects.sqlite.base._DateTimeMixin.adapt*
self*
cls*
kwz38z39z310z311z312z313z314*ç
literal_processor@sqlalchemy.dialects.sqlite.base._DateTimeMixin.literal_processor*
self*
dialectz38z39z310z311z312z313z314j38j39j310j311j312j313j314≥
DATETIME(sqlalchemy.dialects.sqlite.base.DATETIME".sqlalchemy.dialects.sqlite.base._DateTimeMixin" sqlalchemy.sql.sqltypes.DateTime*
__init__1sqlalchemy.dialects.sqlite.base.DATETIME.__init__"
None*^
selfT
(sqlalchemy.dialects.sqlite.base.DATETIME"(sqlalchemy.dialects.sqlite.base.DATETIME*
args
Any*
kwargs
Anyz38z39z310z311z312z313z314*Å
bind_processor7sqlalchemy.dialects.sqlite.base.DATETIME.bind_processor*
self*
dialectz38z39z310z311z312z313z314*í
result_processor9sqlalchemy.dialects.sqlite.base.DATETIME.result_processor*
self*
dialect*
coltypez38z39z310z311z312z313z314j38j39j310j311j312j313j314´
DATE$sqlalchemy.dialects.sqlite.base.DATE".sqlalchemy.dialects.sqlite.base._DateTimeMixin"sqlalchemy.sql.sqltypes.Date*}
bind_processor3sqlalchemy.dialects.sqlite.base.DATE.bind_processor*
self*
dialectz38z39z310z311z312z313z314*é
result_processor5sqlalchemy.dialects.sqlite.base.DATE.result_processor*
self*
dialect*
coltypez38z39z310z311z312z313z314j38j39j310j311j312j313j314í
TIME$sqlalchemy.dialects.sqlite.base.TIME".sqlalchemy.dialects.sqlite.base._DateTimeMixin"sqlalchemy.sql.sqltypes.Time*‰
__init__-sqlalchemy.dialects.sqlite.base.TIME.__init__"
None*V
selfL
$sqlalchemy.dialects.sqlite.base.TIME"$sqlalchemy.dialects.sqlite.base.TIME*
args
Any*
kwargs
Anyz38z39z310z311z312z313z314*}
bind_processor3sqlalchemy.dialects.sqlite.base.TIME.bind_processor*
self*
dialectz38z39z310z311z312z313z314*é
result_processor5sqlalchemy.dialects.sqlite.base.TIME.result_processor*
self*
dialect*
coltypez38z39z310z311z312z313z314j38j39j310j311j312j313j314¿
SQLiteCompiler.sqlalchemy.dialects.sqlite.base.SQLiteCompiler"#sqlalchemy.sql.compiler.SQLCompiler*ä
visit_now_func=sqlalchemy.dialects.sqlite.base.SQLiteCompiler.visit_now_func*
self*
fn*
kwz38z39z310z311z312z313z314*¢
visit_localtimestamp_funcHsqlalchemy.dialects.sqlite.base.SQLiteCompiler.visit_localtimestamp_func*
self*
func*
kwz38z39z310z311z312z313z314*Ñ

visit_true9sqlalchemy.dialects.sqlite.base.SQLiteCompiler.visit_true*
self*
expr*
kwz38z39z310z311z312z313z314*Ü
visit_false:sqlalchemy.dialects.sqlite.base.SQLiteCompiler.visit_false*
self*
expr*
kwz38z39z310z311z312z313z314*ö
visit_char_length_funcEsqlalchemy.dialects.sqlite.base.SQLiteCompiler.visit_char_length_func*
self*
fn*
kwz38z39z310z311z312z313z314*à

visit_cast9sqlalchemy.dialects.sqlite.base.SQLiteCompiler.visit_cast*
self*
cast*

kwargsz38z39z310z311z312z313z314*ç
visit_extract<sqlalchemy.dialects.sqlite.base.SQLiteCompiler.visit_extract*
self*
extract*
kwz38z39z310z311z312z313z314*ä
limit_clause;sqlalchemy.dialects.sqlite.base.SQLiteCompiler.limit_clause*
self*

select*
kwz38z39z310z311z312z313z314*î
for_update_clause@sqlalchemy.dialects.sqlite.base.SQLiteCompiler.for_update_clause*
self*

select*
kwz38z39z310z311z312z313z314*∫
visit_is_distinct_from_binaryLsqlalchemy.dialects.sqlite.base.SQLiteCompiler.visit_is_distinct_from_binary*
self*

binary*
operator*
kwz38z39z310z311z312z313z314*¬
!visit_is_not_distinct_from_binaryPsqlalchemy.dialects.sqlite.base.SQLiteCompiler.visit_is_not_distinct_from_binary*
self*

binary*
operator*
kwz38z39z310z311z312z313z314*∏
visit_json_getitem_op_binaryKsqlalchemy.dialects.sqlite.base.SQLiteCompiler.visit_json_getitem_op_binary*
self*

binary*
operator*
kwz38z39z310z311z312z313z314*¬
!visit_json_path_getitem_op_binaryPsqlalchemy.dialects.sqlite.base.SQLiteCompiler.visit_json_path_getitem_op_binary*
self*

binary*
operator*
kwz38z39z310z311z312z313z314*¶
visit_empty_set_op_exprFsqlalchemy.dialects.sqlite.base.SQLiteCompiler.visit_empty_set_op_expr*
self*	
type_*
	expand_opz38z39z310z311z312z313z314*ô
visit_empty_set_exprCsqlalchemy.dialects.sqlite.base.SQLiteCompiler.visit_empty_set_expr*
self*
element_typesz38z39z310z311z312z313z314*∏
visit_regexp_match_op_binaryKsqlalchemy.dialects.sqlite.base.SQLiteCompiler.visit_regexp_match_op_binary*
self*

binary*
operator*
kwz38z39z310z311z312z313z314*¿
 visit_not_regexp_match_op_binaryOsqlalchemy.dialects.sqlite.base.SQLiteCompiler.visit_not_regexp_match_op_binary*
self*

binary*
operator*
kwz38z39z310z311z312z313z314*Ø
visit_on_conflict_do_nothingKsqlalchemy.dialects.sqlite.base.SQLiteCompiler.visit_on_conflict_do_nothing*
self*
on_conflict*
kwz38z39z310z311z312z313z314*≠
visit_on_conflict_do_updateJsqlalchemy.dialects.sqlite.base.SQLiteCompiler.visit_on_conflict_do_update*
self*
on_conflict*
kwz38z39z310z311z312z313z314j38j39j310j311j312j313j314rs
extract_map:sqlalchemy.dialects.sqlite.base.SQLiteCompiler.extract_map
Any*38*39*310*311*312*313*314⁄
SQLiteDDLCompiler1sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler"#sqlalchemy.sql.compiler.DDLCompiler*©
get_column_specificationJsqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler.get_column_specification*
self*

column*

kwargsz38z39z310z311z312z313z314*©
visit_primary_key_constraintNsqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler.visit_primary_key_constraint*
self*

constraintz38z39z310z311z312z313z314*ü
visit_unique_constraintIsqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler.visit_unique_constraint*
self*

constraintz38z39z310z311z312z313z314*ù
visit_check_constraintHsqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler.visit_check_constraint*
self*

constraintz38z39z310z311z312z313z314*´
visit_column_check_constraintOsqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler.visit_column_check_constraint*
self*

constraintz38z39z310z311z312z313z314*©
visit_foreign_key_constraintNsqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler.visit_foreign_key_constraint*
self*

constraintz38z39z310z311z312z313z314*∆
define_constraint_remote_tablePsqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler.define_constraint_remote_table*
self*

constraint*	
table*
preparerz38z39z310z311z312z313z314*˝
visit_create_indexDsqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler.visit_create_index"
Any*p
selff
1sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler"1sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler*
create
Any*4
include_schema
builtins.bool"builtins.bool *:
include_table_schema
builtins.bool"builtins.bool z38z39z310z311z312z313z314*é
post_create_tableCsqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler.post_create_table*
self*	
tablez38z39z310z311z312z313z314j38j39j310j311j312j313j314Í
SQLiteTypeCompiler2sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler"+sqlalchemy.sql.compiler.GenericTypeCompiler*ô
visit_large_binaryEsqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler.visit_large_binary*
self*	
type_*
kwz38z39z310z311z312z313z314*ë
visit_DATETIMEAsqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler.visit_DATETIME*
self*	
type_*
kwz38z39z310z311z312z313z314*â

visit_DATE=sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler.visit_DATE*
self*	
type_*
kwz38z39z310z311z312z313z314*â

visit_TIME=sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler.visit_TIME*
self*	
type_*
kwz38z39z310z311z312z313z314*â

visit_JSON=sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler.visit_JSON*
self*	
type_*
kwz38z39z310z311z312z313z314j38j39j310j311j312j313j314ß
SQLiteIdentifierPreparer8sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer"*sqlalchemy.sql.compiler.IdentifierPreparerj38j39j310j311j312j313j314rÉ
reserved_wordsGsqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer.reserved_words
Any*38*39*310*311*312*313*314§
SQLiteExecutionContext6sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext"1sqlalchemy.engine.default.DefaultExecutionContextj38j39j310j311j312j313j314¶F
SQLiteDialect-sqlalchemy.dialects.sqlite.base.SQLiteDialect"(sqlalchemy.engine.default.DefaultDialect*Ì
__init__6sqlalchemy.dialects.sqlite.base.SQLiteDialect.__init__"
None*h
self^
-sqlalchemy.dialects.sqlite.base.SQLiteDialect"-sqlalchemy.dialects.sqlite.base.SQLiteDialect*r
isolation_level[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *5
native_datetime
builtins.bool"builtins.bool *r
json_serializer[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *t
json_deserializer[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *s
_json_serializer[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *u
_json_deserializer[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kwargs
Anyz38z39z310z311z312z313z314*ö
set_isolation_levelAsqlalchemy.dialects.sqlite.base.SQLiteDialect.set_isolation_level"
None*h
self^
-sqlalchemy.dialects.sqlite.base.SQLiteDialect"-sqlalchemy.dialects.sqlite.base.SQLiteDialect*

connection
Any*
level
Anyz38z39z310z311z312z313z314*ì
get_isolation_levelAsqlalchemy.dialects.sqlite.base.SQLiteDialect.get_isolation_level*
self*

connectionz38z39z310z311z312z313z314*q

on_connect8sqlalchemy.dialects.sqlite.base.SQLiteDialect.on_connect*
selfz38z39z310z311z312z313z314*ï
get_schema_names>sqlalchemy.dialects.sqlite.base.SQLiteDialect.get_schema_names*
self*

connection*
kwz38z39z310z311z312z313z314*˘
get_table_names=sqlalchemy.dialects.sqlite.base.SQLiteDialect.get_table_names"
Any*h
self^
-sqlalchemy.dialects.sqlite.base.SQLiteDialect"-sqlalchemy.dialects.sqlite.base.SQLiteDialect*

connection
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313z314*ù
get_temp_table_namesBsqlalchemy.dialects.sqlite.base.SQLiteDialect.get_temp_table_names*
self*

connection*
kwz38z39z310z311z312z313z314*õ
get_temp_view_namesAsqlalchemy.dialects.sqlite.base.SQLiteDialect.get_temp_view_names*
self*

connection*
kwz38z39z310z311z312z313z314*ı
	has_table7sqlalchemy.dialects.sqlite.base.SQLiteDialect.has_table"
Any*h
self^
-sqlalchemy.dialects.sqlite.base.SQLiteDialect"-sqlalchemy.dialects.sqlite.base.SQLiteDialect*

connection
Any*

table_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z38z39z310z311z312z313z314*˜
get_view_names<sqlalchemy.dialects.sqlite.base.SQLiteDialect.get_view_names"
Any*h
self^
-sqlalchemy.dialects.sqlite.base.SQLiteDialect"-sqlalchemy.dialects.sqlite.base.SQLiteDialect*

connection
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313z314*ô
get_view_definitionAsqlalchemy.dialects.sqlite.base.SQLiteDialect.get_view_definition"
Any*h
self^
-sqlalchemy.dialects.sqlite.base.SQLiteDialect"-sqlalchemy.dialects.sqlite.base.SQLiteDialect*

connection
Any*
	view_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313z314*ä
get_columns9sqlalchemy.dialects.sqlite.base.SQLiteDialect.get_columns"
Any*h
self^
-sqlalchemy.dialects.sqlite.base.SQLiteDialect"-sqlalchemy.dialects.sqlite.base.SQLiteDialect*

connection
Any*

table_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313z314*ñ
get_pk_constraint?sqlalchemy.dialects.sqlite.base.SQLiteDialect.get_pk_constraint"
Any*h
self^
-sqlalchemy.dialects.sqlite.base.SQLiteDialect"-sqlalchemy.dialects.sqlite.base.SQLiteDialect*

connection
Any*

table_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313z314*î
get_foreign_keys>sqlalchemy.dialects.sqlite.base.SQLiteDialect.get_foreign_keys"
Any*h
self^
-sqlalchemy.dialects.sqlite.base.SQLiteDialect"-sqlalchemy.dialects.sqlite.base.SQLiteDialect*

connection
Any*

table_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313z314*†
get_unique_constraintsDsqlalchemy.dialects.sqlite.base.SQLiteDialect.get_unique_constraints"
Any*h
self^
-sqlalchemy.dialects.sqlite.base.SQLiteDialect"-sqlalchemy.dialects.sqlite.base.SQLiteDialect*

connection
Any*

table_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313z314*û
get_check_constraintsCsqlalchemy.dialects.sqlite.base.SQLiteDialect.get_check_constraints"
Any*h
self^
-sqlalchemy.dialects.sqlite.base.SQLiteDialect"-sqlalchemy.dialects.sqlite.base.SQLiteDialect*

connection
Any*

table_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313z314*ä
get_indexes9sqlalchemy.dialects.sqlite.base.SQLiteDialect.get_indexes"
Any*h
self^
-sqlalchemy.dialects.sqlite.base.SQLiteDialect"-sqlalchemy.dialects.sqlite.base.SQLiteDialect*

connection
Any*

table_name
Any*i
schema[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None *
kw
Anyz38z39z310z311z312z313z314j38j39j310j311j312j313j314ry
name2sqlalchemy.dialects.sqlite.base.SQLiteDialect.name
builtins.str"builtins.str*38*39*310*311*312*313*314rè
supports_alter<sqlalchemy.dialects.sqlite.base.SQLiteDialect.supports_alter
builtins.bool"builtins.bool*38*39*310*311*312*313*314r©
supports_unicode_statementsIsqlalchemy.dialects.sqlite.base.SQLiteDialect.supports_unicode_statements
builtins.bool"builtins.bool*38*39*310*311*312*313*314rü
supports_unicode_bindsDsqlalchemy.dialects.sqlite.base.SQLiteDialect.supports_unicode_binds
builtins.bool"builtins.bool*38*39*310*311*312*313*314r°
supports_default_valuesEsqlalchemy.dialects.sqlite.base.SQLiteDialect.supports_default_values
builtins.bool"builtins.bool*38*39*310*311*312*313*314rß
supports_default_metavalueHsqlalchemy.dialects.sqlite.base.SQLiteDialect.supports_default_metavalue
builtins.bool"builtins.bool*38*39*310*311*312*313*314rù
supports_empty_insertCsqlalchemy.dialects.sqlite.base.SQLiteDialect.supports_empty_insert
builtins.bool"builtins.bool*38*39*310*311*312*313*314rç
supports_cast;sqlalchemy.dialects.sqlite.base.SQLiteDialect.supports_cast
builtins.bool"builtins.bool*38*39*310*311*312*313*314r©
supports_multivalues_insertIsqlalchemy.dialects.sqlite.base.SQLiteDialect.supports_multivalues_insert
builtins.bool"builtins.bool*38*39*310*311*312*313*314rë
tuple_in_values=sqlalchemy.dialects.sqlite.base.SQLiteDialect.tuple_in_values
builtins.bool"builtins.bool*38*39*310*311*312*313*314r£
supports_statement_cacheFsqlalchemy.dialects.sqlite.base.SQLiteDialect.supports_statement_cache
builtins.bool"builtins.bool*38*39*310*311*312*313*314rï
default_paramstyle@sqlalchemy.dialects.sqlite.base.SQLiteDialect.default_paramstyle
builtins.str"builtins.str*38*39*310*311*312*313*314rÄ
statement_compiler@sqlalchemy.dialects.sqlite.base.SQLiteDialect.statement_compiler
Any*38*39*310*311*312*313*314rt
ddl_compiler:sqlalchemy.dialects.sqlite.base.SQLiteDialect.ddl_compiler
Any*38*39*310*311*312*313*314rv
type_compiler;sqlalchemy.dialects.sqlite.base.SQLiteDialect.type_compiler
Any*38*39*310*311*312*313*314rl
preparer6sqlalchemy.dialects.sqlite.base.SQLiteDialect.preparer
Any*38*39*310*311*312*313*314rv
ischema_names;sqlalchemy.dialects.sqlite.base.SQLiteDialect.ischema_names
Any*38*39*310*311*312*313*314rl
colspecs6sqlalchemy.dialects.sqlite.base.SQLiteDialect.colspecs
Any*38*39*310*311*312*313*314rz
isolation_level=sqlalchemy.dialects.sqlite.base.SQLiteDialect.isolation_level
Any*38*39*310*311*312*313*314rÇ
construct_argumentsAsqlalchemy.dialects.sqlite.base.SQLiteDialect.construct_arguments
Any*38*39*310*311*312*313*314rz
native_datetime=sqlalchemy.dialects.sqlite.base.SQLiteDialect.native_datetime
Any*38*39*310*311*312*313*314*º
__annotations__/sqlalchemy.dialects.sqlite.base.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313*314*^
colspecs(sqlalchemy.dialects.sqlite.base.colspecs
Any*38*39*310*311*312*313*314*h
ischema_names-sqlalchemy.dialects.sqlite.base.ischema_names
Any*38*39*310*311*312*313*314