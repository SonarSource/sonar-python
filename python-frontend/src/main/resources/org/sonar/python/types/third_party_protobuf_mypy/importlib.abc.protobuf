
importlib.abc>
Finderimportlib.abc.Finder"builtins.object@babc.ABCMetaÊ
Loaderimportlib.abc.Loader"builtins.object*π
load_module importlib.abc.Loader.load_module"$
types.ModuleType"types.ModuleType*6
self,
importlib.abc.Loader"importlib.abc.Loader**
fullname
builtins.str"builtins.str*∑
module_repr importlib.abc.Loader.module_repr"
builtins.str"builtins.str*6
self,
importlib.abc.Loader"importlib.abc.Loader*0
module$
types.ModuleType"types.ModuleType*â
create_module"importlib.abc.Loader.create_module"P
Union[types.ModuleType,None]$
types.ModuleType"types.ModuleType
None*6
self,
importlib.abc.Loader"importlib.abc.Loader*J
spec@
importlib.machinery.ModuleSpec"importlib.machinery.ModuleSpec*£
exec_module importlib.abc.Loader.exec_module"
None*6
self,
importlib.abc.Loader"importlib.abc.Loader*0
module$
types.ModuleType"types.ModuleType@babc.ABCMeta¢
ResourceLoaderimportlib.abc.ResourceLoader"importlib.abc.Loader*€
get_data%importlib.abc.ResourceLoader.get_data" 
builtins.bytes"builtins.bytes*F
self<
importlib.abc.ResourceLoader"importlib.abc.ResourceLoader*&
path
builtins.str"builtins.str0:abc.abstractmethod@±
InspectLoaderimportlib.abc.InspectLoader"importlib.abc.Loader*∆

is_package&importlib.abc.InspectLoader.is_package"
builtins.bool"builtins.bool*D
self:
importlib.abc.InspectLoader"importlib.abc.InspectLoader**
fullname
builtins.str"builtins.str*Ó
get_code$importlib.abc.InspectLoader.get_code"J
Union[types.CodeType,None] 
types.CodeType"types.CodeType
None*D
self:
importlib.abc.InspectLoader"importlib.abc.InspectLoader**
fullname
builtins.str"builtins.str*Ñ

get_source&importlib.abc.InspectLoader.get_source"D
Union[builtins.str,None]
builtins.str"builtins.str
None*D
self:
importlib.abc.InspectLoader"importlib.abc.InspectLoader**
fullname
builtins.str"builtins.str0:abc.abstractmethod@*∏
exec_module'importlib.abc.InspectLoader.exec_module"
None*D
self:
importlib.abc.InspectLoader"importlib.abc.InspectLoader*0
module$
types.ModuleType"types.ModuleType*
source_to_code*importlib.abc.InspectLoader.source_to_code" 
types.CodeType"types.CodeType*ƒ	
dataπ	
◊Union[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],builtins.str,_ast.Module,_ast.Expression,_ast.Interactive]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer
builtins.str"builtins.str
_ast.Module"_ast.Module"
_ast.Expression"_ast.Expression$
_ast.Interactive"_ast.Interactive*≠

path†

÷Union[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBufferÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath 0:builtins.staticmethodh∂
ExecutionLoaderimportlib.abc.ExecutionLoader"importlib.abc.InspectLoader*Ê
get_filename*importlib.abc.ExecutionLoader.get_filename"
builtins.str"builtins.str*H
self>
importlib.abc.ExecutionLoader"importlib.abc.ExecutionLoader**
fullname
builtins.str"builtins.str0:abc.abstractmethod@˜
SourceLoaderimportlib.abc.SourceLoader"importlib.abc.ResourceLoader"importlib.abc.ExecutionLoader*¡

path_mtime%importlib.abc.SourceLoader.path_mtime" 
builtins.float"builtins.float*B
self8
importlib.abc.SourceLoader"importlib.abc.SourceLoader*&
path
builtins.str"builtins.str*—
set_data#importlib.abc.SourceLoader.set_data"
None*B
self8
importlib.abc.SourceLoader"importlib.abc.SourceLoader*&
path
builtins.str"builtins.str**
data 
builtins.bytes"builtins.bytes*È

get_source%importlib.abc.SourceLoader.get_source"D
Union[builtins.str,None]
builtins.str"builtins.str
None*B
self8
importlib.abc.SourceLoader"importlib.abc.SourceLoader**
fullname
builtins.str"builtins.str*˙

path_stats%importlib.abc.SourceLoader.path_stats"Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping*B
self8
importlib.abc.SourceLoader"importlib.abc.SourceLoader*&
path
builtins.str"builtins.str@babc.ABCMetaò	
MetaPathFinderimportlib.abc.MetaPathFinder"importlib.abc.Finder*û
find_module(importlib.abc.MetaPathFinder.find_module"\
 Union[importlib.abc.Loader,None],
importlib.abc.Loader"importlib.abc.Loader
None*F
self<
importlib.abc.MetaPathFinder"importlib.abc.MetaPathFinder**
fullname
builtins.str"builtins.str*í
pathá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None*ï
invalidate_caches.importlib.abc.MetaPathFinder.invalidate_caches"
None*F
self<
importlib.abc.MetaPathFinder"importlib.abc.MetaPathFinder*ò
	find_spec&importlib.abc.MetaPathFinder.find_spec"z
*Union[importlib.machinery.ModuleSpec,None]@
importlib.machinery.ModuleSpec"importlib.machinery.ModuleSpec
None*F
self<
importlib.abc.MetaPathFinder"importlib.abc.MetaPathFinder**
fullname
builtins.str"builtins.str*í
pathá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None*^
targetP
Union[types.ModuleType,None]$
types.ModuleType"types.ModuleType
None §

PathEntryFinderimportlib.abc.PathEntryFinder"importlib.abc.Finder*å
find_module)importlib.abc.PathEntryFinder.find_module"\
 Union[importlib.abc.Loader,None],
importlib.abc.Loader"importlib.abc.Loader
None*H
self>
importlib.abc.PathEntryFinder"importlib.abc.PathEntryFinder**
fullname
builtins.str"builtins.str*®
find_loader)importlib.abc.PathEntryFinder.find_loader"˜
ETuple[Union[importlib.abc.Loader,None],typing.Sequence[builtins.str]]\
 Union[importlib.abc.Loader,None],
importlib.abc.Loader"importlib.abc.Loader
NoneN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*H
self>
importlib.abc.PathEntryFinder"importlib.abc.PathEntryFinder**
fullname
builtins.str"builtins.str*ò
invalidate_caches/importlib.abc.PathEntryFinder.invalidate_caches"
None*H
self>
importlib.abc.PathEntryFinder"importlib.abc.PathEntryFinder*Ü
	find_spec'importlib.abc.PathEntryFinder.find_spec"z
*Union[importlib.machinery.ModuleSpec,None]@
importlib.machinery.ModuleSpec"importlib.machinery.ModuleSpec
None*H
self>
importlib.abc.PathEntryFinder"importlib.abc.PathEntryFinder**
fullname
builtins.str"builtins.str*^
targetP
Union[types.ModuleType,None]$
types.ModuleType"types.ModuleType
None ⁄

FileLoaderimportlib.abc.FileLoader"importlib.abc.ResourceLoader"importlib.abc.ExecutionLoader*À
__init__!importlib.abc.FileLoader.__init__"
None*>
self4
importlib.abc.FileLoader"importlib.abc.FileLoader**
fullname
builtins.str"builtins.str*&
path
builtins.str"builtins.str*∑
get_data!importlib.abc.FileLoader.get_data" 
builtins.bytes"builtins.bytes*>
self4
importlib.abc.FileLoader"importlib.abc.FileLoader*&
path
builtins.str"builtins.str*Â
get_filename%importlib.abc.FileLoader.get_filename"
builtins.str"builtins.str*>
self4
importlib.abc.FileLoader"importlib.abc.FileLoader*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *Î
load_module$importlib.abc.FileLoader.load_module"$
types.ModuleType"types.ModuleType*>
self4
importlib.abc.FileLoader"importlib.abc.FileLoader*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None @babc.ABCMetarC
nameimportlib.abc.FileLoader.name
builtins.str"builtins.strrC
pathimportlib.abc.FileLoader.path
builtins.str"builtins.strê
ResourceReaderimportlib.abc.ResourceReader"builtins.object*ë
open_resource*importlib.abc.ResourceReader.open_resource"H
typing.IO[builtins.bytes] 
builtins.bytes"builtins.bytes"	typing.IO*F
self<
importlib.abc.ResourceReader"importlib.abc.ResourceReader**
resource
builtins.str"builtins.str0:abc.abstractmethod@*Â
resource_path*importlib.abc.ResourceReader.resource_path"
builtins.str"builtins.str*F
self<
importlib.abc.ResourceReader"importlib.abc.ResourceReader**
resource
builtins.str"builtins.str0:abc.abstractmethod@*ﬂ
is_resource(importlib.abc.ResourceReader.is_resource"
builtins.bool"builtins.bool*F
self<
importlib.abc.ResourceReader"importlib.abc.ResourceReader*&
name
builtins.str"builtins.str0:abc.abstractmethod@*·
contents%importlib.abc.ResourceReader.contents"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*F
self<
importlib.abc.ResourceReader"importlib.abc.ResourceReader0:abc.abstractmethod@@babc.ABCMeta*â
__annotations__importlib.abc.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict