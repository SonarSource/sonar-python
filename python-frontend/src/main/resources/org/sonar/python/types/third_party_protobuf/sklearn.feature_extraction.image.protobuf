
 sklearn.feature_extraction.imageµH
productitertools.product"typing.Iterator*ë
__iter__itertools.product.__iter__"±
itertools.product.SelfÅ
"itertools.product[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.product"itertools.product*¥±
itertools.product.SelfÅ
"itertools.product[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.product"itertools.product*ˇ
__next__itertools.product.__next__"H
itertools._T_co"
builtins.object"builtins.object"builtins.object*å
selfÅ
"itertools.product[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.product2ÌB
__new__itertools.product.__new__ö
__new__itertools.product.__new__"û
'itertools.product[Tuple[itertools._T1]]`
Tuple[itertools._T1]F
itertools._T1"
builtins.object"builtins.object"builtins.object"itertools.product*¿
cls∂
(Type[itertools.product[itertools._T_co]]Å
"itertools.product[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.product"type*{y
typing.Iterable[itertools._T1]F
itertools._T1"
builtins.object"builtins.object"builtins.object"typing.Iterable0:typing.overloadX¸
__new__itertools.product.__new__"É
5itertools.product[Tuple[itertools._T1,itertools._T2]]∂
"Tuple[itertools._T1,itertools._T2]F
itertools._T1"
builtins.object"builtins.object"builtins.objectF
itertools._T2"
builtins.object"builtins.object"builtins.object"itertools.product*¿
cls∂
(Type[itertools.product[itertools._T_co]]Å
"itertools.product[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.product"type*{y
typing.Iterable[itertools._T1]F
itertools._T1"
builtins.object"builtins.object"builtins.object"typing.Iterable*{y
typing.Iterable[itertools._T2]F
itertools._T2"
builtins.object"builtins.object"builtins.object"typing.Iterable0:typing.overloadX›
__new__itertools.product.__new__"Á
Citertools.product[Tuple[itertools._T1,itertools._T2,itertools._T3]]å
0Tuple[itertools._T1,itertools._T2,itertools._T3]F
itertools._T1"
builtins.object"builtins.object"builtins.objectF
itertools._T2"
builtins.object"builtins.object"builtins.objectF
itertools._T3"
builtins.object"builtins.object"builtins.object"itertools.product*¿
cls∂
(Type[itertools.product[itertools._T_co]]Å
"itertools.product[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.product"type*{y
typing.Iterable[itertools._T1]F
itertools._T1"
builtins.object"builtins.object"builtins.object"typing.Iterable*{y
typing.Iterable[itertools._T2]F
itertools._T2"
builtins.object"builtins.object"builtins.object"typing.Iterable*{y
typing.Iterable[itertools._T3]F
itertools._T3"
builtins.object"builtins.object"builtins.object"typing.Iterable0:typing.overloadXæ	
__new__itertools.product.__new__"À
Qitertools.product[Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4]]‚
>Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4]F
itertools._T1"
builtins.object"builtins.object"builtins.objectF
itertools._T2"
builtins.object"builtins.object"builtins.objectF
itertools._T3"
builtins.object"builtins.object"builtins.objectF
itertools._T4"
builtins.object"builtins.object"builtins.object"itertools.product*¿
cls∂
(Type[itertools.product[itertools._T_co]]Å
"itertools.product[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.product"type*{y
typing.Iterable[itertools._T1]F
itertools._T1"
builtins.object"builtins.object"builtins.object"typing.Iterable*{y
typing.Iterable[itertools._T2]F
itertools._T2"
builtins.object"builtins.object"builtins.object"typing.Iterable*{y
typing.Iterable[itertools._T3]F
itertools._T3"
builtins.object"builtins.object"builtins.object"typing.Iterable*{y
typing.Iterable[itertools._T4]F
itertools._T4"
builtins.object"builtins.object"builtins.object"typing.Iterable0:typing.overloadXü
__new__itertools.product.__new__"Ø
_itertools.product[Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4,itertools._T5]]∏
LTuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4,itertools._T5]F
itertools._T1"
builtins.object"builtins.object"builtins.objectF
itertools._T2"
builtins.object"builtins.object"builtins.objectF
itertools._T3"
builtins.object"builtins.object"builtins.objectF
itertools._T4"
builtins.object"builtins.object"builtins.objectF
itertools._T5"
builtins.object"builtins.object"builtins.object"itertools.product*¿
cls∂
(Type[itertools.product[itertools._T_co]]Å
"itertools.product[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.product"type*{y
typing.Iterable[itertools._T1]F
itertools._T1"
builtins.object"builtins.object"builtins.object"typing.Iterable*{y
typing.Iterable[itertools._T2]F
itertools._T2"
builtins.object"builtins.object"builtins.object"typing.Iterable*{y
typing.Iterable[itertools._T3]F
itertools._T3"
builtins.object"builtins.object"builtins.object"typing.Iterable*{y
typing.Iterable[itertools._T4]F
itertools._T4"
builtins.object"builtins.object"builtins.object"typing.Iterable*{y
typing.Iterable[itertools._T5]F
itertools._T5"
builtins.object"builtins.object"builtins.object"typing.Iterable0:typing.overloadXÄ
__new__itertools.product.__new__"ì
mitertools.product[Tuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4,itertools._T5,itertools._T6]]é
ZTuple[itertools._T1,itertools._T2,itertools._T3,itertools._T4,itertools._T5,itertools._T6]F
itertools._T1"
builtins.object"builtins.object"builtins.objectF
itertools._T2"
builtins.object"builtins.object"builtins.objectF
itertools._T3"
builtins.object"builtins.object"builtins.objectF
itertools._T4"
builtins.object"builtins.object"builtins.objectF
itertools._T5"
builtins.object"builtins.object"builtins.objectF
itertools._T6"
builtins.object"builtins.object"builtins.object"itertools.product*¿
cls∂
(Type[itertools.product[itertools._T_co]]Å
"itertools.product[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.product"type*{y
typing.Iterable[itertools._T1]F
itertools._T1"
builtins.object"builtins.object"builtins.object"typing.Iterable*{y
typing.Iterable[itertools._T2]F
itertools._T2"
builtins.object"builtins.object"builtins.object"typing.Iterable*{y
typing.Iterable[itertools._T3]F
itertools._T3"
builtins.object"builtins.object"builtins.object"typing.Iterable*{y
typing.Iterable[itertools._T4]F
itertools._T4"
builtins.object"builtins.object"builtins.object"typing.Iterable*{y
typing.Iterable[itertools._T5]F
itertools._T5"
builtins.object"builtins.object"builtins.object"typing.Iterable*{y
typing.Iterable[itertools._T6]F
itertools._T6"
builtins.object"builtins.object"builtins.object"typing.Iterable0:typing.overloadXñ
__new__itertools.product.__new__"k
&itertools.product[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"itertools.product*¿
cls∂
(Type[itertools.product[itertools._T_co]]Å
"itertools.product[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.product"type*20
typing.Iterable[Any]
Any"typing.Iterable*20
typing.Iterable[Any]
Any"typing.Iterable*20
typing.Iterable[Any]
Any"typing.Iterable*20
typing.Iterable[Any]
Any"typing.Iterable*20
typing.Iterable[Any]
Any"typing.Iterable*20
typing.Iterable[Any]
Any"typing.Iterable*20
typing.Iterable[Any]
Any"typing.Iterable*?
	iterables0
typing.Iterable[Any]
Any"typing.Iterable0:typing.overloadXÚ
__new__itertools.product.__new__"æ
0itertools.product[builtins.tuple[itertools._T1]]w
builtins.tuple[itertools._T1]F
itertools._T1"
builtins.object"builtins.object"builtins.object"builtins.tuple"itertools.product*¿
cls∂
(Type[itertools.product[itertools._T_co]]Å
"itertools.product[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.product"type*à
	iterablesy
typing.Iterable[itertools._T1]F
itertools._T1"
builtins.object"builtins.object"builtins.object"typing.Iterable*(
repeat
builtins.int"builtins.int0:typing.overloadX÷
__new__itertools.product.__new__"k
&itertools.product[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"itertools.product*¿
cls∂
(Type[itertools.product[itertools._T_co]]Å
"itertools.product[itertools._T_co]H
itertools._T_co"
builtins.object"builtins.object"builtins.object"itertools.product"type*?
	iterables0
typing.Iterable[Any]
Any"typing.Iterable**
repeat
builtins.int"builtins.int 0:typing.overloadXP∞
Integralnumbers.Integral"numbers.Rational*Å
__int__numbers.Integral.__int__"
builtins.int"builtins.int*&$
numbers.Integral"numbers.Integral0:abc.abstractmethod@*u
	__index__numbers.Integral.__index__"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral*£
__pow__numbers.Integral.__pow__"
Any*&$
numbers.Integral"numbers.Integral*	
Any**&
Union[Any,None]
Any
None 0:abc.abstractmethod@*}

__lshift__numbers.Integral.__lshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*
__rlshift__numbers.Integral.__rlshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*}

__rshift__numbers.Integral.__rshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*
__rrshift__numbers.Integral.__rrshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*w
__and__numbers.Integral.__and__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*y
__rand__numbers.Integral.__rand__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*w
__xor__numbers.Integral.__xor__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*y
__rxor__numbers.Integral.__rxor__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*u
__or__numbers.Integral.__or__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*w
__ror__numbers.Integral.__ror__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*r

__invert__numbers.Integral.__invert__"
Any*&$
numbers.Integral"numbers.Integral0:abc.abstractmethod@*q
	__float__numbers.Integral.__float__" 
builtins.float"builtins.float*&$
numbers.Integral"numbers.Integral*å
	numeratornumbers.Integral.numerator"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral0:builtins.property`*ê
denominatornumbers.Integral.denominator"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral0:builtins.property`¿
Numbernumbers.Number"builtins.object*Ö
__hash__numbers.Number.__hash__"
builtins.int"builtins.int**
self 
numbers.Number"numbers.Number0:abc.abstractmethod@@babc.ABCMetaò
Realnumbers.Real"numbers.Complex"typing.SupportsFloat*}
	__float__numbers.Real.__float__" 
builtins.float"builtins.float*
numbers.Real"numbers.Real0:abc.abstractmethod@*Å
	__trunc__numbers.Real.__trunc__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real0:abc.abstractmethod@*Å
	__floor__numbers.Real.__floor__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real0:abc.abstractmethod@*
__ceil__numbers.Real.__ceil__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real0:abc.abstractmethod@*Y

__divmod__numbers.Real.__divmod__"
Any*
numbers.Real"numbers.Real*	
Any*l
__rdivmod__numbers.Real.__rdivmod__"
Any*&
self
numbers.Real"numbers.Real*
other
Any*ä
__floordiv__numbers.Real.__floordiv__"
builtins.int"builtins.int*
numbers.Real"numbers.Real*	
Any0:abc.abstractmethod@*å
__rfloordiv__numbers.Real.__rfloordiv__"
builtins.int"builtins.int*
numbers.Real"numbers.Real*	
Any0:abc.abstractmethod@*k
__mod__numbers.Real.__mod__"
Any*
numbers.Real"numbers.Real*	
Any0:abc.abstractmethod@*m
__rmod__numbers.Real.__rmod__"
Any*
numbers.Real"numbers.Real*	
Any0:abc.abstractmethod@*Ä
__lt__numbers.Real.__lt__"
builtins.bool"builtins.bool*
numbers.Real"numbers.Real*	
Any0:abc.abstractmethod@*Ä
__le__numbers.Real.__le__"
builtins.bool"builtins.bool*
numbers.Real"numbers.Real*	
Any0:abc.abstractmethod@*m
__complex__numbers.Real.__complex__"$
builtins.complex"builtins.complex*
numbers.Real"numbers.Real*a
realnumbers.Real.real"
Any*&
self
numbers.Real"numbers.Real0:builtins.property`*a
imagnumbers.Real.imag"
Any*&
self
numbers.Real"numbers.Real0:builtins.property`*T
	conjugatenumbers.Real.conjugate"
Any*&
self
numbers.Real"numbers.Real2Ä
	__round__numbers.Real.__round__≠
	__round__numbers.Real.__round__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real*
ndigits
None 0:abc.abstractmethod:typing.overload@X™
	__round__numbers.Real.__round__"
Any*&
self
numbers.Real"numbers.Real*)
ndigits
builtins.int"builtins.int0:abc.abstractmethod:typing.overload@X
Interval(sklearn.utils._param_validation.Interval"+sklearn.utils._param_validation._Constraint*©
__init__1sklearn.utils._param_validation.Interval.__init__"
None*^
selfT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.Interval*•
typeö
NUnion[numbers.Real,Type[numbers.Integral],Type[numbers.Real],numbers.Integral]
numbers.Real"numbers.RealF
Type[numbers.Integral]$
numbers.Integral"numbers.Integral"type:
Type[numbers.Real]
numbers.Real"numbers.Real"type$
numbers.Integral"numbers.Integral*
leftu
'Union[builtins.float,None,builtins.int] 
builtins.float"builtins.float
None
builtins.int"builtins.int*Ä
rightu
'Union[builtins.float,None,builtins.int] 
builtins.float"builtins.float
None
builtins.int"builtins.int*”
closed∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*Ã

__contains__5sklearn.utils._param_validation.Interval.__contains__"
builtins.bool"builtins.bool*VT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.Interval*å	â	
≈Union[builtins.bool,TypeAlias[Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]]]]
builtins.bool"builtins.boolú
∞TypeAlias[Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]]]Õ
•Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]] 
builtins.float"builtins.float®
/TypeAlias[numpy.floating[numpy._typing._16Bit]]d
$numpy.floating[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.floating"numpy.float16®
/TypeAlias[numpy.floating[numpy._typing._32Bit]]d
$numpy.floating[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.floating"numpy.float32®
/TypeAlias[numpy.floating[numpy._typing._64Bit]]d
$numpy.floating[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.floating"numpy.float64"sklearn._typing.Float*›
is_satisfied_by8sklearn.utils._param_validation.Interval.is_satisfied_by"
builtins.bool"builtins.bool*^
selfT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.Interval*
val
Any*±
__str__0sklearn.utils._param_validation.Interval.__str__"
builtins.str"builtins.str*VT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.IntervalŒ
PatchExtractor/sklearn.feature_extraction.image.PatchExtractor"sklearn.base.BaseEstimator*ˆ
__init__8sklearn.feature_extraction.image.PatchExtractor.__init__"
None*l
selfb
/sklearn.feature_extraction.image.PatchExtractor"/sklearn.feature_extraction.image.PatchExtractor*Ø

patch_sizeú
,Union[None,Tuple[builtins.int,builtins.int]]
None`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int *à
max_patchesu
'Union[builtins.float,None,builtins.int] 
builtins.float"builtins.float
None
builtins.int"builtins.int *˙
random_stateÂ
ùUnion[numpy.random.mtrand.RandomState,None,TypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]]B
numpy.random.mtrand.RandomState"numpy.random.mtrand.RandomState
NoneÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *Æ
fit3sklearn.feature_extraction.image.PatchExtractor.fit"Õ
4sklearn.feature_extraction.image.PatchExtractor_Selfb
/sklearn.feature_extraction.image.PatchExtractor"/sklearn.feature_extraction.image.PatchExtractor"/sklearn.feature_extraction.image.PatchExtractor*ÿ
selfÕ
4sklearn.feature_extraction.image.PatchExtractor_Selfb
/sklearn.feature_extraction.image.PatchExtractor"/sklearn.feature_extraction.image.PatchExtractor"/sklearn.feature_extraction.image.PatchExtractor*¥
X¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike*
y
Any *¶
	transform9sklearn.feature_extraction.image.PatchExtractor.transform"9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*l
selfb
/sklearn.feature_extraction.image.PatchExtractor"/sklearn.feature_extraction.image.PatchExtractor*¥
X¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLikerõ
_parameter_constraintsFsklearn.feature_extraction.image.PatchExtractor._parameter_constraints9
builtins.dict[Any,Any]
Any
Any"builtins.dictô!
check_array$sklearn.utils.validation.check_array"
Any*
array
Any*“
accept_sparseº
|Union[typing.Sequence[builtins.str],Tuple[builtins.str,builtins.str],builtins.list[builtins.str],builtins.str,builtins.bool]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
builtins.str"builtins.str
builtins.bool"builtins.bool *9
accept_large_sparse
builtins.bool"builtins.bool *Â
dtype◊
dUnion[None,typing.Sequence[builtins.type],Literal[builtins.str],Literal[builtins.str],builtins.type]
NoneQ
typing.Sequence[builtins.type]
builtins.type"builtins.type"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
builtins.type"builtins.type *≈
order∑
7Union[Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None **
copy
builtins.bool"builtins.bool *{
force_all_finitec
!Union[builtins.str,builtins.bool]
builtins.str"builtins.str
builtins.bool"builtins.bool */
	ensure_2d
builtins.bool"builtins.bool *.
allow_nd
builtins.bool"builtins.bool *ç

ensure_min_samplesÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *é

ensure_min_featuresÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *´
	estimatorô
3Union[None,builtins.str,sklearn.base.BaseEstimator]
None
builtins.str"builtins.str8
sklearn.base.BaseEstimator"sklearn.base.BaseEstimator *.

input_name
builtins.str"builtins.str ¯
check_random_state+sklearn.utils.validation.check_random_state"B
numpy.random.mtrand.RandomState"numpy.random.mtrand.RandomState*
seedÂ
ùUnion[None,TypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]],numpy.random.mtrand.RandomState]
NoneÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.IntB
numpy.random.mtrand.RandomState"numpy.random.mtrand.RandomState∂
img_to_graph-sklearn.feature_extraction.image.img_to_graph"i
!Union[Any,numpy.ndarray[Any,Any]]
Any9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*∂
img¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike*û
maskë
TUnion[None,TypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]]
None¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike *õ
	return_asâ
ßUnion[TypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]],TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]]¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLike *
dtype
Any ˛:
grid_to_graph.sklearn.feature_extraction.image.grid_to_graph"i
!Union[numpy.ndarray[Any,Any],Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray
Any*¸	
n_xÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int*¸	
n_yÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int*˛	
n_zÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *û
maskë
TUnion[None,TypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]]
None¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike *õ
	return_asâ
ßUnion[TypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]],TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]]¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLike *
dtype
Any π
extract_patches_2d3sklearn.feature_extraction.image.extract_patches_2d"9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*∏
image¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike*p

patch_size`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*à
max_patchesu
'Union[builtins.float,None,builtins.int] 
builtins.float"builtins.float
None
builtins.int"builtins.int *˙
random_stateÂ
ùUnion[numpy.random.mtrand.RandomState,None,TypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]]B
numpy.random.mtrand.RandomState"numpy.random.mtrand.RandomState
NoneÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int ∞
reconstruct_from_patches_2d<sklearn.feature_extraction.image.reconstruct_from_patches_2d"9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*∫
patches¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike*⁄

image_size…
UUnion[Tuple[builtins.int,builtins.int,builtins.int],Tuple[builtins.int,builtins.int]]ã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"Â'

as_strided"numpy.lib.stride_tricks.as_stridedò

as_strided"numpy.lib.stride_tricks.as_strided"É
STypeAlias[numpy.ndarray[Any,numpy.dtype[numpy._typing._array_like._ScalarType_co]]]Ü
Hnumpy.ndarray[Any,numpy.dtype[numpy._typing._array_like._ScalarType_co]]
Any°
5numpy.dtype[numpy._typing._array_like._ScalarType_co][
(numpy._typing._array_like._ScalarType_co
numpy.generic"numpy.generic"numpy.generic"numpy.dtype"numpy.ndarray"!numpy._typing._array_like.NDArray*∫

x≤

˚TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy.dtype[numpy._typing._array_like._ScalarType]],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[numpy._typing._array_like._ScalarType]]]]]â
Union[numpy._typing._array_like._SupportsArray[numpy.dtype[numpy._typing._array_like._ScalarType]],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[numpy._typing._array_like._ScalarType]]]]¶
\numpy._typing._array_like._SupportsArray[numpy.dtype[numpy._typing._array_like._ScalarType]]õ
2numpy.dtype[numpy._typing._array_like._ScalarType]X
%numpy._typing._array_like._ScalarType
numpy.generic"numpy.generic"numpy.generic"numpy.dtype"(numpy._typing._array_like._SupportsArrayË
ånumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[numpy._typing._array_like._ScalarType]]]¶
\numpy._typing._array_like._SupportsArray[numpy.dtype[numpy._typing._array_like._ScalarType]]õ
2numpy.dtype[numpy._typing._array_like._ScalarType]X
%numpy._typing._array_like._ScalarType
numpy.generic"numpy.generic"numpy.generic"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequence"$numpy._typing._array_like._ArrayLike*ï
shapeá
)Union[None,typing.Iterable[builtins.int]]
NoneN
typing.Iterable[builtins.int]
builtins.int"builtins.int"typing.Iterable *ó
stridesá
)Union[None,typing.Iterable[builtins.int]]
NoneN
typing.Iterable[builtins.int]
builtins.int"builtins.int"typing.Iterable *+
subok
builtins.bool"builtins.bool */
	writeable
builtins.bool"builtins.bool 0:typing.overloadXó

as_strided"numpy.lib.stride_tricks.as_strided"É
STypeAlias[numpy.ndarray[Any,numpy.dtype[numpy._typing._array_like._ScalarType_co]]]Ü
Hnumpy.ndarray[Any,numpy.dtype[numpy._typing._array_like._ScalarType_co]]
Any°
5numpy.dtype[numpy._typing._array_like._ScalarType_co][
(numpy._typing._array_like._ScalarType_co
numpy.generic"numpy.generic"numpy.generic"numpy.dtype"numpy.ndarray"!numpy._typing._array_like.NDArray*π
x±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike*ï
shapeá
)Union[None,typing.Iterable[builtins.int]]
NoneN
typing.Iterable[builtins.int]
builtins.int"builtins.int"typing.Iterable *ó
stridesá
)Union[None,typing.Iterable[builtins.int]]
NoneN
typing.Iterable[builtins.int]
builtins.int"builtins.int"typing.Iterable *+
subok
builtins.bool"builtins.bool */
	writeable
builtins.bool"builtins.bool 0:typing.overloadX*ú
__annotations__0sklearn.feature_extraction.image.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*:
sparse'sklearn.feature_extraction.image.sparse
Any*>
spmatrix)sklearn.feature_extraction.image.spmatrix
Any*B

coo_matrix+sklearn.feature_extraction.image.coo_matrix
Any*
npnumpy *
__all__(sklearn.feature_extraction.image.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list