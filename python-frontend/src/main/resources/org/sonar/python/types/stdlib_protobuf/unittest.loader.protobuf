
unittest.loaderÂ

TestLoaderunittest.loader.TestLoader"builtins.object*—
loadTestsFromTestCase0unittest.loader.TestLoader.loadTestsFromTestCase"4
unittest.suite.TestSuite"unittest.suite.TestSuite*B
self8
unittest.loader.TestLoader"unittest.loader.TestLoader*k
testCaseClassX
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase"typez38z39z310z311z312z313z314*Ω
loadTestsFromModule.unittest.loader.TestLoader.loadTestsFromModule"4
unittest.suite.TestSuite"unittest.suite.TestSuite*B
self8
unittest.loader.TestLoader"unittest.loader.TestLoader*0
module$
types.ModuleType"types.ModuleType*
args
Any*
pattern
Any z38z39z310z311z312z313z314*‰
loadTestsFromName,unittest.loader.TestLoader.loadTestsFromName"4
unittest.suite.TestSuite"unittest.suite.TestSuite*B
self8
unittest.loader.TestLoader"unittest.loader.TestLoader*&
name
builtins.str"builtins.str*^
moduleP
Union[types.ModuleType,None]$
types.ModuleType"types.ModuleType
None z38z39z310z311z312z313z314*ô
loadTestsFromNames-unittest.loader.TestLoader.loadTestsFromNames"4
unittest.suite.TestSuite"unittest.suite.TestSuite*B
self8
unittest.loader.TestLoader"unittest.loader.TestLoader*Y
namesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*^
moduleP
Union[types.ModuleType,None]$
types.ModuleType"types.ModuleType
None z38z39z310z311z312z313z314*·
getTestCaseNames+unittest.loader.TestLoader.getTestCaseNames"N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*B
self8
unittest.loader.TestLoader"unittest.loader.TestLoader*k
testCaseClassX
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase"typez38z39z310z311z312z313z314*ˇ
discover#unittest.loader.TestLoader.discover"4
unittest.suite.TestSuite"unittest.suite.TestSuite*B
self8
unittest.loader.TestLoader"unittest.loader.TestLoader*+
	start_dir
builtins.str"builtins.str*+
pattern
builtins.str"builtins.str *Y
top_level_dirD
Union[builtins.str,None]
builtins.str"builtins.str
None z38z39z310z311z312z313z314*∫
_match_path&unittest.loader.TestLoader._match_path"
builtins.bool"builtins.bool*B
self8
unittest.loader.TestLoader"unittest.loader.TestLoader*&
path
builtins.str"builtins.str*+
	full_path
builtins.str"builtins.str*)
pattern
builtins.str"builtins.strz38z39z310z311z312z313z314j38j39j310j311j312j313j314rÂ
errors!unittest.loader.TestLoader.errorsñ
+builtins.list[Type[builtins.BaseException]]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type"builtins.list*38*39*310*311*312*313*314r~
testMethodPrefix+unittest.loader.TestLoader.testMethodPrefix
builtins.str"builtins.str*38*39*310*311*312*313*314rç
sortTestMethodsUsing/unittest.loader.TestLoader.sortTestMethodsUsing¢
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"%unittest.loader._SortComparisonMethod*38*39*310*311*312*313*314r‰
testNamePatterns+unittest.loader.TestLoader.testNamePatternsÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None*38*39*310*311*312*313*314rÔ

suiteClass%unittest.loader.TestLoader.suiteClassò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"unittest.loader._SuiteClass*38*39*310*311*312*313*314ê
getTestCaseNames unittest.loader.getTestCaseNames"N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*k
testCaseClassX
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase"type*(
prefix
builtins.str"builtins.str*¥
	sortUsing¢
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"%unittest.loader._SortComparisonMethod *ö
testNamePatternsÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None z38z39z310z311z312z313z314˚
	makeSuiteunittest.loader.makeSuite"4
unittest.suite.TestSuite"unittest.suite.TestSuite*k
testCaseClassX
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase"type**
prefix
builtins.str"builtins.str *¥
	sortUsing¢
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"%unittest.loader._SortComparisonMethod *´

suiteClassò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"unittest.loader._SuiteClass z38z39z310z311z312z313z314»
findTestCasesunittest.loader.findTestCases"4
unittest.suite.TestSuite"unittest.suite.TestSuite*0
module$
types.ModuleType"types.ModuleType**
prefix
builtins.str"builtins.str *¥
	sortUsing¢
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"%unittest.loader._SortComparisonMethod *´

suiteClassò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"unittest.loader._SuiteClass z38z39z310z311z312z313z314*¨
__annotations__unittest.loader.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313*314*7
unittestunittest *38*39*310*311*312*313*314*ù
VALID_MODULE_NAME!unittest.loader.VALID_MODULE_NAMED
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*38*39*310*311*312*313*314*ë
defaultTestLoader!unittest.loader.defaultTestLoader8
unittest.loader.TestLoader"unittest.loader.TestLoader*38*39*310*311*312*313*314