
pandas.core.indexes.multi∞¶

MultiIndex$pandas.core.indexes.multi.MultiIndex"pandas.core.indexes.base.Index*œ
__new__,pandas.core.indexes.multi.MultiIndex.__new__"°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*Á
cls›
/Type[pandas.core.indexes.multi.MultiIndex.Self]°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"type*
levels
Any *
codes
Any *
	sortorder
Any *
names
Any *
dtype
Any *
copy
Any *
name
Any *6
verify_integrity
builtins.bool"builtins.bool *3
_set_identity
builtins.bool"builtins.bool *•
__init__-pandas.core.indexes.multi.MultiIndex.__init__"
None*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*
levels
Any *
codes
Any *
	sortorder
Any *
names
Any *
dtype
Any *
copy
Any *
name
Any *6
verify_integrity
builtins.bool"builtins.bool *3
_set_identity
builtins.bool"builtins.bool *¨
from_arrays0pandas.core.indexes.multi.MultiIndex.from_arrays"°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*Á
cls›
/Type[pandas.core.indexes.multi.MultiIndex.Self]°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"type*
arrays
Any*
	sortorder
Any *
names
Any 0:builtins.classmethodp*¨
from_tuples0pandas.core.indexes.multi.MultiIndex.from_tuples"°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*Á
cls›
/Type[pandas.core.indexes.multi.MultiIndex.Self]°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"type*
tuples
Any*
	sortorder
Any *
names
Any 0:builtins.classmethodp*±
from_product1pandas.core.indexes.multi.MultiIndex.from_product"°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*Á
cls›
/Type[pandas.core.indexes.multi.MultiIndex.Self]°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"type*
	iterables
Any*
	sortorder
Any *
names
Any 0:builtins.classmethodp*¶

from_frame/pandas.core.indexes.multi.MultiIndex.from_frame"°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*Á
cls›
/Type[pandas.core.indexes.multi.MultiIndex.Self]°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"type*
df
Any*
	sortorder
Any *
names
Any 0:builtins.classmethodp*T
shape*pandas.core.indexes.multi.MultiIndex.shape*
self0:builtins.property`*∫
levels+pandas.core.indexes.multi.MultiIndex.levels"ì
2builtins.list[pandas.core.indexes.base.Index[Any]]N
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index"builtins.list*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex0:builtins.property`*Å

set_levels/pandas.core.indexes.multi.MultiIndex.set_levels"
Any*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*
levels
Any*
level
Any *6
verify_integrity
builtins.bool"builtins.bool *T
codes*pandas.core.indexes.multi.MultiIndex.codes*
self0:builtins.property`*˛
	set_codes.pandas.core.indexes.multi.MultiIndex.set_codes"
Any*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*
codes
Any*
level
Any *6
verify_integrity
builtins.bool"builtins.bool *∆
copy)pandas.core.indexes.multi.MultiIndex.copy"°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*¨
self°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*
names
Any **
deep
builtins.bool"builtins.bool *‰
	__array__.pandas.core.indexes.multi.MultiIndex.__array__"9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*
dtype
Any *F
view)pandas.core.indexes.multi.MultiIndex.view*
self*	
cls *º
__contains__1pandas.core.indexes.multi.MultiIndex.__contains__"
builtins.bool"builtins.bool*NL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*	
Any*Ã
dtype*pandas.core.indexes.multi.MultiIndex.dtype"(
numpy.dtype[Any]
Any"numpy.dtype*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex0:builtins.property`*«
dtypes+pandas.core.indexes.multi.MultiIndex.dtypes"†
·pandas.core.series.Series[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype"pandas.core.series.Series*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex0:builtins.property`*„
memory_usage1pandas.core.indexes.multi.MultiIndex.memory_usage"
builtins.int"builtins.int*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex**
deep
builtins.bool"builtins.bool *¬
nbytes+pandas.core.indexes.multi.MultiIndex.nbytes"
builtins.int"builtins.int*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex0:builtins.property`*ﬁ
format+pandas.core.indexes.multi.MultiIndex.format",
builtins.list[Any]
Any"builtins.list*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*S
nameG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *ò
	formatterÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *R
na_repD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
names
builtins.bool"builtins.bool *)
space
builtins.int"builtins.int *W
sparsifyG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *,
adjoin
builtins.bool"builtins.bool *•
__len__,pandas.core.indexes.multi.MultiIndex.__len__"
builtins.int"builtins.int*NL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*π
inferred_type2pandas.core.indexes.multi.MultiIndex.inferred_type"
builtins.str"builtins.str*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*V
values+pandas.core.indexes.multi.MultiIndex.values*
self0:builtins.property`*Ê
is_monotonic_increasing<pandas.core.indexes.multi.MultiIndex.is_monotonic_increasing"
builtins.bool"builtins.bool*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex0:builtins.property`*Ê
is_monotonic_decreasing<pandas.core.indexes.multi.MultiIndex.is_monotonic_decreasing"
builtins.bool"builtins.bool*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex0:builtins.property`*©

duplicated/pandas.core.indexes.multi.MultiIndex.duplicated"
Any*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*à
keep˚
IUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.bool]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str:
Literal[builtins.bool]	
builtins.bool"builtins.bool *∆
fillna+pandas.core.indexes.multi.MultiIndex.fillna"
None*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*
value
Any *
downcast
Any *ø
dropna+pandas.core.indexes.multi.MultiIndex.dropna"°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*¨
self°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*¥
how®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *Z
	get_value.pandas.core.indexes.multi.MultiIndex.get_value*
self*

series*
key*ﬁ
get_level_values5pandas.core.indexes.multi.MultiIndex.get_level_values"N
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*k
level`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int*L
unique+pandas.core.indexes.multi.MultiIndex.unique*
self*
level *Õ
to_frame-pandas.core.indexes.multi.MultiIndex.to_frame":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*+
index
builtins.bool"builtins.bool *ò
nameã
'builtins.list[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list *6
allow_duplicates
builtins.bool"builtins.bool *M
to_flat_index2pandas.core.indexes.multi.MultiIndex.to_flat_index*
self*–
is_all_dates1pandas.core.indexes.multi.MultiIndex.is_all_dates"
builtins.bool"builtins.bool*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex0:builtins.property`*[
remove_unused_levels9pandas.core.indexes.multi.MultiIndex.remove_unused_levels*
self*ƒ
nlevels,pandas.core.indexes.multi.MultiIndex.nlevels"
builtins.int"builtins.int*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex0:builtins.property`*Z
levshape-pandas.core.indexes.multi.MultiIndex.levshape*
self0:builtins.property`*G

__reduce__/pandas.core.indexes.multi.MultiIndex.__reduce__*
self*¥
take)pandas.core.indexes.multi.MultiIndex.take"
Any*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*
indices
Any*(
axis
builtins.int"builtins.int *0

allow_fill
builtins.bool"builtins.bool *

fill_value
Any *
kwargs
Any*J
append+pandas.core.indexes.multi.MultiIndex.append*
self*	
other*W
argsort,pandas.core.indexes.multi.MultiIndex.argsort*
self*
args*

kwargs*X
repeat+pandas.core.indexes.multi.MultiIndex.repeat*
self*
repeats*

axis *æ
where*pandas.core.indexes.multi.MultiIndex.where"
None*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*
cond
Any*
other
Any *⁄
drop)pandas.core.indexes.multi.MultiIndex.drop"°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*¨
self°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*
codes
Any*
level
Any **
errors
builtins.str"builtins.str *Í
	swaplevel.pandas.core.indexes.multi.MultiIndex.swaplevel"
Any*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*%
i
builtins.int"builtins.int *%
j
builtins.int"builtins.int *Z
reorder_levels3pandas.core.indexes.multi.MultiIndex.reorder_levels*
self*	
order*Æ
	sortlevel.pandas.core.indexes.multi.MultiIndex.sortlevel"
Any*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*)
level
builtins.int"builtins.int */
	ascending
builtins.bool"builtins.bool *4
sort_remaining
builtins.bool"builtins.bool *Å
get_indexer0pandas.core.indexes.multi.MultiIndex.get_indexer*
self*

target*
method *
limit *
	tolerance *k
get_indexer_non_unique;pandas.core.indexes.multi.MultiIndex.get_indexer_non_unique*
self*

target*Ü
reindex,pandas.core.indexes.multi.MultiIndex.reindex*
self*

target*
method *
level *
limit *
	tolerance *¨
get_slice_bound4pandas.core.indexes.multi.MultiIndex.get_slice_bound"
builtins.int"builtins.int*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*ƒ
label∏
7Union[typing.Hashable,typing.Sequence[typing.Hashable]]"
typing.Hashable"typing.HashableW
 typing.Sequence[typing.Hashable]"
typing.Hashable"typing.Hashable"typing.Sequence*&
side
builtins.str"builtins.str*k

slice_locs/pandas.core.indexes.multi.MultiIndex.slice_locs*
self*
start *	
end *

step *J
get_loc,pandas.core.indexes.multi.MultiIndex.get_loc*
self*
key*˛
get_loc_level2pandas.core.indexes.multi.MultiIndex.get_loc_level"
Any*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*
key
Any*
level
Any *0

drop_level
builtins.bool"builtins.bool *L
get_locs-pandas.core.indexes.multi.MultiIndex.get_locs*
self*
seq*^
truncate-pandas.core.indexes.multi.MultiIndex.truncate*
self*
before *
after *¡
equals+pandas.core.indexes.multi.MultiIndex.equals"
builtins.bool"builtins.bool*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*
other
Any*V
equal_levels1pandas.core.indexes.multi.MultiIndex.equal_levels*
self*	
other*T
union*pandas.core.indexes.multi.MultiIndex.union*
self*	
other*

sort *‚
intersection1pandas.core.indexes.multi.MultiIndex.intersection"
Any*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*
other
Any**
sort
builtins.bool"builtins.bool *^

difference/pandas.core.indexes.multi.MultiIndex.difference*
self*	
other*

sort *°
astype+pandas.core.indexes.multi.MultiIndex.astype"°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*¨
self°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*Í
dtypeﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArg**
copy
builtins.bool"builtins.bool *R
insert+pandas.core.indexes.multi.MultiIndex.insert*
self*
loc*
item*H
delete+pandas.core.indexes.multi.MultiIndex.delete*
self*
loc*ø
isin)pandas.core.indexes.multi.MultiIndex.isin"à
^TypeAlias[TypeAlias[numpy.ndarray[Any,numpy.dtype[numpy._typing._array_like._ScalarType_co]]]]É
STypeAlias[numpy.ndarray[Any,numpy.dtype[numpy._typing._array_like._ScalarType_co]]]Ü
Hnumpy.ndarray[Any,numpy.dtype[numpy._typing._array_like._ScalarType_co]]
Any°
5numpy.dtype[numpy._typing._array_like._ScalarType_co][
(numpy._typing._array_like._ScalarType_co
numpy.generic"numpy.generic"numpy.generic"numpy.dtype"numpy.ndarray"!numpy._typing._array_like.NDArray"pandas._typing.np_ndarray_bool*V
selfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*
values
Any*
level
Any 2∑
__getitem__0pandas.core.indexes.multi.MultiIndex.__getitem__˛
__getitem__0pandas.core.indexes.multi.MultiIndex.__getitem__"°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*§°
)pandas.core.indexes.multi.MultiIndex.SelfL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*‹	Ÿ	
ëUnion[builtins.slice,TypeAlias[TypeAlias[numpy.ndarray[Any,numpy.dtype[numpy._typing._array_like._ScalarType_co]]]],typing.Sequence[builtins.int],pandas.core.indexes.base.Index[Any],pandas.core.series.Series[builtins.bool],typing.Sequence[builtins.bool],TypeAlias[Unknown]] 
builtins.slice"builtins.sliceä
^TypeAlias[TypeAlias[numpy.ndarray[Any,numpy.dtype[numpy._typing._array_like._ScalarType_co]]]]É
STypeAlias[numpy.ndarray[Any,numpy.dtype[numpy._typing._array_like._ScalarType_co]]]Ü
Hnumpy.ndarray[Any,numpy.dtype[numpy._typing._array_like._ScalarType_co]]
Any°
5numpy.dtype[numpy._typing._array_like._ScalarType_co][
(numpy._typing._array_like._ScalarType_co
numpy.generic"numpy.generic"numpy.generic"numpy.dtype"numpy.ndarray"!numpy._typing._array_like.NDArray" pandas._typing.np_ndarray_anyintN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Indexe
(pandas.core.series.Series[builtins.bool]
builtins.bool"builtins.bool"pandas.core.series.SeriesQ
typing.Sequence[builtins.bool]
builtins.bool"builtins.bool"typing.Sequence8
TypeAlias[Unknown] "pandas._typing.np_ndarray_bool0:typing.overloadXÙ
__getitem__0pandas.core.indexes.multi.MultiIndex.__getitem__".
builtins.tuple[Any]
Any"builtins.tuple*NL
$pandas.core.indexes.multi.MultiIndex"$pandas.core.indexes.multi.MultiIndex*
builtins.int"builtins.int0:typing.overloadXR
maybe_droplevels*pandas.core.indexes.multi.maybe_droplevels*	
index*
key*ï
__annotations__)pandas.core.indexes.multi.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
npnumpy *
pdpandas 