
sklearn.cluster._agglomerative∞
Integralnumbers.Integral"numbers.Rational*Å
__int__numbers.Integral.__int__"
builtins.int"builtins.int*&$
numbers.Integral"numbers.Integral0:abc.abstractmethod@*u
	__index__numbers.Integral.__index__"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral*£
__pow__numbers.Integral.__pow__"
Any*&$
numbers.Integral"numbers.Integral*	
Any**&
Union[Any,None]
Any
None 0:abc.abstractmethod@*}

__lshift__numbers.Integral.__lshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*
__rlshift__numbers.Integral.__rlshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*}

__rshift__numbers.Integral.__rshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*
__rrshift__numbers.Integral.__rrshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*w
__and__numbers.Integral.__and__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*y
__rand__numbers.Integral.__rand__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*w
__xor__numbers.Integral.__xor__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*y
__rxor__numbers.Integral.__rxor__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*u
__or__numbers.Integral.__or__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*w
__ror__numbers.Integral.__ror__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*r

__invert__numbers.Integral.__invert__"
Any*&$
numbers.Integral"numbers.Integral0:abc.abstractmethod@*q
	__float__numbers.Integral.__float__" 
builtins.float"builtins.float*&$
numbers.Integral"numbers.Integral*å
	numeratornumbers.Integral.numerator"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral0:builtins.property`*ê
denominatornumbers.Integral.denominator"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral0:builtins.property`ò
Realnumbers.Real"numbers.Complex"typing.SupportsFloat*}
	__float__numbers.Real.__float__" 
builtins.float"builtins.float*
numbers.Real"numbers.Real0:abc.abstractmethod@*Å
	__trunc__numbers.Real.__trunc__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real0:abc.abstractmethod@*Å
	__floor__numbers.Real.__floor__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real0:abc.abstractmethod@*
__ceil__numbers.Real.__ceil__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real0:abc.abstractmethod@*Y

__divmod__numbers.Real.__divmod__"
Any*
numbers.Real"numbers.Real*	
Any*l
__rdivmod__numbers.Real.__rdivmod__"
Any*&
self
numbers.Real"numbers.Real*
other
Any*ä
__floordiv__numbers.Real.__floordiv__"
builtins.int"builtins.int*
numbers.Real"numbers.Real*	
Any0:abc.abstractmethod@*å
__rfloordiv__numbers.Real.__rfloordiv__"
builtins.int"builtins.int*
numbers.Real"numbers.Real*	
Any0:abc.abstractmethod@*k
__mod__numbers.Real.__mod__"
Any*
numbers.Real"numbers.Real*	
Any0:abc.abstractmethod@*m
__rmod__numbers.Real.__rmod__"
Any*
numbers.Real"numbers.Real*	
Any0:abc.abstractmethod@*Ä
__lt__numbers.Real.__lt__"
builtins.bool"builtins.bool*
numbers.Real"numbers.Real*	
Any0:abc.abstractmethod@*Ä
__le__numbers.Real.__le__"
builtins.bool"builtins.bool*
numbers.Real"numbers.Real*	
Any0:abc.abstractmethod@*m
__complex__numbers.Real.__complex__"$
builtins.complex"builtins.complex*
numbers.Real"numbers.Real*a
realnumbers.Real.real"
Any*&
self
numbers.Real"numbers.Real0:builtins.property`*a
imagnumbers.Real.imag"
Any*&
self
numbers.Real"numbers.Real0:builtins.property`*T
	conjugatenumbers.Real.conjugate"
Any*&
self
numbers.Real"numbers.Real2Ä
	__round__numbers.Real.__round__≠
	__round__numbers.Real.__round__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real*
ndigits
None 0:abc.abstractmethod:typing.overload@X™
	__round__numbers.Real.__round__"
Any*&
self
numbers.Real"numbers.Real*)
ndigits
builtins.int"builtins.int0:abc.abstractmethod:typing.overload@XÍ
DistanceMetric,sklearn.metrics._dist_metrics.DistanceMetric"builtins.object*≥
__init__5sklearn.metrics._dist_metrics.DistanceMetric.__init__"
None*f
self\
,sklearn.metrics._dist_metrics.DistanceMetric",sklearn.metrics._dist_metrics.DistanceMetric*£

get_metric7sklearn.metrics._dist_metrics.DistanceMetric.get_metric"\
,sklearn.metrics._dist_metrics.DistanceMetric",sklearn.metrics._dist_metrics.DistanceMetric*§
clsö
2Type[sklearn.metrics._dist_metrics.DistanceMetric]\
,sklearn.metrics._dist_metrics.DistanceMetric",sklearn.metrics._dist_metrics.DistanceMetric"type*(
metric
builtins.str"builtins.str*
kwargs
Any0:builtins.classmethodp*]
dist1sklearn.metrics._dist_metrics.DistanceMetric.dist*
self*
x1*
x2*
size*_
rdist2sklearn.metrics._dist_metrics.DistanceMetric.rdist*
self*
x1*
x2*
size*·
pdist2sklearn.metrics._dist_metrics.DistanceMetric.pdist"
builtins.int"builtins.int*f
self\
,sklearn.metrics._dist_metrics.DistanceMetric",sklearn.metrics._dist_metrics.DistanceMetric*
X
Any*
D
Any*Ò
cdist2sklearn.metrics._dist_metrics.DistanceMetric.cdist"
builtins.int"builtins.int*f
self\
,sklearn.metrics._dist_metrics.DistanceMetric",sklearn.metrics._dist_metrics.DistanceMetric*
X
Any*
Y
Any*
D
Any*√
dist_csr5sklearn.metrics._dist_metrics.DistanceMetric.dist_csr*
self*
x1_data*

x1_indices*
x2_data*

x2_indices*
x1_start*

x1_end*
x2_start*

x2_end*
size*≈
	rdist_csr6sklearn.metrics._dist_metrics.DistanceMetric.rdist_csr*
self*
x1_data*

x1_indices*
x2_data*

x2_indices*
x1_start*

x1_end*
x2_start*

x2_end*
size*≥
	pdist_csr6sklearn.metrics._dist_metrics.DistanceMetric.pdist_csr"
builtins.int"builtins.int*f
self\
,sklearn.metrics._dist_metrics.DistanceMetric",sklearn.metrics._dist_metrics.DistanceMetric*
x1_data
Any*

x1_indices
Any*
	x1_indptr
Any*
size
Any*
D
Any*˙
	cdist_csr6sklearn.metrics._dist_metrics.DistanceMetric.cdist_csr"
builtins.int"builtins.int*f
self\
,sklearn.metrics._dist_metrics.DistanceMetric",sklearn.metrics._dist_metrics.DistanceMetric*
x1_data
Any*

x1_indices
Any*
	x1_indptr
Any*
x2_data
Any*

x2_indices
Any*
	x2_indptr
Any*
size
Any*
D
Any*Ç
rdist_to_dist:sklearn.metrics._dist_metrics.DistanceMetric.rdist_to_dist" 
builtins.float"builtins.float*f
self\
,sklearn.metrics._dist_metrics.DistanceMetric",sklearn.metrics._dist_metrics.DistanceMetric*+
rdist 
builtins.float"builtins.float*Å
dist_to_rdist:sklearn.metrics._dist_metrics.DistanceMetric.dist_to_rdist" 
builtins.float"builtins.float*f
self\
,sklearn.metrics._dist_metrics.DistanceMetric",sklearn.metrics._dist_metrics.DistanceMetric**
dist 
builtins.float"builtins.float*⁄
pairwise5sklearn.metrics._dist_metrics.DistanceMetric.pairwise"9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*f
self\
,sklearn.metrics._dist_metrics.DistanceMetric",sklearn.metrics._dist_metrics.DistanceMetric*p
Xi
!Union[numpy.ndarray[Any,Any],Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray
Any*Å
Yx
&Union[numpy.ndarray[Any,Any],Any,None]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray
Any
None ª
IntFloatDict%sklearn.utils._fast_dict.IntFloatDict"builtins.objectrs
cpp_map-sklearn.utils._fast_dict.IntFloatDict.cpp_map9
builtins.dict[Any,Any]
Any
Any"builtins.dict—

HasMethods*sklearn.utils._param_validation.HasMethods"+sklearn.utils._param_validation._Constraint*…
__init__3sklearn.utils._param_validation.HasMethods.__init__"
None*b
selfX
*sklearn.utils._param_validation.HasMethods"*sklearn.utils._param_validation.HasMethods*ô
methodsã
MUnion[builtins.list[builtins.str],builtins.str,typing.Sequence[builtins.str]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*„
is_satisfied_by:sklearn.utils._param_validation.HasMethods.is_satisfied_by"
builtins.bool"builtins.bool*b
selfX
*sklearn.utils._param_validation.HasMethods"*sklearn.utils._param_validation.HasMethods*
val
Any*∑
__str__2sklearn.utils._param_validation.HasMethods.__str__"
builtins.str"builtins.str*ZX
*sklearn.utils._param_validation.HasMethods"*sklearn.utils._param_validation.HasMethods∂
Hidden&sklearn.utils._param_validation.Hidden"builtins.object*Ú
__init__/sklearn.utils._param_validation.Hidden.__init__"
None*Z
selfP
&sklearn.utils._param_validation.Hidden"&sklearn.utils._param_validation.Hidden*Œ

constraintΩ
?Union[sklearn.utils._param_validation._Constraint,builtins.str]Z
+sklearn.utils._param_validation._Constraint"+sklearn.utils._param_validation._Constraint
builtins.str"builtins.str
Interval(sklearn.utils._param_validation.Interval"+sklearn.utils._param_validation._Constraint*©
__init__1sklearn.utils._param_validation.Interval.__init__"
None*^
selfT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.Interval*•
typeö
NUnion[numbers.Real,Type[numbers.Integral],Type[numbers.Real],numbers.Integral]
numbers.Real"numbers.RealF
Type[numbers.Integral]$
numbers.Integral"numbers.Integral"type:
Type[numbers.Real]
numbers.Real"numbers.Real"type$
numbers.Integral"numbers.Integral*
leftu
'Union[builtins.float,None,builtins.int] 
builtins.float"builtins.float
None
builtins.int"builtins.int*Ä
rightu
'Union[builtins.float,None,builtins.int] 
builtins.float"builtins.float
None
builtins.int"builtins.int*”
closed∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*Ã

__contains__5sklearn.utils._param_validation.Interval.__contains__"
builtins.bool"builtins.bool*VT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.Interval*å	â	
≈Union[builtins.bool,TypeAlias[Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]]]]
builtins.bool"builtins.boolú
∞TypeAlias[Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]]]Õ
•Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]] 
builtins.float"builtins.float®
/TypeAlias[numpy.floating[numpy._typing._16Bit]]d
$numpy.floating[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.floating"numpy.float16®
/TypeAlias[numpy.floating[numpy._typing._32Bit]]d
$numpy.floating[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.floating"numpy.float32®
/TypeAlias[numpy.floating[numpy._typing._64Bit]]d
$numpy.floating[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.floating"numpy.float64"sklearn._typing.Float*›
is_satisfied_by8sklearn.utils._param_validation.Interval.is_satisfied_by"
builtins.bool"builtins.bool*^
selfT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.Interval*
val
Any*±
__str__0sklearn.utils._param_validation.Interval.__str__"
builtins.str"builtins.str*VT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.Interval˚

StrOptions*sklearn.utils._param_validation.StrOptions"'sklearn.utils._param_validation.Options*ó
__init__3sklearn.utils._param_validation.StrOptions.__init__"
None*b
selfX
*sklearn.utils._param_validation.StrOptions"*sklearn.utils._param_validation.StrOptions*U
optionsH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.set*ê

deprecated~
&Union[builtins.set[builtins.str],None]H
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.set
None ˜d
AgglomerativeClustering6sklearn.cluster._agglomerative.AgglomerativeClustering"sklearn.base.ClusterMixin"sklearn.base.BaseEstimator*Ñ+
__init__?sklearn.cluster._agglomerative.AgglomerativeClustering.__init__"
None*z
selfp
6sklearn.cluster._agglomerative.AgglomerativeClustering"6sklearn.cluster._agglomerative.AgglomerativeClustering*V

n_clustersD
Union[None,builtins.int]
None
builtins.int"builtins.int *≥
affinity¢
3Union[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *¿
metric±
8Union[None,builtins.str,CallableType[builtins.function]]
None
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *_
memoryQ
Union[None,Any,builtins.str]
None
Any
builtins.str"builtins.str *¢
connectivityç
ÉUnion[None,TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]],CallableType[builtins.function]]
None´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLikeK
CallableType[builtins.function]&
builtins.function"builtins.function *
compute_full_tree÷
@Union[Literal[builtins.str],Literal[builtins.str],builtins.bool]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
builtins.bool"builtins.bool *•
linkageï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *Ö	
distance_thresholdÍ
ºUnion[None,TypeAlias[Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]]]]
Noneú
∞TypeAlias[Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]]]Õ
•Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]] 
builtins.float"builtins.float®
/TypeAlias[numpy.floating[numpy._typing._16Bit]]d
$numpy.floating[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.floating"numpy.float16®
/TypeAlias[numpy.floating[numpy._typing._32Bit]]d
$numpy.floating[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.floating"numpy.float32®
/TypeAlias[numpy.floating[numpy._typing._64Bit]]d
$numpy.floating[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.floating"numpy.float64"sklearn._typing.Float *7
compute_distances
builtins.bool"builtins.bool *Ì
fit:sklearn.cluster._agglomerative.AgglomerativeClustering.fit"È
;sklearn.cluster._agglomerative.AgglomerativeClustering_Selfp
6sklearn.cluster._agglomerative.AgglomerativeClustering"6sklearn.cluster._agglomerative.AgglomerativeClustering"6sklearn.cluster._agglomerative.AgglomerativeClustering*Ù
selfÈ
;sklearn.cluster._agglomerative.AgglomerativeClustering_Selfp
6sklearn.cluster._agglomerative.AgglomerativeClustering"6sklearn.cluster._agglomerative.AgglomerativeClustering"6sklearn.cluster._agglomerative.AgglomerativeClustering*¥
X¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike*
y
Any *—
fit_predictBsklearn.cluster._agglomerative.AgglomerativeClustering.fit_predict"9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*z
selfp
6sklearn.cluster._agglomerative.AgglomerativeClustering"6sklearn.cluster._agglomerative.AgglomerativeClustering*¥
X¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike*
y
Any r˝

distances_Asklearn.cluster._agglomerative.AgglomerativeClustering.distances_´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLiker˚
	children_@sklearn.cluster._agglomerative.AgglomerativeClustering.children_´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLikerò
feature_names_in_Hsklearn.cluster._agglomerative.AgglomerativeClustering.feature_names_in_9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayru
n_features_in_Esklearn.cluster._agglomerative.AgglomerativeClustering.n_features_in_
builtins.int"builtins.intrá
n_connected_components_Nsklearn.cluster._agglomerative.AgglomerativeClustering.n_connected_components_
builtins.int"builtins.intrk
	n_leaves_@sklearn.cluster._agglomerative.AgglomerativeClustering.n_leaves_
builtins.int"builtins.intrÑ
labels_>sklearn.cluster._agglomerative.AgglomerativeClustering.labels_9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayro
n_clusters_Bsklearn.cluster._agglomerative.AgglomerativeClustering.n_clusters_
builtins.int"builtins.intr¢
_parameter_constraintsMsklearn.cluster._agglomerative.AgglomerativeClustering._parameter_constraints9
builtins.dict[Any,Any]
Any
Any"builtins.dict˙s
FeatureAgglomeration3sklearn.cluster._agglomerative.FeatureAgglomeration",sklearn.base.ClassNamePrefixFeaturesOutMixin"6sklearn.cluster._agglomerative.AgglomerativeClustering"=sklearn.cluster._feature_agglomeration.AgglomerationTransform*‹+
__init__<sklearn.cluster._agglomerative.FeatureAgglomeration.__init__"
None*t
selfj
3sklearn.cluster._agglomerative.FeatureAgglomeration"3sklearn.cluster._agglomerative.FeatureAgglomeration*V

n_clustersD
Union[None,builtins.int]
None
builtins.int"builtins.int *≥
affinity¢
3Union[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *¿
metric±
8Union[None,builtins.str,CallableType[builtins.function]]
None
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *_
memoryQ
Union[None,Any,builtins.str]
None
Any
builtins.str"builtins.str *¢
connectivityç
ÉUnion[None,TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]],CallableType[builtins.function]]
None´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLikeK
CallableType[builtins.function]&
builtins.function"builtins.function *
compute_full_tree÷
@Union[Literal[builtins.str],Literal[builtins.str],builtins.bool]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
builtins.bool"builtins.bool *•
linkageï
tUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *_
pooling_funcK
CallableType[builtins.function]&
builtins.function"builtins.function *Ö	
distance_thresholdÍ
ºUnion[None,TypeAlias[Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]]]]
Noneú
∞TypeAlias[Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]]]Õ
•Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]] 
builtins.float"builtins.float®
/TypeAlias[numpy.floating[numpy._typing._16Bit]]d
$numpy.floating[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.floating"numpy.float16®
/TypeAlias[numpy.floating[numpy._typing._32Bit]]d
$numpy.floating[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.floating"numpy.float32®
/TypeAlias[numpy.floating[numpy._typing._64Bit]]d
$numpy.floating[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.floating"numpy.float64"sklearn._typing.Float *7
compute_distances
builtins.bool"builtins.bool *“
fit7sklearn.cluster._agglomerative.FeatureAgglomeration.fit"›
8sklearn.cluster._agglomerative.FeatureAgglomeration_Selfj
3sklearn.cluster._agglomerative.FeatureAgglomeration"3sklearn.cluster._agglomerative.FeatureAgglomeration"3sklearn.cluster._agglomerative.FeatureAgglomeration*Ë
self›
8sklearn.cluster._agglomerative.FeatureAgglomeration_Selfj
3sklearn.cluster._agglomerative.FeatureAgglomeration"3sklearn.cluster._agglomerative.FeatureAgglomeration"3sklearn.cluster._agglomerative.FeatureAgglomeration*¥
X¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike*
y
Any *X
fit_predict?sklearn.cluster._agglomerative.FeatureAgglomeration.fit_predict*
selfr˙

distances_>sklearn.cluster._agglomerative.FeatureAgglomeration.distances_´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLiker¯
	children_=sklearn.cluster._agglomerative.FeatureAgglomeration.children_´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLikerï
feature_names_in_Esklearn.cluster._agglomerative.FeatureAgglomeration.feature_names_in_9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayrr
n_features_in_Bsklearn.cluster._agglomerative.FeatureAgglomeration.n_features_in_
builtins.int"builtins.intrÑ
n_connected_components_Ksklearn.cluster._agglomerative.FeatureAgglomeration.n_connected_components_
builtins.int"builtins.intrh
	n_leaves_=sklearn.cluster._agglomerative.FeatureAgglomeration.n_leaves_
builtins.int"builtins.intrÙ
labels_;sklearn.cluster._agglomerative.FeatureAgglomeration.labels_´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLikerl
n_clusters_?sklearn.cluster._agglomerative.FeatureAgglomeration.n_clusters_
builtins.int"builtins.intrü
_parameter_constraintsJsklearn.cluster._agglomerative.FeatureAgglomeration._parameter_constraints9
builtins.dict[Any,Any]
Any
Any"builtins.dictS
heapify_heapq.heapify"
None*.,
builtins.list[Any]
Any"builtins.listŒ
heappop_heapq.heappop"B
	_heapq._T"
builtins.object"builtins.object"builtins.object*om
builtins.list[_heapq._T]B
	_heapq._T"
builtins.object"builtins.object"builtins.object"builtins.list‹
heappush_heapq.heappush"
None*om
builtins.list[_heapq._T]B
	_heapq._T"
builtins.object"builtins.object"builtins.object"builtins.list*DB
	_heapq._T"
builtins.object"builtins.object"builtins.objectú
heappushpop_heapq.heappushpop"B
	_heapq._T"
builtins.object"builtins.object"builtins.object*om
builtins.list[_heapq._T]B
	_heapq._T"
builtins.object"builtins.object"builtins.object"builtins.list*DB
	_heapq._T"
builtins.object"builtins.object"builtins.object´'
paired_distances)sklearn.metrics.pairwise.paired_distances"9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*≥
X´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLike*≥
Y´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLike*±
metric¢
3Union[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *
kwds
Anyô!
check_array$sklearn.utils.validation.check_array"
Any*
array
Any*“
accept_sparseº
|Union[typing.Sequence[builtins.str],Tuple[builtins.str,builtins.str],builtins.list[builtins.str],builtins.str,builtins.bool]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
builtins.str"builtins.str
builtins.bool"builtins.bool *9
accept_large_sparse
builtins.bool"builtins.bool *Â
dtype◊
dUnion[None,typing.Sequence[builtins.type],Literal[builtins.str],Literal[builtins.str],builtins.type]
NoneQ
typing.Sequence[builtins.type]
builtins.type"builtins.type"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
builtins.type"builtins.type *≈
order∑
7Union[Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None **
copy
builtins.bool"builtins.bool *{
force_all_finitec
!Union[builtins.str,builtins.bool]
builtins.str"builtins.str
builtins.bool"builtins.bool */
	ensure_2d
builtins.bool"builtins.bool *.
allow_nd
builtins.bool"builtins.bool *ç

ensure_min_samplesÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *é

ensure_min_featuresÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *´
	estimatorô
3Union[None,builtins.str,sklearn.base.BaseEstimator]
None
builtins.str"builtins.str8
sklearn.base.BaseEstimator"sklearn.base.BaseEstimator *.

input_name
builtins.str"builtins.str ù
check_memory%sklearn.utils.validation.check_memory"
Any*]
memoryQ
Union[None,Any,builtins.str]
None
Any
builtins.str"builtins.str˙
	ward_tree(sklearn.cluster._agglomerative.ward_tree"î
qTuple[numpy.ndarray[Any,Any],builtins.int,builtins.int,Union[numpy.ndarray[Any,Any],None],numpy.ndarray[Any,Any]]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray
builtins.int"builtins.int
builtins.int"builtins.intk
"Union[numpy.ndarray[Any,Any],None]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray
None9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*¥
X¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike*¶
connectivityë
TUnion[None,TypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]]
None¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike *î

n_clustersÅ
˝Union[None,TypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]]
NoneÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *5
return_distance
builtins.bool"builtins.bool è
linkage_tree+sklearn.cluster._agglomerative.linkage_tree"î
qTuple[numpy.ndarray[Any,Any],builtins.int,builtins.int,Union[numpy.ndarray[Any,Any],None],numpy.ndarray[Any,Any]]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray
builtins.int"builtins.int
builtins.int"builtins.intk
"Union[numpy.ndarray[Any,Any],None]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray
None9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*¥
X¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike*¶
connectivityë
TUnion[None,TypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]]
None¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike *î

n_clustersÅ
˝Union[None,TypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]]
NoneÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *÷
linkage∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *≥
affinity¢
3Union[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *5
return_distance
builtins.bool"builtins.bool *ö
__annotations__.sklearn.cluster._agglomerative.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*8
Memory%sklearn.cluster._agglomerative.Memory
Any*8
sparse%sklearn.cluster._agglomerative.sparse
Any*>
	hierarchy(sklearn.cluster._agglomerative.hierarchy
Any*T
connected_components3sklearn.cluster._agglomerative.connected_components
Any*ó
METRIC_MAPPING,sklearn.metrics._dist_metrics.METRIC_MAPPINGW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*
npnumpy *g
_TREE_BUILDERS-sklearn.cluster._agglomerative._TREE_BUILDERS&
builtins.ellipsis"builtins.ellipsis