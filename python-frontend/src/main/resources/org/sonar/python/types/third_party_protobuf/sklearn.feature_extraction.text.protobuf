
sklearn.feature_extraction.text´3
defaultdictcollections.defaultdict"builtins.dict*Ω
__missing__#collections.defaultdict.__missing__"H
collections._VT"
builtins.object"builtins.object"builtins.object*Ú
selfÁ
8collections.defaultdict[collections._KT,collections._VT]H
collections._KT"
builtins.object"builtins.object"builtins.objectH
collections._VT"
builtins.object"builtins.object"builtins.object"collections.defaultdict*JH
collections._KT"
builtins.object"builtins.object"builtins.object*É
__copy__ collections.defaultdict.__copy__"£
collections.defaultdict.SelfÁ
8collections.defaultdict[collections._KT,collections._VT]H
collections._KT"
builtins.object"builtins.object"builtins.objectH
collections._VT"
builtins.object"builtins.object"builtins.object"collections.defaultdict"collections.defaultdict*Æ
self£
collections.defaultdict.SelfÁ
8collections.defaultdict[collections._KT,collections._VT]H
collections._KT"
builtins.object"builtins.object"builtins.objectH
collections._VT"
builtins.object"builtins.object"builtins.object"collections.defaultdict"collections.defaultdict*˚
copycollections.defaultdict.copy"£
collections.defaultdict.SelfÁ
8collections.defaultdict[collections._KT,collections._VT]H
collections._KT"
builtins.object"builtins.object"builtins.objectH
collections._VT"
builtins.object"builtins.object"builtins.object"collections.defaultdict"collections.defaultdict*Æ
self£
collections.defaultdict.SelfÁ
8collections.defaultdict[collections._KT,collections._VT]H
collections._KT"
builtins.object"builtins.object"builtins.objectH
collections._VT"
builtins.object"builtins.object"builtins.object"collections.defaultdict"collections.defaultdict2Á#
__init__ collections.defaultdict.__init__¿
__init__ collections.defaultdict.__init__"
None*Ú
selfÁ
8collections.defaultdict[collections._KT,collections._VT]H
collections._KT"
builtins.object"builtins.object"builtins.objectH
collections._VT"
builtins.object"builtins.object"builtins.object"collections.defaultdict0:typing.overloadXÁ
__init__ collections.defaultdict.__init__"
None*√
self∏
5collections.defaultdict[builtins.str,collections._VT]
builtins.str"builtins.strH
collections._VT"
builtins.object"builtins.object"builtins.object"collections.defaultdict*T
kwargsH
collections._VT"
builtins.object"builtins.object"builtins.object0:typing.overloadXÃ
__init__ collections.defaultdict.__init__"
None*Ú
selfÁ
8collections.defaultdict[collections._KT,collections._VT]H
collections._KT"
builtins.object"builtins.object"builtins.objectH
collections._VT"
builtins.object"builtins.object"builtins.object"collections.defaultdict*âÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None0:typing.overloadXÛ
__init__ collections.defaultdict.__init__"
None*√
self∏
5collections.defaultdict[builtins.str,collections._VT]
builtins.str"builtins.strH
collections._VT"
builtins.object"builtins.object"builtins.object"collections.defaultdict*âÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None*T
kwargsH
collections._VT"
builtins.object"builtins.object"builtins.object0:typing.overloadXÀ
__init__ collections.defaultdict.__init__"
None*Ú
selfÁ
8collections.defaultdict[collections._KT,collections._VT]H
collections._KT"
builtins.object"builtins.object"builtins.objectH
collections._VT"
builtins.object"builtins.object"builtins.object"collections.defaultdict*âÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None*¸˘
A_typeshed.SupportsKeysAndGetItem[collections._KT,collections._VT]H
collections._KT"
builtins.object"builtins.object"builtins.objectH
collections._VT"
builtins.object"builtins.object"builtins.object" _typeshed.SupportsKeysAndGetItem0:typing.overloadX√
__init__ collections.defaultdict.__init__"
None*√
self∏
5collections.defaultdict[builtins.str,collections._VT]
builtins.str"builtins.strH
collections._VT"
builtins.object"builtins.object"builtins.object"collections.defaultdict*âÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None*Õ 
>_typeshed.SupportsKeysAndGetItem[builtins.str,collections._VT]
builtins.str"builtins.strH
collections._VT"
builtins.object"builtins.object"builtins.object" _typeshed.SupportsKeysAndGetItem*T
kwargsH
collections._VT"
builtins.object"builtins.object"builtins.object0:typing.overloadX›
__init__ collections.defaultdict.__init__"
None*Ú
selfÁ
8collections.defaultdict[collections._KT,collections._VT]H
collections._KT"
builtins.object"builtins.object"builtins.objectH
collections._VT"
builtins.object"builtins.object"builtins.object"collections.defaultdict*âÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None*éã
7typing.Iterable[Tuple[collections._KT,collections._VT]]æ
&Tuple[collections._KT,collections._VT]H
collections._KT"
builtins.object"builtins.object"builtins.objectH
collections._VT"
builtins.object"builtins.object"builtins.object"typing.Iterable0:typing.overloadX“
__init__ collections.defaultdict.__init__"
None*√
self∏
5collections.defaultdict[builtins.str,collections._VT]
builtins.str"builtins.strH
collections._VT"
builtins.object"builtins.object"builtins.object"collections.defaultdict*âÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None*‹Ÿ
4typing.Iterable[Tuple[builtins.str,collections._VT]]è
#Tuple[builtins.str,collections._VT]
builtins.str"builtins.strH
collections._VT"
builtins.object"builtins.object"builtins.object"typing.Iterable*T
kwargsH
collections._VT"
builtins.object"builtins.object"builtins.object0:typing.overloadXPr√
default_factory'collections.defaultdict.default_factoryÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None∞
Integralnumbers.Integral"numbers.Rational*Å
__int__numbers.Integral.__int__"
builtins.int"builtins.int*&$
numbers.Integral"numbers.Integral0:abc.abstractmethod@*u
	__index__numbers.Integral.__index__"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral*£
__pow__numbers.Integral.__pow__"
Any*&$
numbers.Integral"numbers.Integral*	
Any**&
Union[Any,None]
Any
None 0:abc.abstractmethod@*}

__lshift__numbers.Integral.__lshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*
__rlshift__numbers.Integral.__rlshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*}

__rshift__numbers.Integral.__rshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*
__rrshift__numbers.Integral.__rrshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*w
__and__numbers.Integral.__and__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*y
__rand__numbers.Integral.__rand__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*w
__xor__numbers.Integral.__xor__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*y
__rxor__numbers.Integral.__rxor__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*u
__or__numbers.Integral.__or__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*w
__ror__numbers.Integral.__ror__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*r

__invert__numbers.Integral.__invert__"
Any*&$
numbers.Integral"numbers.Integral0:abc.abstractmethod@*q
	__float__numbers.Integral.__float__" 
builtins.float"builtins.float*&$
numbers.Integral"numbers.Integral*å
	numeratornumbers.Integral.numerator"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral0:builtins.property`*ê
denominatornumbers.Integral.denominator"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral0:builtins.property`ò
Realnumbers.Real"numbers.Complex"typing.SupportsFloat*}
	__float__numbers.Real.__float__" 
builtins.float"builtins.float*
numbers.Real"numbers.Real0:abc.abstractmethod@*Å
	__trunc__numbers.Real.__trunc__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real0:abc.abstractmethod@*Å
	__floor__numbers.Real.__floor__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real0:abc.abstractmethod@*
__ceil__numbers.Real.__ceil__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real0:abc.abstractmethod@*Y

__divmod__numbers.Real.__divmod__"
Any*
numbers.Real"numbers.Real*	
Any*l
__rdivmod__numbers.Real.__rdivmod__"
Any*&
self
numbers.Real"numbers.Real*
other
Any*ä
__floordiv__numbers.Real.__floordiv__"
builtins.int"builtins.int*
numbers.Real"numbers.Real*	
Any0:abc.abstractmethod@*å
__rfloordiv__numbers.Real.__rfloordiv__"
builtins.int"builtins.int*
numbers.Real"numbers.Real*	
Any0:abc.abstractmethod@*k
__mod__numbers.Real.__mod__"
Any*
numbers.Real"numbers.Real*	
Any0:abc.abstractmethod@*m
__rmod__numbers.Real.__rmod__"
Any*
numbers.Real"numbers.Real*	
Any0:abc.abstractmethod@*Ä
__lt__numbers.Real.__lt__"
builtins.bool"builtins.bool*
numbers.Real"numbers.Real*	
Any0:abc.abstractmethod@*Ä
__le__numbers.Real.__le__"
builtins.bool"builtins.bool*
numbers.Real"numbers.Real*	
Any0:abc.abstractmethod@*m
__complex__numbers.Real.__complex__"$
builtins.complex"builtins.complex*
numbers.Real"numbers.Real*a
realnumbers.Real.real"
Any*&
self
numbers.Real"numbers.Real0:builtins.property`*a
imagnumbers.Real.imag"
Any*&
self
numbers.Real"numbers.Real0:builtins.property`*T
	conjugatenumbers.Real.conjugate"
Any*&
self
numbers.Real"numbers.Real2Ä
	__round__numbers.Real.__round__≠
	__round__numbers.Real.__round__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real*
ndigits
None 0:abc.abstractmethod:typing.overload@X™
	__round__numbers.Real.__round__"
Any*&
self
numbers.Real"numbers.Real*)
ndigits
builtins.int"builtins.int0:abc.abstractmethod:typing.overload@X¿"

itemgetter_operator.itemgetter"builtins.object*£
__call___operator.itemgetter.__call__"
Any*í
selfá
%_operator.itemgetter[_operator._T_co]H
_operator._T_co"
builtins.object"builtins.object"builtins.object"_operator.itemgetter*Z
objQ
"_typeshed.SupportsGetItem[Any,Any]
Any
Any"_typeshed.SupportsGetItem2‡
__new___operator.itemgetter.__new__Ê
__new___operator.itemgetter.__new__"á
%_operator.itemgetter[_operator._T_co]H
_operator._T_co"
builtins.object"builtins.object"builtins.object"_operator.itemgetter*…
clsø
+Type[_operator.itemgetter[_operator._T_co]]á
%_operator.itemgetter[_operator._T_co]H
_operator._T_co"
builtins.object"builtins.object"builtins.object"_operator.itemgetter"type*R
itemH
_operator._T_co"
builtins.object"builtins.object"builtins.object0:typing.overloadX¿
__new___operator.itemgetter.__new__"ï
<_operator.itemgetter[Tuple[_operator._T_co,_operator._T_co]]æ
&Tuple[_operator._T_co,_operator._T_co]H
_operator._T_co"
builtins.object"builtins.object"builtins.objectH
_operator._T_co"
builtins.object"builtins.object"builtins.object"_operator.itemgetter*…
clsø
+Type[_operator.itemgetter[_operator._T_co]]á
%_operator.itemgetter[_operator._T_co]H
_operator._T_co"
builtins.object"builtins.object"builtins.object"_operator.itemgetter"type*R
itemH
_operator._T_co"
builtins.object"builtins.object"builtins.object*JH
_operator._T_co"
builtins.object"builtins.object"builtins.object0:typing.overloadXˆ
__new___operator.itemgetter.__new__"ˇ
L_operator.itemgetter[Tuple[_operator._T_co,_operator._T_co,_operator._T_co]]ò
6Tuple[_operator._T_co,_operator._T_co,_operator._T_co]H
_operator._T_co"
builtins.object"builtins.object"builtins.objectH
_operator._T_co"
builtins.object"builtins.object"builtins.objectH
_operator._T_co"
builtins.object"builtins.object"builtins.object"_operator.itemgetter*…
clsø
+Type[_operator.itemgetter[_operator._T_co]]á
%_operator.itemgetter[_operator._T_co]H
_operator._T_co"
builtins.object"builtins.object"builtins.object"_operator.itemgetter"type*R
itemH
_operator._T_co"
builtins.object"builtins.object"builtins.object*JH
_operator._T_co"
builtins.object"builtins.object"builtins.object*JH
_operator._T_co"
builtins.object"builtins.object"builtins.object0:typing.overloadX¨
__new___operator.itemgetter.__new__"È
\_operator.itemgetter[Tuple[_operator._T_co,_operator._T_co,_operator._T_co,_operator._T_co]]Ú
FTuple[_operator._T_co,_operator._T_co,_operator._T_co,_operator._T_co]H
_operator._T_co"
builtins.object"builtins.object"builtins.objectH
_operator._T_co"
builtins.object"builtins.object"builtins.objectH
_operator._T_co"
builtins.object"builtins.object"builtins.objectH
_operator._T_co"
builtins.object"builtins.object"builtins.object"_operator.itemgetter*…
clsø
+Type[_operator.itemgetter[_operator._T_co]]á
%_operator.itemgetter[_operator._T_co]H
_operator._T_co"
builtins.object"builtins.object"builtins.object"_operator.itemgetter"type*R
itemH
_operator._T_co"
builtins.object"builtins.object"builtins.object*JH
_operator._T_co"
builtins.object"builtins.object"builtins.object*JH
_operator._T_co"
builtins.object"builtins.object"builtins.object*JH
_operator._T_co"
builtins.object"builtins.object"builtins.object0:typing.overloadX‚
__new___operator.itemgetter.__new__" 
5_operator.itemgetter[builtins.tuple[_operator._T_co]]{
builtins.tuple[_operator._T_co]H
_operator._T_co"
builtins.object"builtins.object"builtins.object"builtins.tuple"_operator.itemgetter*…
clsø
+Type[_operator.itemgetter[_operator._T_co]]á
%_operator.itemgetter[_operator._T_co]H
_operator._T_co"
builtins.object"builtins.object"builtins.object"_operator.itemgetter"type*R
itemH
_operator._T_co"
builtins.object"builtins.object"builtins.object*JH
_operator._T_co"
builtins.object"builtins.object"builtins.object*JH
_operator._T_co"
builtins.object"builtins.object"builtins.object*JH
_operator._T_co"
builtins.object"builtins.object"builtins.object*S
itemsH
_operator._T_co"
builtins.object"builtins.object"builtins.object0:typing.overloadX8Pa
NotFittedError!sklearn.exceptions.NotFittedError"builtins.ValueError"builtins.AttributeError—

HasMethods*sklearn.utils._param_validation.HasMethods"+sklearn.utils._param_validation._Constraint*…
__init__3sklearn.utils._param_validation.HasMethods.__init__"
None*b
selfX
*sklearn.utils._param_validation.HasMethods"*sklearn.utils._param_validation.HasMethods*ô
methodsã
MUnion[builtins.list[builtins.str],builtins.str,typing.Sequence[builtins.str]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*„
is_satisfied_by:sklearn.utils._param_validation.HasMethods.is_satisfied_by"
builtins.bool"builtins.bool*b
selfX
*sklearn.utils._param_validation.HasMethods"*sklearn.utils._param_validation.HasMethods*
val
Any*∑
__str__2sklearn.utils._param_validation.HasMethods.__str__"
builtins.str"builtins.str*ZX
*sklearn.utils._param_validation.HasMethods"*sklearn.utils._param_validation.HasMethods
Interval(sklearn.utils._param_validation.Interval"+sklearn.utils._param_validation._Constraint*©
__init__1sklearn.utils._param_validation.Interval.__init__"
None*^
selfT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.Interval*•
typeö
NUnion[numbers.Real,Type[numbers.Integral],Type[numbers.Real],numbers.Integral]
numbers.Real"numbers.RealF
Type[numbers.Integral]$
numbers.Integral"numbers.Integral"type:
Type[numbers.Real]
numbers.Real"numbers.Real"type$
numbers.Integral"numbers.Integral*
leftu
'Union[builtins.float,None,builtins.int] 
builtins.float"builtins.float
None
builtins.int"builtins.int*Ä
rightu
'Union[builtins.float,None,builtins.int] 
builtins.float"builtins.float
None
builtins.int"builtins.int*”
closed∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*Ã

__contains__5sklearn.utils._param_validation.Interval.__contains__"
builtins.bool"builtins.bool*VT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.Interval*å	â	
≈Union[builtins.bool,TypeAlias[Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]]]]
builtins.bool"builtins.boolú
∞TypeAlias[Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]]]Õ
•Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]] 
builtins.float"builtins.float®
/TypeAlias[numpy.floating[numpy._typing._16Bit]]d
$numpy.floating[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.floating"numpy.float16®
/TypeAlias[numpy.floating[numpy._typing._32Bit]]d
$numpy.floating[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.floating"numpy.float32®
/TypeAlias[numpy.floating[numpy._typing._64Bit]]d
$numpy.floating[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.floating"numpy.float64"sklearn._typing.Float*›
is_satisfied_by8sklearn.utils._param_validation.Interval.is_satisfied_by"
builtins.bool"builtins.bool*^
selfT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.Interval*
val
Any*±
__str__0sklearn.utils._param_validation.Interval.__str__"
builtins.str"builtins.str*VT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.Interval˚

StrOptions*sklearn.utils._param_validation.StrOptions"'sklearn.utils._param_validation.Options*ó
__init__3sklearn.utils._param_validation.StrOptions.__init__"
None*b
selfX
*sklearn.utils._param_validation.StrOptions"*sklearn.utils._param_validation.StrOptions*U
optionsH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.set*ê

deprecated~
&Union[builtins.set[builtins.str],None]H
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.set
None ™
FeatureHasher.sklearn.feature_extraction._hash.FeatureHasher"sklearn.base.TransformerMixin"sklearn.base.BaseEstimator*ﬁ
__init__7sklearn.feature_extraction._hash.FeatureHasher.__init__"
None*j
self`
.sklearn.feature_extraction._hash.FeatureHasher".sklearn.feature_extraction._hash.FeatureHasher*Ö


n_featuresÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *.

input_type
builtins.str"builtins.str *5
dtype(
numpy.dtype[Any]
Any"numpy.dtype *4
alternate_sign
builtins.bool"builtins.bool *Ä
fit2sklearn.feature_extraction._hash.FeatureHasher.fit"…
3sklearn.feature_extraction._hash.FeatureHasher_Self`
.sklearn.feature_extraction._hash.FeatureHasher".sklearn.feature_extraction._hash.FeatureHasher".sklearn.feature_extraction._hash.FeatureHasher*‘
self…
3sklearn.feature_extraction._hash.FeatureHasher_Self`
.sklearn.feature_extraction._hash.FeatureHasher".sklearn.feature_extraction._hash.FeatureHasher".sklearn.feature_extraction._hash.FeatureHasher*
X
Any *
y
Any *¨
	transform8sklearn.feature_extraction._hash.FeatureHasher.transform"
Any*j
self`
.sklearn.feature_extraction._hash.FeatureHasher".sklearn.feature_extraction._hash.FeatureHasher*Ô
raw_X„
AUnion[typing.Iterator[Any],typing.Iterator[typing.Iterator[Any]]]0
typing.Iterator[Any]
Any"typing.Iteratorj
%typing.Iterator[typing.Iterator[Any]]0
typing.Iterator[Any]
Any"typing.Iterator"typing.Iteratorrö
_parameter_constraintsEsklearn.feature_extraction._hash.FeatureHasher._parameter_constraints9
builtins.dict[Any,Any]
Any
Any"builtins.dict≥
_VectorizerMixin0sklearn.feature_extraction.text._VectorizerMixin"builtins.object*¿
decode7sklearn.feature_extraction.text._VectorizerMixin.decode"
builtins.str"builtins.str*n
selfd
0sklearn.feature_extraction.text._VectorizerMixin"0sklearn.feature_extraction.text._VectorizerMixin*o
docf
"Union[builtins.bytes,builtins.str] 
builtins.bytes"builtins.bytes
builtins.str"builtins.str*ê
build_preprocessorCsklearn.feature_extraction.text._VectorizerMixin.build_preprocessor"ƒ
=Union[CallableType[builtins.function],functools.partial[Any]]K
CallableType[builtins.function]&
builtins.function"builtins.function4
functools.partial[Any]
Any"functools.partial*n
selfd
0sklearn.feature_extraction.text._VectorizerMixin"0sklearn.feature_extraction.text._VectorizerMixin*ê
build_tokenizer@sklearn.feature_extraction.text._VectorizerMixin.build_tokenizer"K
CallableType[builtins.function]&
builtins.function"builtins.function*n
selfd
0sklearn.feature_extraction.text._VectorizerMixin"0sklearn.feature_extraction.text._VectorizerMixin*Ó
get_stop_words?sklearn.feature_extraction.text._VectorizerMixin.get_stop_words"™
6Union[builtins.frozenset[Any],None,builtins.list[Any]]6
builtins.frozenset[Any]
Any"builtins.frozenset
None,
builtins.list[Any]
Any"builtins.list*n
selfd
0sklearn.feature_extraction.text._VectorizerMixin"0sklearn.feature_extraction.text._VectorizerMixin*à
build_analyzer?sklearn.feature_extraction.text._VectorizerMixin.build_analyzer"ƒ
=Union[CallableType[builtins.function],functools.partial[Any]]K
CallableType[builtins.function]&
builtins.function"builtins.function4
functools.partial[Any]
Any"functools.partial*n
selfd
0sklearn.feature_extraction.text._VectorizerMixin"0sklearn.feature_extraction.text._VectorizerMixinrw
_white_spaces>sklearn.feature_extraction.text._VectorizerMixin._white_spaces&
builtins.ellipsis"builtins.ellipsisÎK
HashingVectorizer1sklearn.feature_extraction.text.HashingVectorizer"sklearn.base.TransformerMixin"0sklearn.feature_extraction.text._VectorizerMixin"sklearn.base.BaseEstimator*Ÿ4
__init__:sklearn.feature_extraction.text.HashingVectorizer.__init__"
None*p
selff
1sklearn.feature_extraction.text.HashingVectorizer"1sklearn.feature_extraction.text.HashingVectorizer*‘
input∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *,
encoding
builtins.str"builtins.str *€
decode_error∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *∫
strip_accents§
WUnion[None,Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function */
	lowercase
builtins.bool"builtins.bool *õ
preprocessorÜ
+Union[None,CallableType[builtins.function]]
NoneK
CallableType[builtins.function]&
builtins.function"builtins.function *ò
	tokenizerÜ
+Union[None,CallableType[builtins.function]]
NoneK
CallableType[builtins.function]&
builtins.function"builtins.function *ﬁ

stop_wordsÀ
Union[None,builtins.str,TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]]
None
builtins.str"builtins.str´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLike *Y
token_patternD
Union[None,builtins.str]
None
builtins.str"builtins.str *
ngram_rangel
$Tuple[builtins.float,builtins.float] 
builtins.float"builtins.float 
builtins.float"builtins.float *ƒ
analyzer≥
~Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *Ö


n_featuresÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *,
binary
builtins.bool"builtins.bool *Ñ
norm˜
HUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *4
alternate_sign
builtins.bool"builtins.bool *
dtype
Any *–
partial_fit=sklearn.feature_extraction.text.HashingVectorizer.partial_fit"’
6sklearn.feature_extraction.text.HashingVectorizer_Selff
1sklearn.feature_extraction.text.HashingVectorizer"1sklearn.feature_extraction.text.HashingVectorizer"1sklearn.feature_extraction.text.HashingVectorizer*‡
self’
6sklearn.feature_extraction.text.HashingVectorizer_Selff
1sklearn.feature_extraction.text.HashingVectorizer"1sklearn.feature_extraction.text.HashingVectorizer"1sklearn.feature_extraction.text.HashingVectorizer*¥
X¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike*
y
Any *˛
fit5sklearn.feature_extraction.text.HashingVectorizer.fit"’
6sklearn.feature_extraction.text.HashingVectorizer_Selff
1sklearn.feature_extraction.text.HashingVectorizer"1sklearn.feature_extraction.text.HashingVectorizer"1sklearn.feature_extraction.text.HashingVectorizer*‡
self’
6sklearn.feature_extraction.text.HashingVectorizer_Selff
1sklearn.feature_extraction.text.HashingVectorizer"1sklearn.feature_extraction.text.HashingVectorizer"1sklearn.feature_extraction.text.HashingVectorizer*Ú
XÍ
kUnion[builtins.list[builtins.str],TypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike*
y
Any *ö
	transform;sklearn.feature_extraction.text.HashingVectorizer.transform"
Any*p
selff
1sklearn.feature_extraction.text.HashingVectorizer"1sklearn.feature_extraction.text.HashingVectorizer*U
XN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*»
fit_transform?sklearn.feature_extraction.text.HashingVectorizer.fit_transform"
Any*p
selff
1sklearn.feature_extraction.text.HashingVectorizer"1sklearn.feature_extraction.text.HashingVectorizer*Ë
X‡
@Union[builtins.list[builtins.str],typing.Iterable[builtins.str]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*
y
Any rù
_parameter_constraintsHsklearn.feature_extraction.text.HashingVectorizer._parameter_constraints9
builtins.dict[Any,Any]
Any
Any"builtins.dictäã
CountVectorizer/sklearn.feature_extraction.text.CountVectorizer"0sklearn.feature_extraction.text._VectorizerMixin"sklearn.base.BaseEstimator*ﬁ7
__init__8sklearn.feature_extraction.text.CountVectorizer.__init__"
None*l
selfb
/sklearn.feature_extraction.text.CountVectorizer"/sklearn.feature_extraction.text.CountVectorizer*‘
input∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *,
encoding
builtins.str"builtins.str *€
decode_error∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *∫
strip_accents§
WUnion[None,Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function */
	lowercase
builtins.bool"builtins.bool *õ
preprocessorÜ
+Union[None,CallableType[builtins.function]]
NoneK
CallableType[builtins.function]&
builtins.function"builtins.function *ò
	tokenizerÜ
+Union[None,CallableType[builtins.function]]
NoneK
CallableType[builtins.function]&
builtins.function"builtins.function *ﬁ

stop_wordsÀ
Union[None,builtins.str,TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]]
None
builtins.str"builtins.str´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLike *Y
token_patternD
Union[None,builtins.str]
None
builtins.str"builtins.str *
ngram_rangel
$Tuple[builtins.float,builtins.float] 
builtins.float"builtins.float 
builtins.float"builtins.float *ƒ
analyzer≥
~Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *t
max_dff
"Union[builtins.float,builtins.int] 
builtins.float"builtins.float
builtins.int"builtins.int *t
min_dff
"Union[builtins.float,builtins.int] 
builtins.float"builtins.float
builtins.int"builtins.int *ñ
max_featuresÅ
˝Union[None,TypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]]
NoneÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *»

vocabularyµ
8Union[typing.Iterable[Any],None,typing.Mapping[Any,Any]]0
typing.Iterable[Any]
Any"typing.Iterable
None;
typing.Mapping[Any,Any]
Any
Any"typing.Mapping *,
binary
builtins.bool"builtins.bool *
dtype
Any *º
fit3sklearn.feature_extraction.text.CountVectorizer.fit"Õ
4sklearn.feature_extraction.text.CountVectorizer_Selfb
/sklearn.feature_extraction.text.CountVectorizer"/sklearn.feature_extraction.text.CountVectorizer"/sklearn.feature_extraction.text.CountVectorizer*ÿ
selfÕ
4sklearn.feature_extraction.text.CountVectorizer_Selfb
/sklearn.feature_extraction.text.CountVectorizer"/sklearn.feature_extraction.text.CountVectorizer"/sklearn.feature_extraction.text.CountVectorizer*C
raw_documents0
typing.Iterable[Any]
Any"typing.Iterable*
y
Any *Õ
fit_transform=sklearn.feature_extraction.text.CountVectorizer.fit_transform"i
!Union[numpy.ndarray[Any,Any],Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray
Any*l
selfb
/sklearn.feature_extraction.text.CountVectorizer"/sklearn.feature_extraction.text.CountVectorizer*ü
raw_documentsã
NUnion[builtins.list[builtins.str],numpy.ndarray[Any,Any],typing.Iterable[Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray0
typing.Iterable[Any]
Any"typing.Iterable*Å
y˜
£Union[None,numpy.ndarray[Any,Any],builtins.list[TypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]]]
None9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayá
Äbuiltins.list[TypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]]Ú	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int"builtins.list *ﬂ
	transform9sklearn.feature_extraction.text.CountVectorizer.transform"
Any*l
selfb
/sklearn.feature_extraction.text.CountVectorizer"/sklearn.feature_extraction.text.CountVectorizer*ü
raw_documentsã
NUnion[builtins.list[builtins.str],numpy.ndarray[Any,Any],typing.Iterable[Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray0
typing.Iterable[Any]
Any"typing.Iterable*À
inverse_transformAsklearn.feature_extraction.text.CountVectorizer.inverse_transform"q
%builtins.list[numpy.ndarray[Any,Any]]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray"builtins.list*l
selfb
/sklearn.feature_extraction.text.CountVectorizer"/sklearn.feature_extraction.text.CountVectorizer*ë
Xâ
ßUnion[TypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]],TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]]¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLike*¡
get_feature_names_outEsklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*l
selfb
/sklearn.feature_extraction.text.CountVectorizer"/sklearn.feature_extraction.text.CountVectorizer*∑
input_features†
„Union[None,TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]]
None´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLike rv
stop_words_;sklearn.feature_extraction.text.CountVectorizer.stop_words_*
builtins.set[Any]
Any"builtins.setrv
fixed_vocabulary_Asklearn.feature_extraction.text.CountVectorizer.fixed_vocabulary_
builtins.bool"builtins.boolrÖ
vocabulary_;sklearn.feature_extraction.text.CountVectorizer.vocabulary_9
builtins.dict[Any,Any]
Any
Any"builtins.dictrõ
_parameter_constraintsFsklearn.feature_extraction.text.CountVectorizer._parameter_constraints9
builtins.dict[Any,Any]
Any
Any"builtins.dict‘'
TfidfTransformer0sklearn.feature_extraction.text.TfidfTransformer"!sklearn.base.OneToOneFeatureMixin"sklearn.base.TransformerMixin"sklearn.base.BaseEstimator*Í
__init__9sklearn.feature_extraction.text.TfidfTransformer.__init__"
None*n
selfd
0sklearn.feature_extraction.text.TfidfTransformer"0sklearn.feature_extraction.text.TfidfTransformer*ì
normÜ
MUnion[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *-
use_idf
builtins.bool"builtins.bool *0

smooth_idf
builtins.bool"builtins.bool *2
sublinear_tf
builtins.bool"builtins.bool *©
fit4sklearn.feature_extraction.text.TfidfTransformer.fit"—
5sklearn.feature_extraction.text.TfidfTransformer_Selfd
0sklearn.feature_extraction.text.TfidfTransformer"0sklearn.feature_extraction.text.TfidfTransformer"0sklearn.feature_extraction.text.TfidfTransformer*‹
self—
5sklearn.feature_extraction.text.TfidfTransformer_Selfd
0sklearn.feature_extraction.text.TfidfTransformer"0sklearn.feature_extraction.text.TfidfTransformer"0sklearn.feature_extraction.text.TfidfTransformer*¥
X¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike*Å
y˜
£Union[None,numpy.ndarray[Any,Any],builtins.list[TypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]]]
None9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayá
Äbuiltins.list[TypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]]Ú	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int"builtins.list *£
	transform:sklearn.feature_extraction.text.TfidfTransformer.transform"
Any*n
selfd
0sklearn.feature_extraction.text.TfidfTransformer"0sklearn.feature_extraction.text.TfidfTransformer*¥
X¨
HTypeAlias[Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]]¡
=Union[numpy.ndarray[Any,Any],pandas.core.frame.DataFrame,Any]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
Any"sklearn._typing.MatrixLike**
copy
builtins.bool"builtins.bool 2À
idf_5sklearn.feature_extraction.text.TfidfTransformer.idf_Å
idf_5sklearn.feature_extraction.text.TfidfTransformer.idf_"9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*n
selfd
0sklearn.feature_extraction.text.TfidfTransformer"0sklearn.feature_extraction.text.TfidfTransformer0:builtins.propertyX`á
idf_5sklearn.feature_extraction.text.TfidfTransformer.idf_"9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*n
selfd
0sklearn.feature_extraction.text.TfidfTransformer"0sklearn.feature_extraction.text.TfidfTransformer*
value
Any0:.setterrí
feature_names_in_Bsklearn.feature_extraction.text.TfidfTransformer.feature_names_in_9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayro
n_features_in_?sklearn.feature_extraction.text.TfidfTransformer.n_features_in_
builtins.int"builtins.intrú
_parameter_constraintsGsklearn.feature_extraction.text.TfidfTransformer._parameter_constraints9
builtins.dict[Any,Any]
Any
Any"builtins.dict•^
TfidfVectorizer/sklearn.feature_extraction.text.TfidfVectorizer"/sklearn.feature_extraction.text.CountVectorizer*—G
__init__8sklearn.feature_extraction.text.TfidfVectorizer.__init__"
None*l
selfb
/sklearn.feature_extraction.text.TfidfVectorizer"/sklearn.feature_extraction.text.TfidfVectorizer*‘
input∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *,
encoding
builtins.str"builtins.str *€
decode_error∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *∫
strip_accents§
WUnion[None,Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function */
	lowercase
builtins.bool"builtins.bool *õ
preprocessorÜ
+Union[None,CallableType[builtins.function]]
NoneK
CallableType[builtins.function]&
builtins.function"builtins.function *ò
	tokenizerÜ
+Union[None,CallableType[builtins.function]]
NoneK
CallableType[builtins.function]&
builtins.function"builtins.function *ƒ
analyzer≥
~Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *ﬁ

stop_wordsÀ
Union[None,builtins.str,TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]]
None
builtins.str"builtins.str´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLike *1
token_pattern
builtins.str"builtins.str *
ngram_rangel
$Tuple[builtins.float,builtins.float] 
builtins.float"builtins.float 
builtins.float"builtins.float *´
max_dfú
∞TypeAlias[Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]]]Õ
•Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]] 
builtins.float"builtins.float®
/TypeAlias[numpy.floating[numpy._typing._16Bit]]d
$numpy.floating[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.floating"numpy.float16®
/TypeAlias[numpy.floating[numpy._typing._32Bit]]d
$numpy.floating[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.floating"numpy.float32®
/TypeAlias[numpy.floating[numpy._typing._64Bit]]d
$numpy.floating[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.floating"numpy.float64"sklearn._typing.Float *´
min_dfú
∞TypeAlias[Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]]]Õ
•Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]] 
builtins.float"builtins.float®
/TypeAlias[numpy.floating[numpy._typing._16Bit]]d
$numpy.floating[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.floating"numpy.float16®
/TypeAlias[numpy.floating[numpy._typing._32Bit]]d
$numpy.floating[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.floating"numpy.float32®
/TypeAlias[numpy.floating[numpy._typing._64Bit]]d
$numpy.floating[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.floating"numpy.float64"sklearn._typing.Float *ñ
max_featuresÅ
˝Union[None,TypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]]
NoneÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *»

vocabularyµ
8Union[typing.Iterable[Any],None,typing.Mapping[Any,Any]]0
typing.Iterable[Any]
Any"typing.Iterable
None;
typing.Mapping[Any,Any]
Any
Any"typing.Mapping *,
binary
builtins.bool"builtins.bool *
dtype
Any *ì
normÜ
MUnion[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *-
use_idf
builtins.bool"builtins.bool *0

smooth_idf
builtins.bool"builtins.bool *2
sublinear_tf
builtins.bool"builtins.bool *º
fit3sklearn.feature_extraction.text.TfidfVectorizer.fit"Õ
4sklearn.feature_extraction.text.TfidfVectorizer_Selfb
/sklearn.feature_extraction.text.TfidfVectorizer"/sklearn.feature_extraction.text.TfidfVectorizer"/sklearn.feature_extraction.text.TfidfVectorizer*ÿ
selfÕ
4sklearn.feature_extraction.text.TfidfVectorizer_Selfb
/sklearn.feature_extraction.text.TfidfVectorizer"/sklearn.feature_extraction.text.TfidfVectorizer"/sklearn.feature_extraction.text.TfidfVectorizer*C
raw_documents0
typing.Iterable[Any]
Any"typing.Iterable*
y
Any *›
fit_transform=sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"
Any*l
selfb
/sklearn.feature_extraction.text.TfidfVectorizer"/sklearn.feature_extraction.text.TfidfVectorizer*ü
raw_documentsã
NUnion[builtins.list[builtins.str],numpy.ndarray[Any,Any],typing.Iterable[Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray0
typing.Iterable[Any]
Any"typing.Iterable*t
yk
"Union[None,numpy.ndarray[Any,Any]]
None9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray *ﬂ
	transform9sklearn.feature_extraction.text.TfidfVectorizer.transform"
Any*l
selfb
/sklearn.feature_extraction.text.TfidfVectorizer"/sklearn.feature_extraction.text.TfidfVectorizer*ü
raw_documentsã
NUnion[builtins.list[builtins.str],numpy.ndarray[Any,Any],typing.Iterable[Any]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray0
typing.Iterable[Any]
Any"typing.Iterable2ƒ
idf_4sklearn.feature_extraction.text.TfidfVectorizer.idf_˛
idf_4sklearn.feature_extraction.text.TfidfVectorizer.idf_"9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*l
selfb
/sklearn.feature_extraction.text.TfidfVectorizer"/sklearn.feature_extraction.text.TfidfVectorizer0:builtins.propertyX`Ñ
idf_4sklearn.feature_extraction.text.TfidfVectorizer.idf_"9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*l
selfb
/sklearn.feature_extraction.text.TfidfVectorizer"/sklearn.feature_extraction.text.TfidfVectorizer*
value
Any0:.setterrv
stop_words_;sklearn.feature_extraction.text.TfidfVectorizer.stop_words_*
builtins.set[Any]
Any"builtins.setrv
fixed_vocabulary_Asklearn.feature_extraction.text.TfidfVectorizer.fixed_vocabulary_
builtins.bool"builtins.boolrÖ
vocabulary_;sklearn.feature_extraction.text.TfidfVectorizer.vocabulary_9
builtins.dict[Any,Any]
Any
Any"builtins.dictrõ
_parameter_constraintsFsklearn.feature_extraction.text.TfidfVectorizer._parameter_constraints9
builtins.dict[Any,Any]
Any
Any"builtins.dictô!
check_array$sklearn.utils.validation.check_array"
Any*
array
Any*“
accept_sparseº
|Union[typing.Sequence[builtins.str],Tuple[builtins.str,builtins.str],builtins.list[builtins.str],builtins.str,builtins.bool]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
builtins.str"builtins.str
builtins.bool"builtins.bool *9
accept_large_sparse
builtins.bool"builtins.bool *Â
dtype◊
dUnion[None,typing.Sequence[builtins.type],Literal[builtins.str],Literal[builtins.str],builtins.type]
NoneQ
typing.Sequence[builtins.type]
builtins.type"builtins.type"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
builtins.type"builtins.type *≈
order∑
7Union[Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None **
copy
builtins.bool"builtins.bool *{
force_all_finitec
!Union[builtins.str,builtins.bool]
builtins.str"builtins.str
builtins.bool"builtins.bool */
	ensure_2d
builtins.bool"builtins.bool *.
allow_nd
builtins.bool"builtins.bool *ç

ensure_min_samplesÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *é

ensure_min_featuresÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *´
	estimatorô
3Union[None,builtins.str,sklearn.base.BaseEstimator]
None
builtins.str"builtins.str8
sklearn.base.BaseEstimator"sklearn.base.BaseEstimator *.

input_name
builtins.str"builtins.str ≤
check_is_fitted(sklearn.utils.validation.check_is_fitted"
None*G
	estimator8
sklearn.base.BaseEstimator"sklearn.base.BaseEstimator*Ò

attributesﬁ
fUnion[builtins.tuple[builtins.str],None,typing.Sequence[Any],builtins.list[builtins.str],builtins.str]L
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple
None0
typing.Sequence[Any]
Any"typing.SequenceJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
builtins.str"builtins.str *O
msgD
Union[None,builtins.str]
None
builtins.str"builtins.str *]

all_or_anyK
CallableType[builtins.function]&
builtins.function"builtins.function ë
strip_accents_unicode5sklearn.feature_extraction.text.strip_accents_unicode"
builtins.str"builtins.str*#
s
builtins.str"builtins.strç
strip_accents_ascii3sklearn.feature_extraction.text.strip_accents_ascii"
builtins.str"builtins.str*#
s
builtins.str"builtins.str{

strip_tags*sklearn.feature_extraction.text.strip_tags"
builtins.str"builtins.str*#
s
builtins.str"builtins.str"Æ:
	normalize%sklearn.preprocessing._data.normalizeª
	normalize%sklearn.preprocessing._data.normalize"i
!Tuple[Any,numpy.ndarray[Any,Any]]
Any9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*
X
Any*”
norm∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *(
axis
builtins.int"builtins.int **
copy
builtins.bool"builtins.bool *K
return_norm:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:typing.overloadX€
	normalize%sklearn.preprocessing._data.normalize"
Any*
X
Any*”
norm∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *(
axis
builtins.int"builtins.int **
copy
builtins.bool"builtins.bool *M
return_norm:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:typing.overloadXß
	normalize%sklearn.preprocessing._data.normalize"Æ
4Tuple[numpy.ndarray[Any,Any],numpy.ndarray[Any,Any]]9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*≥
X´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLike*”
norm∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *(
axis
builtins.int"builtins.int **
copy
builtins.bool"builtins.bool *K
return_norm:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:typing.overloadX≥
	normalize%sklearn.preprocessing._data.normalize"9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarray*≥
X´
◊TypeAlias[TypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]]±
ÃTypeAlias[TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]]∏
¡TypeAlias[Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]]≈	
∂Union[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType],numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]],numpy._typing._array_like._T,numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArrayÇ
znumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType]]”
Jnumpy._typing._array_like._SupportsArray[numpy._typing._array_like._DType][
 numpy._typing._array_like._DType(
numpy.dtype[Any]
Any"numpy.dtype"numpy.dtype"(numpy._typing._array_like._SupportsArray".numpy._typing._nested_sequence._NestedSequenceU
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object’
Lnumpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._T]U
numpy._typing._array_like._T"
builtins.object"builtins.object"builtins.object".numpy._typing._nested_sequence._NestedSequence"(numpy._typing._array_like._DualArrayLike"#numpy._typing._array_like.ArrayLike"sklearn._typing.ArrayLike*”
norm∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *(
axis
builtins.int"builtins.int **
copy
builtins.bool"builtins.bool *M
return_norm:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:typing.overloadX*õ
__annotations__/sklearn.feature_extraction.text.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*=
spmatrix(sklearn.feature_extraction.text.spmatrix
Any*]
FLOAT_DTYPES%sklearn.utils.validation.FLOAT_DTYPES&
builtins.ellipsis"builtins.ellipsis*
npnumpy *1
sp"sklearn.feature_extraction.text.sp
Any*~
__all__'sklearn.feature_extraction.text.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list