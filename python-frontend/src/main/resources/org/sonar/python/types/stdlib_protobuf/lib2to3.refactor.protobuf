
lib2to3.refactorY

FixerErrorlib2to3.refactor.FixerError"builtins.Exceptionj38j39j310j311j312j313ˇê
RefactoringTool lib2to3.refactor.RefactoringTool"builtins.object*Ü
__init__)lib2to3.refactor.RefactoringTool.__init__"
None*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool*_
fixer_namesN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*Ÿ
options…
8Union[typing.Mapping[builtins.str,builtins.object],None]Ä
,typing.Mapping[builtins.str,builtins.object]
builtins.str"builtins.str"
builtins.object"builtins.object"typing.Mapping
None *õ
explicitä
*Union[typing.Container[builtins.str],None]P
typing.Container[builtins.str]
builtins.str"builtins.str"typing.Container
None z38z39z310z311z312z313*Ú

get_fixers+lib2to3.refactor.RefactoringTool.get_fixers" 
ZTuple[builtins.list[lib2to3.fixer_base.BaseFix],builtins.list[lib2to3.fixer_base.BaseFix]]t
)builtins.list[lib2to3.fixer_base.BaseFix]8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix"builtins.listt
)builtins.list[lib2to3.fixer_base.BaseFix]8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix"builtins.list*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringToolz38z39z310z311z312z313*‘
	log_error*lib2to3.refactor.RefactoringTool.log_error"
NoReturn
*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool*%
msg
builtins.str"builtins.str*X
argsN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*ü	
kwargsí	
æTypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]∂
≥Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]
None
builtins.bool"builtins.boolü
ÇTypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]¸
wUnion[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]≈
ZTuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type0
builtins.BaseException"builtins.BaseExceptionY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None7
Tuple[None,None,None]
None
None
None"logging._SysExcInfoType0
builtins.BaseException"builtins.BaseException"logging._ExcInfoTypez38z39z310z311z312z313*±
print_output-lib2to3.refactor.RefactoringTool.print_output"
None*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool**
old_text
builtins.str"builtins.str**
new_text
builtins.str"builtins.str*¯
filenameÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*)
equal
builtins.bool"builtins.boolz38z39z310z311z312z313*Ë
refactor)lib2to3.refactor.RefactoringTool.refactor"
None*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool*Y
itemsN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*+
write
builtins.bool"builtins.bool *3
doctests_only
builtins.bool"builtins.bool z38z39z310z311z312z313*¡
refactor_dir-lib2to3.refactor.RefactoringTool.refactor_dir"
None*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool**
dir_name
builtins.str"builtins.str*+
write
builtins.bool"builtins.bool *3
doctests_only
builtins.bool"builtins.bool z38z39z310z311z312z313*ß
_read_python_source4lib2to3.refactor.RefactoringTool._read_python_source"`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool*ã
filename¸
ÇTypeAlias[Union[builtins.int,TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]]]“
wUnion[builtins.int,TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]]
builtins.int"builtins.int∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath"_typeshed.FileDescriptorOrPathz38z39z310z311z312z313*í
refactor_file.lib2to3.refactor.RefactoringTool.refactor_file"
None*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool*¯
filenameÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*+
write
builtins.bool"builtins.bool *3
doctests_only
builtins.bool"builtins.bool z38z39z310z311z312z313*⁄
refactor_string0lib2to3.refactor.RefactoringTool.refactor_string"Y
Union[lib2to3.pytree.Node,None]*
lib2to3.pytree.Node"lib2to3.pytree.Node
None*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool*&
data
builtins.str"builtins.str*&
name
builtins.str"builtins.strz38z39z310z311z312z313*Ï
refactor_stdin/lib2to3.refactor.RefactoringTool.refactor_stdin"
None*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool*3
doctests_only
builtins.bool"builtins.bool z38z39z310z311z312z313*©
refactor_tree.lib2to3.refactor.RefactoringTool.refactor_tree"
builtins.bool"builtins.bool*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool*4
tree*
lib2to3.pytree.Node"lib2to3.pytree.Node*&
name
builtins.str"builtins.strz38z39z310z311z312z313*≠
traverse_by,lib2to3.refactor.RefactoringTool.traverse_by"
None*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool*Ö
fixers¯
_Union[_typeshed.SupportsGetItem[builtins.int,typing.Iterable[lib2to3.fixer_base.BaseFix]],None]à
S_typeshed.SupportsGetItem[builtins.int,typing.Iterable[lib2to3.fixer_base.BaseFix]]
builtins.int"builtins.intx
+typing.Iterable[lib2to3.fixer_base.BaseFix]8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix"typing.Iterable"_typeshed.SupportsGetItem
None*r
	traversalc
$typing.Iterable[lib2to3.pytree.Node]*
lib2to3.pytree.Node"lib2to3.pytree.Node"typing.Iterablez38z39z310z311z312z313*∑
processed_file/lib2to3.refactor.RefactoringTool.processed_file"
None*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool**
new_text
builtins.str"builtins.str*¯
filenameÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*T
old_textD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
write
builtins.bool"builtins.bool *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None z38z39z310z311z312z313*Î

write_file+lib2to3.refactor.RefactoringTool.write_file"
None*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool**
new_text
builtins.str"builtins.str*ã
filename¸
ÇTypeAlias[Union[builtins.int,TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]]]“
wUnion[builtins.int,TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]]
builtins.int"builtins.int∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath"_typeshed.FileDescriptorOrPath**
old_text
builtins.str"builtins.str*T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None z38z39z310z311z312z313*˜
refactor_docstring3lib2to3.refactor.RefactoringTool.refactor_docstring"
builtins.str"builtins.str*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool*'
input
builtins.str"builtins.str*¯
filenameÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPathz38z39z310z311z312z313*£
refactor_doctest1lib2to3.refactor.RefactoringTool.refactor_doctest"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool*U
blockJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*(
lineno
builtins.int"builtins.int*(
indent
builtins.int"builtins.int*¯
filenameÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPathz38z39z310z311z312z313*≠
	summarize*lib2to3.refactor.RefactoringTool.summarize"
None*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringToolz38z39z310z311z312z313*Ç
parse_block,lib2to3.refactor.RefactoringTool.parse_block"*
lib2to3.pytree.Node"lib2to3.pytree.Node*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool*Y
blockN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*(
lineno
builtins.int"builtins.int*(
indent
builtins.int"builtins.intz38z39z310z311z312z313*ù
	wrap_toks*lib2to3.refactor.RefactoringTool.wrap_toks"»
ãtyping.Generator[Tuple[builtins.int,builtins.str,Tuple[builtins.int,builtins.int],Tuple[builtins.int,builtins.int],builtins.str],None,None]ë
oTuple[builtins.int,builtins.str,Tuple[builtins.int,builtins.int],Tuple[builtins.int,builtins.int],builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.str"builtins.str
None
None"typing.Generator*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool*Y
blockN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*(
lineno
builtins.int"builtins.int*(
indent
builtins.int"builtins.intz38z39z310z311z312z313*ò
	gen_lines*lib2to3.refactor.RefactoringTool.gen_lines"n
(typing.Generator[builtins.str,None,None]
builtins.str"builtins.str
None
None"typing.Generator*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool*Y
blockN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*(
indent
builtins.int"builtins.intz38z39z310z311z312z3132≥
log_message,lib2to3.refactor.RefactoringTool.log_message◊
log_message,lib2to3.refactor.RefactoringTool.log_message"
None*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool*+
msg"
builtins.object"builtins.object0:typing.overloadXˇ
log_message,lib2to3.refactor.RefactoringTool.log_message"
None*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool*%
msg
builtins.str"builtins.str*,
args"
builtins.object"builtins.object0:typing.overloadX"38"39"310"311"312"3132ß
	log_debug*lib2to3.refactor.RefactoringTool.log_debug”
	log_debug*lib2to3.refactor.RefactoringTool.log_debug"
None*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool*+
msg"
builtins.object"builtins.object0:typing.overloadX˚
	log_debug*lib2to3.refactor.RefactoringTool.log_debug"
None*N
selfD
 lib2to3.refactor.RefactoringTool" lib2to3.refactor.RefactoringTool*%
msg
builtins.str"builtins.str*,
args"
builtins.object"builtins.object0:typing.overloadX"38"39"310"311"312"313j38j39j310j311j312j313rw
CLASS_PREFIX-lib2to3.refactor.RefactoringTool.CLASS_PREFIX
builtins.str"builtins.str*38*39*310*311*312*313ru
FILE_PREFIX,lib2to3.refactor.RefactoringTool.FILE_PREFIX
builtins.str"builtins.str*38*39*310*311*312*313rù
fixers'lib2to3.refactor.RefactoringTool.fixersN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*38*39*310*311*312*313r£
explicit)lib2to3.refactor.RefactoringTool.explicitP
typing.Container[builtins.str]
builtins.str"builtins.str"typing.Container*38*39*310*311*312*313r®
options(lib2to3.refactor.RefactoringTool.optionsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313rè
grammar(lib2to3.refactor.RefactoringTool.grammar>
lib2to3.pgen2.grammar.Grammar"lib2to3.pgen2.grammar.Grammar*38*39*310*311*312*313rã
write_unchanged_files6lib2to3.refactor.RefactoringTool.write_unchanged_files
builtins.bool"builtins.bool*38*39*310*311*312*313r°
errors'lib2to3.refactor.RefactoringTool.errors—
õbuiltins.list[Tuple[builtins.str,typing.Iterable[builtins.str],builtins.dict[builtins.str,TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]]]]°
åTuple[builtins.str,typing.Iterable[builtins.str],builtins.dict[builtins.str,TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]]]
builtins.str"builtins.strN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterableü
⁄builtins.dict[builtins.str,TypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]]
builtins.str"builtins.strí	
æTypeAlias[Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]]∂
≥Union[None,builtins.bool,TypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]],builtins.BaseException]
None
builtins.bool"builtins.boolü
ÇTypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]]¸
wUnion[Tuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]],Tuple[None,None,None]]≈
ZTuple[Type[builtins.BaseException],builtins.BaseException,Union[types.TracebackType,None]]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type0
builtins.BaseException"builtins.BaseExceptionY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None7
Tuple[None,None,None]
None
None
None"logging._SysExcInfoType0
builtins.BaseException"builtins.BaseException"logging._ExcInfoType"builtins.dict"builtins.list*38*39*310*311*312*313ro
logger'lib2to3.refactor.RefactoringTool.logger 
logging.Logger"logging.Logger*38*39*310*311*312*313rü
	fixer_log*lib2to3.refactor.RefactoringTool.fixer_logJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*38*39*310*311*312*313rk
wrote&lib2to3.refactor.RefactoringTool.wrote
builtins.bool"builtins.bool*38*39*310*311*312*313râ
driver'lib2to3.refactor.RefactoringTool.driver:
lib2to3.pgen2.driver.Driver"lib2to3.pgen2.driver.Driver*38*39*310*311*312*313r…
	pre_order*lib2to3.refactor.RefactoringTool.pre_ordert
)builtins.list[lib2to3.fixer_base.BaseFix]8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix"builtins.list*38*39*310*311*312*313rÀ

post_order+lib2to3.refactor.RefactoringTool.post_ordert
)builtins.list[lib2to3.fixer_base.BaseFix]8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix"builtins.list*38*39*310*311*312*313rí
files&lib2to3.refactor.RefactoringTool.filesƒ
Gbuiltins.list[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]]È
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath"builtins.list*38*39*310*311*312*313rç
BM#lib2to3.refactor.RefactoringTool.BMF
!lib2to3.btm_matcher.BottomMatcher"!lib2to3.btm_matcher.BottomMatcher*38*39*310*311*312*313r—
bmi_pre_order.lib2to3.refactor.RefactoringTool.bmi_pre_ordert
)builtins.list[lib2to3.fixer_base.BaseFix]8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix"builtins.list*38*39*310*311*312*313r”
bmi_post_order/lib2to3.refactor.RefactoringTool.bmi_post_ordert
)builtins.list[lib2to3.fixer_base.BaseFix]8
lib2to3.fixer_base.BaseFix"lib2to3.fixer_base.BaseFix"builtins.list*38*39*310*311*312*313re
PS1$lib2to3.refactor.RefactoringTool.PS1
builtins.str"builtins.str*38*39*310*311*312*313re
PS2$lib2to3.refactor.RefactoringTool.PS2
builtins.str"builtins.str*38*39*310*311*312*313y
MultiprocessingUnsupported+lib2to3.refactor.MultiprocessingUnsupported"builtins.Exceptionj38j39j310j311j312j313¨
MultiprocessRefactoringTool,lib2to3.refactor.MultiprocessRefactoringTool" lib2to3.refactor.RefactoringTool*ø
refactor5lib2to3.refactor.MultiprocessRefactoringTool.refactor"
None*f
self\
,lib2to3.refactor.MultiprocessRefactoringTool",lib2to3.refactor.MultiprocessRefactoringTool*Y
itemsN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*+
write
builtins.bool"builtins.bool *3
doctests_only
builtins.bool"builtins.bool *1
num_processes
builtins.int"builtins.int z38z39z310z311z312z313j38j39j310j311j312j313rı
queue2lib2to3.refactor.MultiprocessRefactoringTool.queueõ
ÑUnion[multiprocessing.queues.JoinableQueue[Union[None,Tuple[typing.Iterable[builtins.str],Union[builtins.bool,builtins.int]]]],None]Ö
xmultiprocessing.queues.JoinableQueue[Union[None,Tuple[typing.Iterable[builtins.str],Union[builtins.bool,builtins.int]]]]‚
RUnion[None,Tuple[typing.Iterable[builtins.str],Union[builtins.bool,builtins.int]]]
Noneˇ
FTuple[typing.Iterable[builtins.str],Union[builtins.bool,builtins.int]]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterablec
!Union[builtins.bool,builtins.int]
builtins.bool"builtins.bool
builtins.int"builtins.int"$multiprocessing.queues.JoinableQueue
None*38*39*310*311*312*313rÊ
output_lock8lib2to3.refactor.MultiprocessRefactoringTool.output_lockÄ
,Union[multiprocessing.synchronize.Lock,None]D
 multiprocessing.synchronize.Lock" multiprocessing.synchronize.Lock
None*38*39*310*311*312*313Å
get_all_fix_names"lib2to3.refactor.get_all_fix_names"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*+
	fixer_pkg
builtins.str"builtins.str*3
remove_prefix
builtins.bool"builtins.bool z38z39z310z311z312z313◊
get_fixers_from_package(lib2to3.refactor.get_fixers_from_package"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list**
pkg_name
builtins.str"builtins.strz38z39z310z311z312z313*®
__annotations__ lib2to3.refactor.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313