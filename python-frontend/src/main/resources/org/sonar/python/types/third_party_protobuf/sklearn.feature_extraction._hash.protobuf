
 sklearn.feature_extraction._hash˙

chainitertools.chain"typing.Iterator*ª
__init__itertools.chain.__init__"
None*Å
selfw
itertools.chain[itertools._T]E
itertools._T"
builtins.object"builtins.object"builtins.object"itertools.chain*Ü
	iterablesw
typing.Iterable[itertools._T]E
itertools._T"
builtins.object"builtins.object"builtins.object"typing.Iterable*Ô
__next__itertools.chain.__next__"E
itertools._T"
builtins.object"builtins.object"builtins.object*Å
selfw
itertools.chain[itertools._T]E
itertools._T"
builtins.object"builtins.object"builtins.object"itertools.chain*Ò
__iter__itertools.chain.__iter__"¢
itertools.chain.Selfw
itertools.chain[itertools._T]E
itertools._T"
builtins.object"builtins.object"builtins.object"itertools.chain"itertools.chain*•¢
itertools.chain.Selfw
itertools.chain[itertools._T]E
itertools._T"
builtins.object"builtins.object"builtins.object"itertools.chain"itertools.chain*®
from_iterableitertools.chain.from_iterable"w
itertools.chain[itertools._S]E
itertools._S"
builtins.object"builtins.object"builtins.object"itertools.chain*%
cls
	Type[Any]
Any"type*Ω∫
.typing.Iterable[typing.Iterable[itertools._S]]w
typing.Iterable[itertools._S]E
itertools._S"
builtins.object"builtins.object"builtins.object"typing.Iterable"typing.Iterable0:builtins.classmethodpP∞
Integralnumbers.Integral"numbers.Rational*Å
__int__numbers.Integral.__int__"
builtins.int"builtins.int*&$
numbers.Integral"numbers.Integral0:abc.abstractmethod@*u
	__index__numbers.Integral.__index__"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral*£
__pow__numbers.Integral.__pow__"
Any*&$
numbers.Integral"numbers.Integral*	
Any**&
Union[Any,None]
Any
None 0:abc.abstractmethod@*}

__lshift__numbers.Integral.__lshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*
__rlshift__numbers.Integral.__rlshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*}

__rshift__numbers.Integral.__rshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*
__rrshift__numbers.Integral.__rrshift__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*w
__and__numbers.Integral.__and__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*y
__rand__numbers.Integral.__rand__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*w
__xor__numbers.Integral.__xor__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*y
__rxor__numbers.Integral.__rxor__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*u
__or__numbers.Integral.__or__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*w
__ror__numbers.Integral.__ror__"
Any*&$
numbers.Integral"numbers.Integral*	
Any0:abc.abstractmethod@*r

__invert__numbers.Integral.__invert__"
Any*&$
numbers.Integral"numbers.Integral0:abc.abstractmethod@*q
	__float__numbers.Integral.__float__" 
builtins.float"builtins.float*&$
numbers.Integral"numbers.Integral*å
	numeratornumbers.Integral.numerator"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral0:builtins.property`*ê
denominatornumbers.Integral.denominator"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral0:builtins.property`
Interval(sklearn.utils._param_validation.Interval"+sklearn.utils._param_validation._Constraint*©
__init__1sklearn.utils._param_validation.Interval.__init__"
None*^
selfT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.Interval*•
typeö
NUnion[numbers.Real,Type[numbers.Integral],Type[numbers.Real],numbers.Integral]
numbers.Real"numbers.RealF
Type[numbers.Integral]$
numbers.Integral"numbers.Integral"type:
Type[numbers.Real]
numbers.Real"numbers.Real"type$
numbers.Integral"numbers.Integral*
leftu
'Union[builtins.float,None,builtins.int] 
builtins.float"builtins.float
None
builtins.int"builtins.int*Ä
rightu
'Union[builtins.float,None,builtins.int] 
builtins.float"builtins.float
None
builtins.int"builtins.int*”
closed∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*Ã

__contains__5sklearn.utils._param_validation.Interval.__contains__"
builtins.bool"builtins.bool*VT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.Interval*å	â	
≈Union[builtins.bool,TypeAlias[Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]]]]
builtins.bool"builtins.boolú
∞TypeAlias[Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]]]Õ
•Union[builtins.float,TypeAlias[numpy.floating[numpy._typing._16Bit]],TypeAlias[numpy.floating[numpy._typing._32Bit]],TypeAlias[numpy.floating[numpy._typing._64Bit]]] 
builtins.float"builtins.float®
/TypeAlias[numpy.floating[numpy._typing._16Bit]]d
$numpy.floating[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.floating"numpy.float16®
/TypeAlias[numpy.floating[numpy._typing._32Bit]]d
$numpy.floating[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.floating"numpy.float32®
/TypeAlias[numpy.floating[numpy._typing._64Bit]]d
$numpy.floating[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.floating"numpy.float64"sklearn._typing.Float*›
is_satisfied_by8sklearn.utils._param_validation.Interval.is_satisfied_by"
builtins.bool"builtins.bool*^
selfT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.Interval*
val
Any*±
__str__0sklearn.utils._param_validation.Interval.__str__"
builtins.str"builtins.str*VT
(sklearn.utils._param_validation.Interval"(sklearn.utils._param_validation.Interval˚

StrOptions*sklearn.utils._param_validation.StrOptions"'sklearn.utils._param_validation.Options*ó
__init__3sklearn.utils._param_validation.StrOptions.__init__"
None*b
selfX
*sklearn.utils._param_validation.StrOptions"*sklearn.utils._param_validation.StrOptions*U
optionsH
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.set*ê

deprecated~
&Union[builtins.set[builtins.str],None]H
builtins.set[builtins.str]
builtins.str"builtins.str"builtins.set
None ™
FeatureHasher.sklearn.feature_extraction._hash.FeatureHasher"sklearn.base.TransformerMixin"sklearn.base.BaseEstimator*ﬁ
__init__7sklearn.feature_extraction._hash.FeatureHasher.__init__"
None*j
self`
.sklearn.feature_extraction._hash.FeatureHasher".sklearn.feature_extraction._hash.FeatureHasher*Ö


n_featuresÚ	
ÒTypeAlias[Union[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]]‰
ÊUnion[builtins.int,TypeAlias[numpy.signedinteger[numpy._typing._8Bit]],TypeAlias[numpy.signedinteger[numpy._typing._16Bit]],TypeAlias[numpy.signedinteger[numpy._typing._32Bit]],TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]]
builtins.int"builtins.int∞
3TypeAlias[numpy.signedinteger[numpy._typing._8Bit]]k
(numpy.signedinteger[numpy._typing._8Bit]*
numpy._typing._8Bit"numpy._typing._8Bit"numpy.signedinteger"
numpy.int8µ
4TypeAlias[numpy.signedinteger[numpy._typing._16Bit]]n
)numpy.signedinteger[numpy._typing._16Bit],
numpy._typing._16Bit"numpy._typing._16Bit"numpy.signedinteger"numpy.int16µ
4TypeAlias[numpy.signedinteger[numpy._typing._32Bit]]n
)numpy.signedinteger[numpy._typing._32Bit],
numpy._typing._32Bit"numpy._typing._32Bit"numpy.signedinteger"numpy.int32µ
4TypeAlias[numpy.signedinteger[numpy._typing._64Bit]]n
)numpy.signedinteger[numpy._typing._64Bit],
numpy._typing._64Bit"numpy._typing._64Bit"numpy.signedinteger"numpy.int64"sklearn._typing.Int *.

input_type
builtins.str"builtins.str *5
dtype(
numpy.dtype[Any]
Any"numpy.dtype *4
alternate_sign
builtins.bool"builtins.bool *Ä
fit2sklearn.feature_extraction._hash.FeatureHasher.fit"…
3sklearn.feature_extraction._hash.FeatureHasher_Self`
.sklearn.feature_extraction._hash.FeatureHasher".sklearn.feature_extraction._hash.FeatureHasher".sklearn.feature_extraction._hash.FeatureHasher*‘
self…
3sklearn.feature_extraction._hash.FeatureHasher_Self`
.sklearn.feature_extraction._hash.FeatureHasher".sklearn.feature_extraction._hash.FeatureHasher".sklearn.feature_extraction._hash.FeatureHasher*
X
Any *
y
Any *¨
	transform8sklearn.feature_extraction._hash.FeatureHasher.transform"
Any*j
self`
.sklearn.feature_extraction._hash.FeatureHasher".sklearn.feature_extraction._hash.FeatureHasher*Ô
raw_X„
AUnion[typing.Iterator[Any],typing.Iterator[typing.Iterator[Any]]]0
typing.Iterator[Any]
Any"typing.Iteratorj
%typing.Iterator[typing.Iterator[Any]]0
typing.Iterator[Any]
Any"typing.Iterator"typing.Iteratorrö
_parameter_constraintsEsklearn.feature_extraction._hash.FeatureHasher._parameter_constraints9
builtins.dict[Any,Any]
Any
Any"builtins.dictª
_hashing_transform2sklearn.feature_extraction._hashing_fast.transform"ı
iTuple[builtins.int,builtins.list[builtins.int],builtins.list[builtins.int],builtins.list[builtins.float]]
builtins.int"builtins.intJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listP
builtins.list[builtins.float] 
builtins.float"builtins.float"builtins.list*
raw_X
Any*,

n_features
builtins.int"builtins.int*
dtype
Any*y
alternate_signc
!Union[builtins.bool,builtins.int]
builtins.bool"builtins.bool
builtins.int"builtins.int *(
seed
builtins.int"builtins.int *ú
__annotations__0sklearn.feature_extraction._hash.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*>
spmatrix)sklearn.feature_extraction._hash.spmatrix
Any*
npnumpy *2
sp#sklearn.feature_extraction._hash.sp
Any