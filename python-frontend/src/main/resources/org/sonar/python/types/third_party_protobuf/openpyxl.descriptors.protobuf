
openpyxl.descriptorsè

Descriptor$openpyxl.descriptors.base.Descriptor"builtins.object*¨
__init__-openpyxl.descriptors.base.Descriptor.__init__"
None*Ã
self¡
Bopenpyxl.descriptors.base.Descriptor[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"$openpyxl.descriptors.base.Descriptor*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None **
kw"
builtins.object"builtins.objectz38z39z310z311z312z313*–
__get__,openpyxl.descriptors.base.Descriptor.__get__"U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object*Ã
self¡
Bopenpyxl.descriptors.base.Descriptor[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"$openpyxl.descriptors.base.Descriptor*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*P
clsG
Union[builtins.type,None]
builtins.type"builtins.type
Nonez38z39z310z311z312z313*ì
__set__,openpyxl.descriptors.base.Descriptor.__set__"
None*Ã
self¡
Bopenpyxl.descriptors.base.Descriptor[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"$openpyxl.descriptors.base.Descriptor*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*`
valueU
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.objectz38z39z310z311z312z313Pj38j39j310j311j312j313rì
name)openpyxl.descriptors.base.Descriptor.nameD
Union[builtins.str,None]
builtins.str"builtins.str
None*38*39*310*311*312*313Ÿ1
Typedopenpyxl.descriptors.base.Typed"$openpyxl.descriptors.base.Descriptor2í
__init__(openpyxl.descriptors.base.Typed.__init__ù	
__init__(openpyxl.descriptors.base.Typed.__init__"
None*ï
selfä
Topenpyxl.descriptors.base.Typed[openpyxl.descriptors.base._T,Literal[builtins.bool]]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Typed*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool*,
nested
builtins.bool"builtins.bool 0:typing.overloadXü	
__init__(openpyxl.descriptors.base.Typed.__init__"
None*ï
selfä
Topenpyxl.descriptors.base.Typed[openpyxl.descriptors.base._T,Literal[builtins.bool]]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Typed*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool *,
nested
builtins.bool"builtins.bool 0:typing.overloadX"38"39"310"311"312"3132´
__get__'openpyxl.descriptors.base.Typed.__get__»
__get__'openpyxl.descriptors.base.Typed.__get__"ç
(Union[openpyxl.descriptors.base._T,None]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object
None*ï
selfä
Topenpyxl.descriptors.base.Typed[openpyxl.descriptors.base._T,Literal[builtins.bool]]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Typed*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*R
clsG
Union[builtins.type,None]
builtins.type"builtins.type
None 0:typing.overloadXè
__get__'openpyxl.descriptors.base.Typed.__get__"U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object*ï
selfä
Topenpyxl.descriptors.base.Typed[openpyxl.descriptors.base._T,Literal[builtins.bool]]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Typed*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*R
clsG
Union[builtins.type,None]
builtins.type"builtins.type
None 0:typing.overloadX"38"39"310"311"312"3132Æ
__set__'openpyxl.descriptors.base.Typed.__set__ä
__set__'openpyxl.descriptors.base.Typed.__set__"
None*ï
selfä
Topenpyxl.descriptors.base.Typed[openpyxl.descriptors.base._T,Literal[builtins.bool]]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Typed*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*ô
valueç
(Union[openpyxl.descriptors.base._T,None]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object
None0:typing.overloadX–
__set__'openpyxl.descriptors.base.Typed.__set__"
None*ï
selfä
Topenpyxl.descriptors.base.Typed[openpyxl.descriptors.base._T,Literal[builtins.bool]]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Typed*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*`
valueU
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object0:typing.overloadX"38"39"310"311"312"313Pj38j39j310j311j312j313r‡
expected_type-openpyxl.descriptors.base.Typed.expected_typeÉ
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type*38*39*310*311*312*313r•

allow_none*openpyxl.descriptors.base.Typed.allow_noneO
openpyxl.descriptors.base._N
builtins.bool"builtins.bool"builtins.bool*38*39*310*311*312*313rl
nested&openpyxl.descriptors.base.Typed.nested
builtins.bool"builtins.bool*38*39*310*311*312*313Ùá
Convertible%openpyxl.descriptors.base.Convertible"openpyxl.descriptors.base.Typed2‡
__init__.openpyxl.descriptors.base.Convertible.__init__Å	
__init__.openpyxl.descriptors.base.Convertible.__init__"
None*°
selfñ
Zopenpyxl.descriptors.base.Convertible[openpyxl.descriptors.base._T,Literal[builtins.bool]]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object:
Literal[builtins.bool]	
builtins.bool"builtins.bool"%openpyxl.descriptors.base.Convertible*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:typing.overloadXÉ	
__init__.openpyxl.descriptors.base.Convertible.__init__"
None*°
selfñ
Zopenpyxl.descriptors.base.Convertible[openpyxl.descriptors.base._T,Literal[builtins.bool]]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object:
Literal[builtins.bool]	
builtins.bool"builtins.bool"%openpyxl.descriptors.base.Convertible*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:typing.overloadX"38"39"310"311"312"3132õt
__set__-openpyxl.descriptors.base.Convertible.__set__ß
__set__-openpyxl.descriptors.base.Convertible.__set__"
None*∏
self≠
jopenpyxl.descriptors.base.Convertible[openpyxl.worksheet.cell_range.MultiCellRange,Literal[builtins.bool]]\
,openpyxl.worksheet.cell_range.MultiCellRange",openpyxl.worksheet.cell_range.MultiCellRange:
Literal[builtins.bool]	
builtins.bool"builtins.bool"%openpyxl.descriptors.base.Convertible*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*ç
valueÅ
êUnion[TypeAlias[Union[openpyxl.worksheet.cell_range.MultiCellRange,builtins.str,typing.Iterable[openpyxl.worksheet.cell_range.CellRange]]],None]ﬂ
ÑTypeAlias[Union[openpyxl.worksheet.cell_range.MultiCellRange,builtins.str,typing.Iterable[openpyxl.worksheet.cell_range.CellRange]]]õ
yUnion[openpyxl.worksheet.cell_range.MultiCellRange,builtins.str,typing.Iterable[openpyxl.worksheet.cell_range.CellRange]]\
,openpyxl.worksheet.cell_range.MultiCellRange",openpyxl.worksheet.cell_range.MultiCellRange
builtins.str"builtins.strü
8typing.Iterable[openpyxl.worksheet.cell_range.CellRange]R
'openpyxl.worksheet.cell_range.CellRange"'openpyxl.worksheet.cell_range.CellRange"typing.Iterable"6openpyxl.descriptors.base._ConvertibleToMultiCellRange
None0:typing.overloadXÖ

__set__-openpyxl.descriptors.base.Convertible.__set__"
None*∏
self≠
jopenpyxl.descriptors.base.Convertible[openpyxl.worksheet.cell_range.MultiCellRange,Literal[builtins.bool]]\
,openpyxl.worksheet.cell_range.MultiCellRange",openpyxl.worksheet.cell_range.MultiCellRange:
Literal[builtins.bool]	
builtins.bool"builtins.bool"%openpyxl.descriptors.base.Convertible*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*Î
valueﬂ
ÑTypeAlias[Union[openpyxl.worksheet.cell_range.MultiCellRange,builtins.str,typing.Iterable[openpyxl.worksheet.cell_range.CellRange]]]õ
yUnion[openpyxl.worksheet.cell_range.MultiCellRange,builtins.str,typing.Iterable[openpyxl.worksheet.cell_range.CellRange]]\
,openpyxl.worksheet.cell_range.MultiCellRange",openpyxl.worksheet.cell_range.MultiCellRange
builtins.str"builtins.strü
8typing.Iterable[openpyxl.worksheet.cell_range.CellRange]R
'openpyxl.worksheet.cell_range.CellRange"'openpyxl.worksheet.cell_range.CellRange"typing.Iterable"6openpyxl.descriptors.base._ConvertibleToMultiCellRange0:typing.overloadX∂
__set__-openpyxl.descriptors.base.Convertible.__set__"
None*®
selfù
òUnion[openpyxl.descriptors.base.Convertible[builtins.str,builtins.bool],openpyxl.descriptors.base.Convertible[openpyxl.drawing.fill.Blip,builtins.bool]]®
Aopenpyxl.descriptors.base.Convertible[builtins.str,builtins.bool]
builtins.str"builtins.str
builtins.bool"builtins.bool"%openpyxl.descriptors.base.Convertible“
Oopenpyxl.descriptors.base.Convertible[openpyxl.drawing.fill.Blip,builtins.bool]8
openpyxl.drawing.fill.Blip"openpyxl.drawing.fill.Blip
builtins.bool"builtins.bool"%openpyxl.descriptors.base.Convertible*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*-
value"
builtins.object"builtins.object0:typing.overloadX¥
__set__-openpyxl.descriptors.base.Convertible.__set__"
None*∂
self´
Bopenpyxl.descriptors.base.Convertible[builtins.bool,builtins.bool]
builtins.bool"builtins.bool
builtins.bool"builtins.bool"%openpyxl.descriptors.base.Convertible*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*ú
valueê
>TypeAlias[Union[builtins.bool,builtins.str,builtins.int,None]]ù
3Union[builtins.bool,builtins.str,builtins.int,None]
builtins.bool"builtins.bool
builtins.str"builtins.str
builtins.int"builtins.int
None",openpyxl.descriptors.base._ConvertibleToBool0:typing.overloadXÒ
__set__-openpyxl.descriptors.base.Convertible.__set__"
None*ÿ
selfÕ
Jopenpyxl.descriptors.base.Convertible[builtins.int,Literal[builtins.bool]]
builtins.int"builtins.int:
Literal[builtins.bool]	
builtins.bool"builtins.bool"%openpyxl.descriptors.base.Convertible*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*∑
value´
ôUnion[TypeAlias[Union[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]],None]Ä
çTypeAlias[Union[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]]æ

ÇUnion[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]
builtins.int"builtins.int
builtins.str"builtins.str÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer(
typing.SupportsInt"typing.SupportsIntB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex2
_typeshed.SupportsTrunc"_typeshed.SupportsTrunc"+openpyxl.descriptors.base._ConvertibleToInt
None0:typing.overloadX∆
__set__-openpyxl.descriptors.base.Convertible.__set__"
None*ÿ
selfÕ
Jopenpyxl.descriptors.base.Convertible[builtins.int,Literal[builtins.bool]]
builtins.int"builtins.int:
Literal[builtins.bool]	
builtins.bool"builtins.bool"%openpyxl.descriptors.base.Convertible*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*å
valueÄ
çTypeAlias[Union[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]]æ

ÇUnion[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]
builtins.int"builtins.int
builtins.str"builtins.str÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer(
typing.SupportsInt"typing.SupportsIntB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex2
_typeshed.SupportsTrunc"_typeshed.SupportsTrunc"+openpyxl.descriptors.base._ConvertibleToInt0:typing.overloadXë
__set__-openpyxl.descriptors.base.Convertible.__set__"
None*ﬁ
self”
Lopenpyxl.descriptors.base.Convertible[builtins.float,Literal[builtins.bool]] 
builtins.float"builtins.float:
Literal[builtins.bool]	
builtins.bool"builtins.bool"%openpyxl.descriptors.base.Convertible*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*—
value≈
ÖUnion[TypeAlias[Union[builtins.float,typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]]],None]Æ
˘TypeAlias[Union[builtins.float,typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]]]˛	
ÓUnion[builtins.float,typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]] 
builtins.float"builtins.float,
typing.SupportsFloat"typing.SupportsFloatB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
builtins.str"builtins.str÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer"-openpyxl.descriptors.base._ConvertibleToFloat
None0:typing.overloadX˙
__set__-openpyxl.descriptors.base.Convertible.__set__"
None*ﬁ
self”
Lopenpyxl.descriptors.base.Convertible[builtins.float,Literal[builtins.bool]] 
builtins.float"builtins.float:
Literal[builtins.bool]	
builtins.bool"builtins.bool"%openpyxl.descriptors.base.Convertible*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*∫
valueÆ
˘TypeAlias[Union[builtins.float,typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]]]˛	
ÓUnion[builtins.float,typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]] 
builtins.float"builtins.float,
typing.SupportsFloat"typing.SupportsFloatB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
builtins.str"builtins.str÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer"-openpyxl.descriptors.base._ConvertibleToFloat0:typing.overloadX‘
__set__-openpyxl.descriptors.base.Convertible.__set__"
None*°
selfñ
Zopenpyxl.descriptors.base.Convertible[openpyxl.descriptors.base._T,Literal[builtins.bool]]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object:
Literal[builtins.bool]	
builtins.bool"builtins.bool"%openpyxl.descriptors.base.Convertible*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*—
value≈
9Union[openpyxl.descriptors.base._T,builtins.int,Any,None]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object
builtins.int"builtins.int
Any
None0:typing.overloadX"38"39"310"311"312"313Pj38j39j310j311j312j313Ín
Maxopenpyxl.descriptors.base.Max"%openpyxl.descriptors.base.Convertible2“ 
__init__&openpyxl.descriptors.base.Max.__init__˘
__init__&openpyxl.descriptors.base.Max.__init__"
None*»
selfΩ
Bopenpyxl.descriptors.base.Max[builtins.int,Literal[builtins.bool]]
builtins.int"builtins.int:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Max*„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool*)
max 
builtins.float"builtins.float0:typing.overloadX˚
__init__&openpyxl.descriptors.base.Max.__init__"
None*»
selfΩ
Bopenpyxl.descriptors.base.Max[builtins.int,Literal[builtins.bool]]
builtins.int"builtins.int:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Max*„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool *)
max 
builtins.float"builtins.float0:typing.overloadXÅ
__init__&openpyxl.descriptors.base.Max.__init__"
None*Œ
self√
Dopenpyxl.descriptors.base.Max[builtins.float,Literal[builtins.bool]] 
builtins.float"builtins.float:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Max*Â
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam *J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool*)
max 
builtins.float"builtins.float0:typing.overloadXÉ
__init__&openpyxl.descriptors.base.Max.__init__"
None*Œ
self√
Dopenpyxl.descriptors.base.Max[builtins.float,Literal[builtins.bool]] 
builtins.float"builtins.float:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Max*Â
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam *L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool *)
max 
builtins.float"builtins.float0:typing.overloadX"38"39"310"311"312"3132∫I
__set__%openpyxl.descriptors.base.Max.__set__Ÿ
__set__%openpyxl.descriptors.base.Max.__set__"
None*»
selfΩ
Bopenpyxl.descriptors.base.Max[builtins.int,Literal[builtins.bool]]
builtins.int"builtins.int:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Max*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*∑
value´
ôUnion[TypeAlias[Union[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]],None]Ä
çTypeAlias[Union[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]]æ

ÇUnion[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]
builtins.int"builtins.int
builtins.str"builtins.str÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer(
typing.SupportsInt"typing.SupportsIntB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex2
_typeshed.SupportsTrunc"_typeshed.SupportsTrunc"+openpyxl.descriptors.base._ConvertibleToInt
None0:typing.overloadXÆ
__set__%openpyxl.descriptors.base.Max.__set__"
None*»
selfΩ
Bopenpyxl.descriptors.base.Max[builtins.int,Literal[builtins.bool]]
builtins.int"builtins.int:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Max*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*å
valueÄ
çTypeAlias[Union[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]]æ

ÇUnion[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]
builtins.int"builtins.int
builtins.str"builtins.str÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer(
typing.SupportsInt"typing.SupportsIntB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex2
_typeshed.SupportsTrunc"_typeshed.SupportsTrunc"+openpyxl.descriptors.base._ConvertibleToInt0:typing.overloadX˘
__set__%openpyxl.descriptors.base.Max.__set__"
None*Œ
self√
Dopenpyxl.descriptors.base.Max[builtins.float,Literal[builtins.bool]] 
builtins.float"builtins.float:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Max*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*—
value≈
ÖUnion[TypeAlias[Union[builtins.float,typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]]],None]Æ
˘TypeAlias[Union[builtins.float,typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]]]˛	
ÓUnion[builtins.float,typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]] 
builtins.float"builtins.float,
typing.SupportsFloat"typing.SupportsFloatB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
builtins.str"builtins.str÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer"-openpyxl.descriptors.base._ConvertibleToFloat
None0:typing.overloadX‚
__set__%openpyxl.descriptors.base.Max.__set__"
None*Œ
self√
Dopenpyxl.descriptors.base.Max[builtins.float,Literal[builtins.bool]] 
builtins.float"builtins.float:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Max*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*∫
valueÆ
˘TypeAlias[Union[builtins.float,typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]]]˛	
ÓUnion[builtins.float,typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]] 
builtins.float"builtins.float,
typing.SupportsFloat"typing.SupportsFloatB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
builtins.str"builtins.str÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer"-openpyxl.descriptors.base._ConvertibleToFloat0:typing.overloadX"38"39"310"311"312"313Pj38j39j310j311j312j313rﬁ
expected_type+openpyxl.descriptors.base.Max.expected_typeÉ
"Type[openpyxl.descriptors.base._M]U
openpyxl.descriptors.base._M"
builtins.object"builtins.object"builtins.object"type*38*39*310*311*312*313r£

allow_none(openpyxl.descriptors.base.Max.allow_noneO
openpyxl.descriptors.base._N
builtins.bool"builtins.bool"builtins.bool*38*39*310*311*312*313rf
max!openpyxl.descriptors.base.Max.max 
builtins.float"builtins.float*38*39*310*311*312*313Ín
Minopenpyxl.descriptors.base.Min"%openpyxl.descriptors.base.Convertible2“ 
__init__&openpyxl.descriptors.base.Min.__init__˘
__init__&openpyxl.descriptors.base.Min.__init__"
None*»
selfΩ
Bopenpyxl.descriptors.base.Min[builtins.int,Literal[builtins.bool]]
builtins.int"builtins.int:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Min*„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool*)
min 
builtins.float"builtins.float0:typing.overloadX˚
__init__&openpyxl.descriptors.base.Min.__init__"
None*»
selfΩ
Bopenpyxl.descriptors.base.Min[builtins.int,Literal[builtins.bool]]
builtins.int"builtins.int:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Min*„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool *)
min 
builtins.float"builtins.float0:typing.overloadXÅ
__init__&openpyxl.descriptors.base.Min.__init__"
None*Œ
self√
Dopenpyxl.descriptors.base.Min[builtins.float,Literal[builtins.bool]] 
builtins.float"builtins.float:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Min*Â
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam *J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool*)
min 
builtins.float"builtins.float0:typing.overloadXÉ
__init__&openpyxl.descriptors.base.Min.__init__"
None*Œ
self√
Dopenpyxl.descriptors.base.Min[builtins.float,Literal[builtins.bool]] 
builtins.float"builtins.float:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Min*Â
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam *L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool *)
min 
builtins.float"builtins.float0:typing.overloadX"38"39"310"311"312"3132∫I
__set__%openpyxl.descriptors.base.Min.__set__Ÿ
__set__%openpyxl.descriptors.base.Min.__set__"
None*»
selfΩ
Bopenpyxl.descriptors.base.Min[builtins.int,Literal[builtins.bool]]
builtins.int"builtins.int:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Min*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*∑
value´
ôUnion[TypeAlias[Union[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]],None]Ä
çTypeAlias[Union[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]]æ

ÇUnion[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]
builtins.int"builtins.int
builtins.str"builtins.str÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer(
typing.SupportsInt"typing.SupportsIntB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex2
_typeshed.SupportsTrunc"_typeshed.SupportsTrunc"+openpyxl.descriptors.base._ConvertibleToInt
None0:typing.overloadXÆ
__set__%openpyxl.descriptors.base.Min.__set__"
None*»
selfΩ
Bopenpyxl.descriptors.base.Min[builtins.int,Literal[builtins.bool]]
builtins.int"builtins.int:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Min*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*å
valueÄ
çTypeAlias[Union[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]]æ

ÇUnion[builtins.int,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],typing.SupportsInt,typing_extensions.SupportsIndex,_typeshed.SupportsTrunc]
builtins.int"builtins.int
builtins.str"builtins.str÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer(
typing.SupportsInt"typing.SupportsIntB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex2
_typeshed.SupportsTrunc"_typeshed.SupportsTrunc"+openpyxl.descriptors.base._ConvertibleToInt0:typing.overloadX˘
__set__%openpyxl.descriptors.base.Min.__set__"
None*Œ
self√
Dopenpyxl.descriptors.base.Min[builtins.float,Literal[builtins.bool]] 
builtins.float"builtins.float:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Min*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*—
value≈
ÖUnion[TypeAlias[Union[builtins.float,typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]]],None]Æ
˘TypeAlias[Union[builtins.float,typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]]]˛	
ÓUnion[builtins.float,typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]] 
builtins.float"builtins.float,
typing.SupportsFloat"typing.SupportsFloatB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
builtins.str"builtins.str÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer"-openpyxl.descriptors.base._ConvertibleToFloat
None0:typing.overloadX‚
__set__%openpyxl.descriptors.base.Min.__set__"
None*Œ
self√
Dopenpyxl.descriptors.base.Min[builtins.float,Literal[builtins.bool]] 
builtins.float"builtins.float:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Min*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*∫
valueÆ
˘TypeAlias[Union[builtins.float,typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]]]˛	
ÓUnion[builtins.float,typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str,TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]] 
builtins.float"builtins.float,
typing.SupportsFloat"typing.SupportsFloatB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
builtins.str"builtins.str÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer"-openpyxl.descriptors.base._ConvertibleToFloat0:typing.overloadX"38"39"310"311"312"313Pj38j39j310j311j312j313rﬁ
expected_type+openpyxl.descriptors.base.Min.expected_typeÉ
"Type[openpyxl.descriptors.base._M]U
openpyxl.descriptors.base._M"
builtins.object"builtins.object"builtins.object"type*38*39*310*311*312*313r£

allow_none(openpyxl.descriptors.base.Min.allow_noneO
openpyxl.descriptors.base._N
builtins.bool"builtins.bool"builtins.bool*38*39*310*311*312*313rf
min!openpyxl.descriptors.base.Min.min 
builtins.float"builtins.float*38*39*310*311*312*313ª&
MinMax openpyxl.descriptors.base.MinMax"openpyxl.descriptors.base.Min"openpyxl.descriptors.base.Max2•"
__init__)openpyxl.descriptors.base.MinMax.__init__≠
__init__)openpyxl.descriptors.base.MinMax.__init__"
None*Œ
self√
Eopenpyxl.descriptors.base.MinMax[builtins.int,Literal[builtins.bool]]
builtins.int"builtins.int:
Literal[builtins.bool]	
builtins.bool"builtins.bool" openpyxl.descriptors.base.MinMax*„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool*)
min 
builtins.float"builtins.float*)
max 
builtins.float"builtins.float0:typing.overloadXØ
__init__)openpyxl.descriptors.base.MinMax.__init__"
None*Œ
self√
Eopenpyxl.descriptors.base.MinMax[builtins.int,Literal[builtins.bool]]
builtins.int"builtins.int:
Literal[builtins.bool]	
builtins.bool"builtins.bool" openpyxl.descriptors.base.MinMax*„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool *)
min 
builtins.float"builtins.float*)
max 
builtins.float"builtins.float0:typing.overloadXµ
__init__)openpyxl.descriptors.base.MinMax.__init__"
None*‘
self…
Gopenpyxl.descriptors.base.MinMax[builtins.float,Literal[builtins.bool]] 
builtins.float"builtins.float:
Literal[builtins.bool]	
builtins.bool"builtins.bool" openpyxl.descriptors.base.MinMax*Â
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam *J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool*)
min 
builtins.float"builtins.float*)
max 
builtins.float"builtins.float0:typing.overloadX∑
__init__)openpyxl.descriptors.base.MinMax.__init__"
None*‘
self…
Gopenpyxl.descriptors.base.MinMax[builtins.float,Literal[builtins.bool]] 
builtins.float"builtins.float:
Literal[builtins.bool]	
builtins.bool"builtins.bool" openpyxl.descriptors.base.MinMax*Â
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam *L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool *)
min 
builtins.float"builtins.float*)
max 
builtins.float"builtins.float0:typing.overloadX"38"39"310"311"312"313Pj38j39j310j311j312j313r·
expected_type.openpyxl.descriptors.base.MinMax.expected_typeÉ
"Type[openpyxl.descriptors.base._M]U
openpyxl.descriptors.base._M"
builtins.object"builtins.object"builtins.object"type*38*39*310*311*312*313r¶

allow_none+openpyxl.descriptors.base.MinMax.allow_noneO
openpyxl.descriptors.base._N
builtins.bool"builtins.bool"builtins.bool*38*39*310*311*312*313Â
Setopenpyxl.descriptors.base.Set"$openpyxl.descriptors.base.Descriptor*í
__init__&openpyxl.descriptors.base.Set.__init__"
None*æ
self≥
;openpyxl.descriptors.base.Set[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"openpyxl.descriptors.base.Set*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *§
valuesó
-typing.Iterable[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"typing.Iterablez38z39z310z311z312z313*˛
__set__%openpyxl.descriptors.base.Set.__set__"
None*æ
self≥
;openpyxl.descriptors.base.Set[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"openpyxl.descriptors.base.Set*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*`
valueU
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.objectz38z39z310z311z312z313Pj38j39j310j311j312j313r‰
values$openpyxl.descriptors.base.Set.valuesó
-typing.Iterable[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"typing.Iterable*38*39*310*311*312*313Â
NoneSet!openpyxl.descriptors.base.NoneSet"openpyxl.descriptors.base.Set*„
__init__*openpyxl.descriptors.base.NoneSet.__init__"
None*∆
selfª
?openpyxl.descriptors.base.NoneSet[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"!openpyxl.descriptors.base.NoneSet*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *È
values‹
9typing.Iterable[Union[openpyxl.descriptors.base._T,None]]ç
(Union[openpyxl.descriptors.base._T,None]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object
None"typing.Iterablez38z39z310z311z312z313*ì
__set__)openpyxl.descriptors.base.NoneSet.__set__"
None*∆
selfª
?openpyxl.descriptors.base.NoneSet[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"!openpyxl.descriptors.base.NoneSet*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*Ë
value‹
>Union[openpyxl.descriptors.base._T,Literal[builtins.str],None]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object7
Literal[builtins.str]	
builtins.str"builtins.str
Nonez38z39z310z311z312z313Pj38j39j310j311j312j313…

Integer!openpyxl.descriptors.base.Integer"%openpyxl.descriptors.base.Convertible2ê
__init__*openpyxl.descriptors.base.Integer.__init__õ
__init__*openpyxl.descriptors.base.Integer.__init__"
None*•
selfö
9openpyxl.descriptors.base.Integer[Literal[builtins.bool]]:
Literal[builtins.bool]	
builtins.bool"builtins.bool"!openpyxl.descriptors.base.Integer*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:typing.overloadXù
__init__*openpyxl.descriptors.base.Integer.__init__"
None*•
selfö
9openpyxl.descriptors.base.Integer[Literal[builtins.bool]]:
Literal[builtins.bool]	
builtins.bool"builtins.bool"!openpyxl.descriptors.base.Integer*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:typing.overloadX"38"39"310"311"312"313Pj38j39j310j311j312j313rß

allow_none,openpyxl.descriptors.base.Integer.allow_noneO
openpyxl.descriptors.base._N
builtins.bool"builtins.bool"builtins.bool*38*39*310*311*312*313rò
expected_type/openpyxl.descriptors.base.Integer.expected_type:
Type[builtins.int]
builtins.int"builtins.int"type*38*39*310*311*312*313π

Floatopenpyxl.descriptors.base.Float"%openpyxl.descriptors.base.Convertible2Ç
__init__(openpyxl.descriptors.base.Float.__init__ï
__init__(openpyxl.descriptors.base.Float.__init__"
None*°
selfñ
7openpyxl.descriptors.base.Float[Literal[builtins.bool]]:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Float*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:typing.overloadXó
__init__(openpyxl.descriptors.base.Float.__init__"
None*°
selfñ
7openpyxl.descriptors.base.Float[Literal[builtins.bool]]:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Float*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:typing.overloadX"38"39"310"311"312"313Pj38j39j310j311j312j313r•

allow_none*openpyxl.descriptors.base.Float.allow_noneO
openpyxl.descriptors.base._N
builtins.bool"builtins.bool"builtins.bool*38*39*310*311*312*313rú
expected_type-openpyxl.descriptors.base.Float.expected_type@
Type[builtins.float] 
builtins.float"builtins.float"type*38*39*310*311*312*313¶
Boolopenpyxl.descriptors.base.Bool"%openpyxl.descriptors.base.Convertible*¯
__set__&openpyxl.descriptors.base.Bool.__set__"
None*ü
selfî
6openpyxl.descriptors.base.Bool[Literal[builtins.bool]]:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Bool*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*˜
valueÎ
JUnion[TypeAlias[Union[builtins.bool,builtins.str,builtins.int,None]],None]ê
>TypeAlias[Union[builtins.bool,builtins.str,builtins.int,None]]ù
3Union[builtins.bool,builtins.str,builtins.int,None]
builtins.bool"builtins.bool
builtins.str"builtins.str
builtins.int"builtins.int
None",openpyxl.descriptors.base._ConvertibleToBool
Nonez38z39z310z311z312z3132˚
__init__'openpyxl.descriptors.base.Bool.__init__í
__init__'openpyxl.descriptors.base.Bool.__init__"
None*ü
selfî
6openpyxl.descriptors.base.Bool[Literal[builtins.bool]]:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Bool*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:typing.overloadXî
__init__'openpyxl.descriptors.base.Bool.__init__"
None*ü
selfî
6openpyxl.descriptors.base.Bool[Literal[builtins.bool]]:
Literal[builtins.bool]	
builtins.bool"builtins.bool"openpyxl.descriptors.base.Bool*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:typing.overloadX"38"39"310"311"312"313Pj38j39j310j311j312j313rò
expected_type,openpyxl.descriptors.base.Bool.expected_type=
Type[builtins.bool]
builtins.bool"builtins.bool"type*38*39*310*311*312*313r§

allow_none)openpyxl.descriptors.base.Bool.allow_noneO
openpyxl.descriptors.base._N
builtins.bool"builtins.bool"builtins.bool*38*39*310*311*312*313∏

String openpyxl.descriptors.base.String"openpyxl.descriptors.base.Typed2â
__init__)openpyxl.descriptors.base.String.__init__ò
__init__)openpyxl.descriptors.base.String.__init__"
None*£
selfò
8openpyxl.descriptors.base.String[Literal[builtins.bool]]:
Literal[builtins.bool]	
builtins.bool"builtins.bool" openpyxl.descriptors.base.String*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:typing.overloadXö
__init__)openpyxl.descriptors.base.String.__init__"
None*£
selfò
8openpyxl.descriptors.base.String[Literal[builtins.bool]]:
Literal[builtins.bool]	
builtins.bool"builtins.bool" openpyxl.descriptors.base.String*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:typing.overloadX"38"39"310"311"312"313Pj38j39j310j311j312j313r¶

allow_none+openpyxl.descriptors.base.String.allow_noneO
openpyxl.descriptors.base._N
builtins.bool"builtins.bool"builtins.bool*38*39*310*311*312*313ró
expected_type.openpyxl.descriptors.base.String.expected_type:
Type[builtins.str]
builtins.str"builtins.str"type*38*39*310*311*312*313ç
Textopenpyxl.descriptors.base.Text" openpyxl.descriptors.base.String"%openpyxl.descriptors.base.ConvertiblePj38j39j310j311j312j313¶
ASCIIopenpyxl.descriptors.base.ASCII"openpyxl.descriptors.base.Typed*ù
__init__(openpyxl.descriptors.base.ASCII.__init__"
None*º
self±
=openpyxl.descriptors.base.ASCII[openpyxl.descriptors.base._N]O
openpyxl.descriptors.base._N
builtins.bool"builtins.bool"builtins.bool"openpyxl.descriptors.base.ASCII*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *0

allow_none
builtins.bool"builtins.bool z38z39z310z311z312z313Pj38j39j310j311j312j313rú
expected_type-openpyxl.descriptors.base.ASCII.expected_type@
Type[builtins.bytes] 
builtins.bytes"builtins.bytes"type*38*39*310*311*312*313π
Tupleopenpyxl.descriptors.base.Tuple"openpyxl.descriptors.base.Typed*ù
__init__(openpyxl.descriptors.base.Tuple.__init__"
None*º
self±
=openpyxl.descriptors.base.Tuple[openpyxl.descriptors.base._N]O
openpyxl.descriptors.base._N
builtins.bool"builtins.bool"builtins.bool"openpyxl.descriptors.base.Tuple*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *0

allow_none
builtins.bool"builtins.bool z38z39z310z311z312z313Pj38j39j310j311j312j313rØ
expected_type-openpyxl.descriptors.base.Tuple.expected_typeS
Type[builtins.tuple[Any]].
builtins.tuple[Any]
Any"builtins.tuple"type*38*39*310*311*312*313‹
Length openpyxl.descriptors.base.Length"$openpyxl.descriptors.base.Descriptor*Û
__init__)openpyxl.descriptors.base.Length.__init__"
None*ª
self∞
>openpyxl.descriptors.base.Length[openpyxl.descriptors.base._L]L
openpyxl.descriptors.base._L
typing.Sized"typing.Sized"typing.Sized" openpyxl.descriptors.base.Length*.
name"
builtins.object"builtins.object *(
length
builtins.int"builtins.intz38z39z310z311z312z313*ı
__set__(openpyxl.descriptors.base.Length.__set__"
None*ª
self∞
>openpyxl.descriptors.base.Length[openpyxl.descriptors.base._L]L
openpyxl.descriptors.base._L
typing.Sized"typing.Sized"typing.Sized" openpyxl.descriptors.base.Length*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*W
valueL
openpyxl.descriptors.base._L
typing.Sized"typing.Sized"typing.Sizedz38z39z310z311z312z313Pj38j39j310j311j312j313‡
Default!openpyxl.descriptors.base.Default"openpyxl.descriptors.base.Typed*è	
__init__*openpyxl.descriptors.base.Default.__init__"
None*¥
self©
\openpyxl.descriptors.base.Default[openpyxl.descriptors.base._T,openpyxl.descriptors.base._N]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.objectO
openpyxl.descriptors.base._N
builtins.bool"builtins.bool"builtins.bool"!openpyxl.descriptors.base.Default*.
name"
builtins.object"builtins.object *„
expected_typeœ
gTypeAlias[Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]]≥
\Union[Type[openpyxl.descriptors.base._T],builtins.tuple[Type[openpyxl.descriptors.base._T]]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type 
2builtins.tuple[Type[openpyxl.descriptors.base._T]]É
"Type[openpyxl.descriptors.base._T]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object"type"builtins.tuple",openpyxl.descriptors.base._ExpectedTypeParam*0

allow_none
builtins.bool"builtins.bool *2
defaults"
builtins.object"builtins.object z38z39z310z311z312z313*‡
__call__*openpyxl.descriptors.base.Default.__call__"U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.object*¥
self©
\openpyxl.descriptors.base.Default[openpyxl.descriptors.base._T,openpyxl.descriptors.base._N]U
openpyxl.descriptors.base._T"
builtins.object"builtins.object"builtins.objectO
openpyxl.descriptors.base._N
builtins.bool"builtins.bool"builtins.bool"!openpyxl.descriptors.base.Defaultz38z39z310z311z312z313Pj38j39j310j311j312j313Ó

Aliasopenpyxl.descriptors.base.Alias"$openpyxl.descriptors.base.Descriptor*—
__init__(openpyxl.descriptors.base.Alias.__init__"
None*L
selfB
openpyxl.descriptors.base.Alias"openpyxl.descriptors.base.Alias*'
alias
builtins.str"builtins.strz38z39z310z311z312z313*È
__set__'openpyxl.descriptors.base.Alias.__set__"
None*L
selfB
openpyxl.descriptors.base.Alias"openpyxl.descriptors.base.Alias*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*<
value1
TypeAlias[Any]
Any"_typeshed.Incompletez38z39z310z311z312z313*◊
__get__'openpyxl.descriptors.base.Alias.__get__"
Any*L
selfB
openpyxl.descriptors.base.Alias"openpyxl.descriptors.base.Alias*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*+
cls"
builtins.object"builtins.objectz38z39z310z311z312z313j38j39j310j311j312j313rh
alias%openpyxl.descriptors.base.Alias.alias
builtins.str"builtins.str*38*39*310*311*312*313†F
MatchPattern&openpyxl.descriptors.base.MatchPattern"$openpyxl.descriptors.base.Descriptor2˜#
__init__/openpyxl.descriptors.base.MatchPattern.__init__˙
__init__/openpyxl.descriptors.base.MatchPattern.__init__"
None*⁄
selfœ
Kopenpyxl.descriptors.base.MatchPattern[builtins.str,Literal[builtins.bool]]
builtins.str"builtins.str:
Literal[builtins.bool]	
builtins.bool"builtins.bool"&openpyxl.descriptors.base.MatchPattern*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *¢
patternî
,Union[builtins.str,re.Pattern[builtins.str]]
builtins.str"builtins.strD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:typing.overloadX¸
__init__/openpyxl.descriptors.base.MatchPattern.__init__"
None*⁄
selfœ
Kopenpyxl.descriptors.base.MatchPattern[builtins.str,Literal[builtins.bool]]
builtins.str"builtins.str:
Literal[builtins.bool]	
builtins.bool"builtins.bool"&openpyxl.descriptors.base.MatchPattern*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *¢
patternî
,Union[builtins.str,re.Pattern[builtins.str]]
builtins.str"builtins.strD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:typing.overloadXŒ
__init__/openpyxl.descriptors.base.MatchPattern.__init__"
None*†	
selfï	
’openpyxl.descriptors.base.MatchPattern[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],Literal[builtins.bool]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer:
Literal[builtins.bool]	
builtins.bool"builtins.bool"&openpyxl.descriptors.base.MatchPattern*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *∞
pattern¢
0Union[builtins.bytes,re.Pattern[builtins.bytes]] 
builtins.bytes"builtins.bytesJ
re.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"
re.Pattern*J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:typing.overloadX–
__init__/openpyxl.descriptors.base.MatchPattern.__init__"
None*†	
selfï	
’openpyxl.descriptors.base.MatchPattern[TypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]],Literal[builtins.bool]]÷
ñTypeAlias[Union[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]]]û
ãUnion[builtins.bytes,TypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]] 
builtins.bytes"builtins.bytesÈ
uTypeAlias[Union[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer]]“
jUnion[builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap,ctypes._CData,pickle.PickleBuffer](
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap
ctypes._CData"ctypes._CData*
pickle.PickleBuffer"pickle.PickleBuffer"_typeshed.WriteableBuffer"_typeshed.ReadableBuffer:
Literal[builtins.bool]	
builtins.bool"builtins.bool"&openpyxl.descriptors.base.MatchPattern*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *∞
pattern¢
0Union[builtins.bytes,re.Pattern[builtins.bytes]] 
builtins.bytes"builtins.bytesJ
re.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"
re.Pattern*L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:typing.overloadX"38"39"310"311"312"3132‹
__get__.openpyxl.descriptors.base.MatchPattern.__get__›
__get__.openpyxl.descriptors.base.MatchPattern.__get__"ç
(Union[openpyxl.descriptors.base._P,None]U
openpyxl.descriptors.base._P"
builtins.object"builtins.object"builtins.object
None*£
selfò
[openpyxl.descriptors.base.MatchPattern[openpyxl.descriptors.base._P,Literal[builtins.bool]]U
openpyxl.descriptors.base._P"
builtins.object"builtins.object"builtins.object:
Literal[builtins.bool]	
builtins.bool"builtins.bool"&openpyxl.descriptors.base.MatchPattern*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*R
clsG
Union[builtins.type,None]
builtins.type"builtins.type
None 0:typing.overloadX§
__get__.openpyxl.descriptors.base.MatchPattern.__get__"U
openpyxl.descriptors.base._P"
builtins.object"builtins.object"builtins.object*£
selfò
[openpyxl.descriptors.base.MatchPattern[openpyxl.descriptors.base._P,Literal[builtins.bool]]U
openpyxl.descriptors.base._P"
builtins.object"builtins.object"builtins.object:
Literal[builtins.bool]	
builtins.bool"builtins.bool"&openpyxl.descriptors.base.MatchPattern*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*R
clsG
Union[builtins.type,None]
builtins.type"builtins.type
None 0:typing.overloadX"38"39"310"311"312"3132ﬂ
__set__.openpyxl.descriptors.base.MatchPattern.__set__ü
__set__.openpyxl.descriptors.base.MatchPattern.__set__"
None*£
selfò
[openpyxl.descriptors.base.MatchPattern[openpyxl.descriptors.base._P,Literal[builtins.bool]]U
openpyxl.descriptors.base._P"
builtins.object"builtins.object"builtins.object:
Literal[builtins.bool]	
builtins.bool"builtins.bool"&openpyxl.descriptors.base.MatchPattern*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*ô
valueç
(Union[openpyxl.descriptors.base._P,None]U
openpyxl.descriptors.base._P"
builtins.object"builtins.object"builtins.object
None0:typing.overloadXÂ
__set__.openpyxl.descriptors.base.MatchPattern.__set__"
None*£
selfò
[openpyxl.descriptors.base.MatchPattern[openpyxl.descriptors.base._P,Literal[builtins.bool]]U
openpyxl.descriptors.base._P"
builtins.object"builtins.object"builtins.object:
Literal[builtins.bool]	
builtins.bool"builtins.bool"&openpyxl.descriptors.base.MatchPattern*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*`
valueU
openpyxl.descriptors.base._P"
builtins.object"builtins.object"builtins.object0:typing.overloadX"38"39"310"311"312"313Pj38j39j310j311j312j313r¨

allow_none1openpyxl.descriptors.base.MatchPattern.allow_noneO
openpyxl.descriptors.base._N
builtins.bool"builtins.bool"builtins.bool*38*39*310*311*312*313r≤
test_pattern3openpyxl.descriptors.base.MatchPattern.test_pattern–
:Union[re.Pattern[builtins.bytes],re.Pattern[builtins.str]]J
re.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"
re.PatternD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*38*39*310*311*312*313rÑ
pattern.openpyxl.descriptors.base.MatchPattern.pattern¨
VUnion[builtins.str,re.Pattern[builtins.str],builtins.bytes,re.Pattern[builtins.bytes]]
builtins.str"builtins.strD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern 
builtins.bytes"builtins.bytesJ
re.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"
re.Pattern*38*39*310*311*312*313≈
DateTime"openpyxl.descriptors.base.DateTime"openpyxl.descriptors.base.Typed2ó
__init__+openpyxl.descriptors.base.DateTime.__init__û
__init__+openpyxl.descriptors.base.DateTime.__init__"
None*ß
selfú
:openpyxl.descriptors.base.DateTime[Literal[builtins.bool]]:
Literal[builtins.bool]	
builtins.bool"builtins.bool""openpyxl.descriptors.base.DateTime*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *J

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool0:typing.overloadX†
__init__+openpyxl.descriptors.base.DateTime.__init__"
None*ß
selfú
:openpyxl.descriptors.base.DateTime[Literal[builtins.bool]]:
Literal[builtins.bool]	
builtins.bool"builtins.bool""openpyxl.descriptors.base.DateTime*P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *L

allow_none:
Literal[builtins.bool]	
builtins.bool"builtins.bool 0:typing.overloadX"38"39"310"311"312"3132Â

__set__*openpyxl.descriptors.base.DateTime.__set__è
__set__*openpyxl.descriptors.base.DateTime.__set__"
None*ß
selfú
:openpyxl.descriptors.base.DateTime[Literal[builtins.bool]]:
Literal[builtins.bool]	
builtins.bool"builtins.bool""openpyxl.descriptors.base.DateTime*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*â
value~
*Union[datetime.datetime,builtins.str,None]&
datetime.datetime"datetime.datetime
builtins.str"builtins.str
None0:typing.overloadXˇ
__set__*openpyxl.descriptors.base.DateTime.__set__"
None*ß
selfú
:openpyxl.descriptors.base.DateTime[Literal[builtins.bool]]:
Literal[builtins.bool]	
builtins.bool"builtins.bool""openpyxl.descriptors.base.DateTime*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*z
valueo
%Union[datetime.datetime,builtins.str]&
datetime.datetime"datetime.datetime
builtins.str"builtins.str0:typing.overloadX"38"39"310"311"312"313Pj38j39j310j311j312j313r®

allow_none-openpyxl.descriptors.base.DateTime.allow_noneO
openpyxl.descriptors.base._N
builtins.bool"builtins.bool"builtins.bool*38*39*310*311*312*313r®
expected_type0openpyxl.descriptors.base.DateTime.expected_typeI
Type[datetime.datetime]&
datetime.datetime"datetime.datetime"type*38*39*310*311*312*313ó
Sequence&openpyxl.descriptors.sequence.Sequence"$openpyxl.descriptors.base.Descriptor*“
__set__.openpyxl.descriptors.sequence.Sequence.__set__"
None*Z
selfP
&openpyxl.descriptors.sequence.Sequence"&openpyxl.descriptors.sequence.Sequence*Ç
instanceÛ
QUnion[openpyxl.descriptors.serialisable.Serialisable,openpyxl.descriptors.Strict]`
.openpyxl.descriptors.serialisable.Serialisable".openpyxl.descriptors.serialisable.Serialisable:
openpyxl.descriptors.Strict"openpyxl.descriptors.Strict*
seq
Anyz38z39z310z311z312z313*œ
to_tree.openpyxl.descriptors.sequence.Sequence.to_tree"Ö
*typing.Generator[TypeAlias[Any],None,None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None
None"typing.Generator*Z
selfP
&openpyxl.descriptors.sequence.Sequence"&openpyxl.descriptors.sequence.Sequence*
tagname
Any*
obj
Any*l
	namespace[
Union[TypeAlias[Any],None]1
TypeAlias[Any]
Any"_typeshed.Incomplete
None z38z39z310z311z312z313j38j39j310j311j312j313r
expected_type4openpyxl.descriptors.sequence.Sequence.expected_type
	Type[Any]
Any"type*38*39*310*311*312*313rå
	seq_types0openpyxl.descriptors.sequence.Sequence.seq_types1
TypeAlias[Any]
Any"_typeshed.Incomplete*38*39*310*311*312*313ru
idx_base/openpyxl.descriptors.sequence.Sequence.idx_base
builtins.int"builtins.int*38*39*310*311*312*313rs
unique-openpyxl.descriptors.sequence.Sequence.unique
builtins.bool"builtins.bool*38*39*310*311*312*313÷

MetaStrictopenpyxl.descriptors.MetaStrict"builtins.type*|
__new__'openpyxl.descriptors.MetaStrict.__new__*
cls*
clsname*	
bases*
methodsz38z39z310z311z312z313j38j39j310j311j312j313È
MetaSerialisable%openpyxl.descriptors.MetaSerialisable"builtins.type*Ç
__new__-openpyxl.descriptors.MetaSerialisable.__new__*
cls*
clsname*	
bases*
methodsz38z39z310z311z312z313j38j39j310j311j312j313u
Strictopenpyxl.descriptors.Strict"builtins.object@bopenpyxl.descriptors.MetaStrictj38j39j310j311j312j313*ë
__path__openpyxl.descriptors.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*38*39*310*311*312*313*¨
__annotations__$openpyxl.descriptors.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313