
pandas.io.apiÒÄ
	ExcelFilepandas.io.excel._base.ExcelFile"builtins.object*Ç

__init__(pandas.io.excel._base.ExcelFile.__init__"
None*L
selfB
pandas.io.excel._base.ExcelFile"pandas.io.excel._base.ExcelFile*É
io˙
xUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.bytes],builtins.bytes]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer 
builtins.bytes"builtins.bytes*‰
engine’
cUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *Ü
storage_optionsÓ
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions *B

__fspath__*pandas.io.excel._base.ExcelFile.__fspath__*
self*—
book$pandas.io.excel._base.ExcelFile.book">
Union[Any,Any,Any,Any]
Any
Any
Any
Any*L
selfB
pandas.io.excel._base.ExcelFile"pandas.io.excel._base.ExcelFile0:builtins.property`*ƒ
sheet_names+pandas.io.excel._base.ExcelFile.sheet_names"¢
/builtins.list[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"builtins.list*L
selfB
pandas.io.excel._base.ExcelFile"pandas.io.excel._base.ExcelFile0:builtins.property`*Ü
close%pandas.io.excel._base.ExcelFile.close"
None*L
selfB
pandas.io.excel._base.ExcelFile"pandas.io.excel._base.ExcelFile*Ÿ
	__enter__)pandas.io.excel._base.ExcelFile.__enter__"ç
$pandas.io.excel._base.ExcelFile.SelfB
pandas.io.excel._base.ExcelFile"pandas.io.excel._base.ExcelFile"pandas.io.excel._base.ExcelFile*êç
$pandas.io.excel._base.ExcelFile.SelfB
pandas.io.excel._base.ExcelFile"pandas.io.excel._base.ExcelFile"pandas.io.excel._base.ExcelFile*›
__exit__(pandas.io.excel._base.ExcelFile.__exit__"
None*DB
pandas.io.excel._base.ExcelFile"pandas.io.excel._base.ExcelFile*ìê
(Union[Type[builtins.BaseException],None]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type
None*db
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*[Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None*Ç
__del__'pandas.io.excel._base.ExcelFile.__del__"
None*DB
pandas.io.excel._base.ExcelFile"pandas.io.excel._base.ExcelFile2Åd
parse%pandas.io.excel._base.ExcelFile.parseè3
parse%pandas.io.excel._base.ExcelFile.parse"˙
Kbuiltins.dict[Union[builtins.int,builtins.str],pandas.core.frame.DataFrame]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame"builtins.dict*L
selfB
pandas.io.excel._base.ExcelFile"pandas.io.excel._base.ExcelFile*ˇ

sheet_nameÓ
;Union[builtins.list[Union[builtins.int,builtins.str]],None]¢
/builtins.list[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"builtins.list
None*¡
header≤
6Union[builtins.int,typing.Sequence[builtins.int],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence
None *è
namesÅ
ùUnion[TypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]],None]“
ëTypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]]ò
ÜUnion[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]ù
0typing.MutableSequence[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSequence9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayç
(builtins.tuple[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.tuple 
builtins.range"builtins.range"pandas._typing.ListLikeHashable
None *ƒ
	index_col≤
6Union[builtins.int,typing.Sequence[builtins.int],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence
None *ﬂ

usecolsœ

ÑUnion[builtins.str,TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]]
builtins.str"builtins.str•
TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]é
ÂUnion[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]\
$typing.MutableSequence[builtins.str]
builtins.str"builtins.str"typing.MutableSequenceL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceD
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayK
CallableType[builtins.function]&
builtins.function"builtins.function
None"pandas._typing.UsecolsArgType *é

converters˚
[Union[builtins.dict[Union[builtins.int,builtins.str],CallableType[builtins.function]],None]è
Obuiltins.dict[Union[builtins.int,builtins.str],CallableType[builtins.function]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict
None *ß
true_valuesì
,Union[typing.Iterable[typing.Hashable],None]W
 typing.Iterable[typing.Hashable]"
typing.Hashable"typing.Hashable"typing.Iterable
None *®
false_valuesì
,Union[typing.Iterable[typing.Hashable],None]W
 typing.Iterable[typing.Hashable]"
typing.Hashable"typing.Hashable"typing.Iterable
None *∞
skiprowsü
VUnion[builtins.int,typing.Sequence[builtins.int],CallableType[builtins.function],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function
None *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Î
	na_valuesŸ
rUnion[typing.Sequence[builtins.str],builtins.dict[Union[builtins.str,builtins.int],typing.Sequence[builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequenceê
Mbuiltins.dict[Union[builtins.str,builtins.int],typing.Sequence[builtins.str]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.intN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"builtins.dict *Ø
parse_datesõ
„Union[builtins.bool,typing.Sequence[builtins.int],typing.Sequence[Union[typing.Sequence[builtins.str],typing.Sequence[builtins.int]]],builtins.dict[builtins.str,Union[typing.Sequence[builtins.int],builtins.list[builtins.str]]]]
builtins.bool"builtins.boolN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequenceœ
Styping.Sequence[Union[typing.Sequence[builtins.str],typing.Sequence[builtins.int]]]Ê
BUnion[typing.Sequence[builtins.str],typing.Sequence[builtins.int]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.SequenceN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"typing.SequenceÓ
\builtins.dict[builtins.str,Union[typing.Sequence[builtins.int],builtins.list[builtins.str]]]
builtins.str"builtins.str‡
@Union[typing.Sequence[builtins.int],builtins.list[builtins.str]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"builtins.dict *ö
date_parserÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *U
	thousandsD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
commentD
Union[builtins.str,None]
builtins.str"builtins.str
None *.

skipfooter
builtins.int"builtins.int *5
keep_default_na
builtins.bool"builtins.bool */
	na_filter
builtins.bool"builtins.bool *
kwds
Any0:typing.overloadXæ0
parse%pandas.io.excel._base.ExcelFile.parse":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*L
selfB
pandas.io.excel._base.ExcelFile"pandas.io.excel._base.ExcelFile*p

sheet_name`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str*¡
header≤
6Union[builtins.int,typing.Sequence[builtins.int],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence
None *è
namesÅ
ùUnion[TypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]],None]“
ëTypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]]ò
ÜUnion[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]ù
0typing.MutableSequence[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSequence9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayç
(builtins.tuple[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.tuple 
builtins.range"builtins.range"pandas._typing.ListLikeHashable
None *ƒ
	index_col≤
6Union[builtins.int,typing.Sequence[builtins.int],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence
None *ﬂ

usecolsœ

ÑUnion[builtins.str,TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]]
builtins.str"builtins.str•
TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]é
ÂUnion[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]\
$typing.MutableSequence[builtins.str]
builtins.str"builtins.str"typing.MutableSequenceL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceD
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayK
CallableType[builtins.function]&
builtins.function"builtins.function
None"pandas._typing.UsecolsArgType *é

converters˚
[Union[builtins.dict[Union[builtins.int,builtins.str],CallableType[builtins.function]],None]è
Obuiltins.dict[Union[builtins.int,builtins.str],CallableType[builtins.function]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict
None *ß
true_valuesì
,Union[typing.Iterable[typing.Hashable],None]W
 typing.Iterable[typing.Hashable]"
typing.Hashable"typing.Hashable"typing.Iterable
None *®
false_valuesì
,Union[typing.Iterable[typing.Hashable],None]W
 typing.Iterable[typing.Hashable]"
typing.Hashable"typing.Hashable"typing.Iterable
None *∞
skiprowsü
VUnion[builtins.int,typing.Sequence[builtins.int],CallableType[builtins.function],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function
None *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Î
	na_valuesŸ
rUnion[typing.Sequence[builtins.str],builtins.dict[Union[builtins.str,builtins.int],typing.Sequence[builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequenceê
Mbuiltins.dict[Union[builtins.str,builtins.int],typing.Sequence[builtins.str]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.intN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"builtins.dict *Ø
parse_datesõ
„Union[builtins.bool,typing.Sequence[builtins.int],typing.Sequence[Union[typing.Sequence[builtins.str],typing.Sequence[builtins.int]]],builtins.dict[builtins.str,Union[typing.Sequence[builtins.int],builtins.list[builtins.str]]]]
builtins.bool"builtins.boolN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequenceœ
Styping.Sequence[Union[typing.Sequence[builtins.str],typing.Sequence[builtins.int]]]Ê
BUnion[typing.Sequence[builtins.str],typing.Sequence[builtins.int]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.SequenceN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"typing.SequenceÓ
\builtins.dict[builtins.str,Union[typing.Sequence[builtins.int],builtins.list[builtins.str]]]
builtins.str"builtins.str‡
@Union[typing.Sequence[builtins.int],builtins.list[builtins.str]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"builtins.dict *ö
date_parserÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *U
	thousandsD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
commentD
Union[builtins.str,None]
builtins.str"builtins.str
None *.

skipfooter
builtins.int"builtins.int *5
keep_default_na
builtins.bool"builtins.bool */
	na_filter
builtins.bool"builtins.bool *
kwds
Any0:typing.overloadXrX
engine&pandas.io.excel._base.ExcelFile.engine&
builtins.ellipsis"builtins.ellipsisr•
io"pandas.io.excel._base.ExcelFile.io˙
xUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.bytes],builtins.bytes]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer 
builtins.bytes"builtins.bytes’*
ExcelWriter!pandas.io.excel._base.ExcelWriter"builtins.object*ù
__init__*pandas.io.excel._base.ExcelWriter.__init__"
None*P
selfF
!pandas.io.excel._base.ExcelWriter"!pandas.io.excel._base.ExcelWriter*è
pathÑ
ÅUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.WriteExcelBuffer,pandas.io.excel._base.ExcelWriter]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathB
pandas._typing.WriteExcelBuffer"pandas._typing.WriteExcelBufferF
!pandas.io.excel._base.ExcelWriter"!pandas.io.excel._base.ExcelWriter*‰
engine’
cUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *W
date_formatD
Union[builtins.str,None]
builtins.str"builtins.str
None *[
datetime_formatD
Union[builtins.str,None]
builtins.str"builtins.str
None *µ
mode®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *Ü
storage_optionsÓ
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions *Ì
if_sheet_exists’
cUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *®
engine_kwargsí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *Ö
supported_extensions6pandas.io.excel._base.ExcelWriter.supported_extensions"L
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple*P
selfF
!pandas.io.excel._base.ExcelWriter"!pandas.io.excel._base.ExcelWriter0:builtins.property`*ï
engine(pandas.io.excel._base.ExcelWriter.engine"˜
HUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*P
selfF
!pandas.io.excel._base.ExcelWriter"!pandas.io.excel._base.ExcelWriter0:builtins.property`*Ù
sheets(pandas.io.excel._base.ExcelWriter.sheets"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*P
selfF
!pandas.io.excel._base.ExcelWriter"!pandas.io.excel._base.ExcelWriter0:builtins.property`*Ω
book&pandas.io.excel._base.ExcelWriter.book"$
Union[Any,Any]
Any
Any*P
selfF
!pandas.io.excel._base.ExcelWriter"!pandas.io.excel._base.ExcelWriter0:builtins.property`*√
date_format-pandas.io.excel._base.ExcelWriter.date_format"
builtins.str"builtins.str*P
selfF
!pandas.io.excel._base.ExcelWriter"!pandas.io.excel._base.ExcelWriter0:builtins.property`*À
datetime_format1pandas.io.excel._base.ExcelWriter.datetime_format"
builtins.str"builtins.str*P
selfF
!pandas.io.excel._base.ExcelWriter"!pandas.io.excel._base.ExcelWriter0:builtins.property`*ˆ
if_sheet_exists1pandas.io.excel._base.ExcelWriter.if_sheet_exists"∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*P
selfF
!pandas.io.excel._base.ExcelWriter"!pandas.io.excel._base.ExcelWriter0:builtins.property`*™

__fspath__,pandas.io.excel._base.ExcelWriter.__fspath__"
builtins.str"builtins.str*P
selfF
!pandas.io.excel._base.ExcelWriter"!pandas.io.excel._base.ExcelWriter*Î
	__enter__+pandas.io.excel._base.ExcelWriter.__enter__"ï
&pandas.io.excel._base.ExcelWriter.SelfF
!pandas.io.excel._base.ExcelWriter"!pandas.io.excel._base.ExcelWriter"!pandas.io.excel._base.ExcelWriter*òï
&pandas.io.excel._base.ExcelWriter.SelfF
!pandas.io.excel._base.ExcelWriter"!pandas.io.excel._base.ExcelWriter"!pandas.io.excel._base.ExcelWriter*„
__exit__*pandas.io.excel._base.ExcelWriter.__exit__"
None*HF
!pandas.io.excel._base.ExcelWriter"!pandas.io.excel._base.ExcelWriter*ìê
(Union[Type[builtins.BaseException],None]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type
None*db
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*[Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None*å
close'pandas.io.excel._base.ExcelWriter.close"
None*P
selfF
!pandas.io.excel._base.ExcelWriter"!pandas.io.excel._base.ExcelWriteråÄ
HDFStorepandas.io.pytables.HDFStore"builtins.object*Ò	
__init__$pandas.io.pytables.HDFStore.__init__"
None*D
self:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*
path
Any*”
mode∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *U
	complevelD
Union[builtins.int,None]
builtins.int"builtins.int
None *Á
complib◊
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]—
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.HDFCompLib
None *0

fletcher32
builtins.bool"builtins.bool *
kwargs
Any*ò

__fspath__&pandas.io.pytables.HDFStore.__fspath__"
builtins.str"builtins.str*D
self:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*ﬁ
__getitem__'pandas.io.pytables.HDFStore.__getitem__"«
AUnion[pandas.core.frame.DataFrame,pandas.core.series.Series[Any]]:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrameD
pandas.core.series.Series[Any]
Any"pandas.core.series.Series*<:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*
builtins.str"builtins.str*Î
__setitem__'pandas.io.pytables.HDFStore.__setitem__"
None*<:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*
builtins.str"builtins.str* «
AUnion[pandas.core.frame.DataFrame,pandas.core.series.Series[Any]]:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrameD
pandas.core.series.Series[Any]
Any"pandas.core.series.Series*û
__delitem__'pandas.io.pytables.HDFStore.__delitem__"
None*<:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*
builtins.str"builtins.str*ﬁ
__getattr__'pandas.io.pytables.HDFStore.__getattr__"«
AUnion[pandas.core.frame.DataFrame,pandas.core.series.Series[Any]]:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrameD
pandas.core.series.Series[Any]
Any"pandas.core.series.Series*<:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*
builtins.str"builtins.str*∂
__contains__(pandas.io.pytables.HDFStore.__contains__"
builtins.bool"builtins.bool*<:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*
builtins.str"builtins.str*ä
__len__#pandas.io.pytables.HDFStore.__len__"
builtins.int"builtins.int*<:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*≤
	__enter__%pandas.io.pytables.HDFStore.__enter__"}
 pandas.io.pytables.HDFStore.Self:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*}
 pandas.io.pytables.HDFStore.Self:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*—
__exit__$pandas.io.pytables.HDFStore.__exit__"
None*<:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*ìê
(Union[Type[builtins.BaseException],None]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type
None*db
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*[Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None*∫
keys pandas.io.pytables.HDFStore.keys"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*D
self:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*æ
__iter__$pandas.io.pytables.HDFStore.__iter__"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*<:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*„
open pandas.io.pytables.HDFStore.open"
None*D
self:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*”
mode∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *
kwargs
Any*z
close!pandas.io.pytables.HDFStore.close"
None*D
self:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*´
is_open#pandas.io.pytables.HDFStore.is_open"
builtins.bool"builtins.bool*D
self:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore0:builtins.property`*›
getpandas.io.pytables.HDFStore.get"«
AUnion[pandas.core.frame.DataFrame,pandas.core.series.Series[Any]]:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrameD
pandas.core.series.Series[Any]
Any"pandas.core.series.Series*D
self:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*%
key
builtins.str"builtins.str*¥
putpandas.io.pytables.HDFStore.put"
None*D
self:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*%
key
builtins.str"builtins.str*E
value:
pandas.core.generic.NDFrame"pandas.core.generic.NDFrame*’
format∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *+
index
builtins.bool"builtins.bool *,
append
builtins.bool"builtins.bool *Á
complib◊
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]—
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.HDFCompLib
None *U
	complevelD
Union[builtins.int,None]
builtins.int"builtins.int
None * 
min_itemsizeµ
NUnion[builtins.int,builtins.dict[pandas._typing.HashableT1,builtins.int],None]
builtins.int"builtins.int∏
5builtins.dict[pandas._typing.HashableT1,builtins.int]R
pandas._typing.HashableT1"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int"builtins.dict
None *S
nan_repD
Union[builtins.str,None]
builtins.str"builtins.str
None *∫
data_columns•
KUnion[Literal[builtins.bool],builtins.list[pandas._typing.HashableT2],None]:
Literal[builtins.bool]	
builtins.bool"builtins.boolç
(builtins.list[pandas._typing.HashableT2]R
pandas._typing.HashableT2"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *√
errors¥
†Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *1
track_times
builtins.bool"builtins.bool *,
dropna
builtins.bool"builtins.bool *ò
append"pandas.io.pytables.HDFStore.append"
None*D
self:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*%
key
builtins.str"builtins.str*E
value:
pandas.core.generic.NDFrame"pandas.core.generic.NDFrame*’
format∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *P
axesD
Union[builtins.int,None]
builtins.int"builtins.int
None *+
index
builtins.bool"builtins.bool *,
append
builtins.bool"builtins.bool *Á
complib◊
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]—
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.HDFCompLib
None *U
	complevelD
Union[builtins.int,None]
builtins.int"builtins.int
None *‚
columns“
4Union[builtins.list[pandas._typing.HashableT1],None]ç
(builtins.list[pandas._typing.HashableT1]R
pandas._typing.HashableT1"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list
None * 
min_itemsizeµ
NUnion[builtins.int,builtins.dict[pandas._typing.HashableT2,builtins.int],None]
builtins.int"builtins.int∏
5builtins.dict[pandas._typing.HashableT2,builtins.int]R
pandas._typing.HashableT2"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.int"builtins.int"builtins.dict
None *S
nan_repD
Union[builtins.str,None]
builtins.str"builtins.str
None *U
	chunksizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *X
expectedrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *U
dropnaG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *∫
data_columns•
KUnion[Literal[builtins.bool],builtins.list[pandas._typing.HashableT3],None]:
Literal[builtins.bool]	
builtins.bool"builtins.boolç
(builtins.list[pandas._typing.HashableT3]R
pandas._typing.HashableT3"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *√
errors¥
†Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *†
groups"pandas.io.pytables.HDFStore.groups",
builtins.list[Any]
Any"builtins.list*D
self:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*É
walk pandas.io.pytables.HDFStore.walk"Á
^typing.Generator[Tuple[builtins.str,builtins.list[Any],builtins.list[builtins.str]],None,None]ﬁ
BTuple[builtins.str,builtins.list[Any],builtins.list[builtins.str]]
builtins.str"builtins.str,
builtins.list[Any]
Any"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None
None"typing.Generator*D
self:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*)
where
builtins.str"builtins.str *å
info pandas.io.pytables.HDFStore.info"
builtins.str"builtins.str*D
self:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore2™
select"pandas.io.pytables.HDFStore.select•

select"pandas.io.pytables.HDFStore.select"D
 pandas.io.pytables.TableIterator" pandas.io.pytables.TableIterator*D
self:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*%
key
builtins.str"builtins.str*‘
where∆
ÖUnion[builtins.str,pandas.core.computation.pytables.PyTablesExpr,typing.Sequence[pandas.core.computation.pytables.PyTablesExpr],None]
builtins.str"builtins.str^
-pandas.core.computation.pytables.PyTablesExpr"-pandas.core.computation.pytables.PyTablesExpr±
>typing.Sequence[pandas.core.computation.pytables.PyTablesExpr]^
-pandas.core.computation.pytables.PyTablesExpr"-pandas.core.computation.pytables.PyTablesExpr"typing.Sequence
None *Q
startD
Union[builtins.int,None]
builtins.int"builtins.int
None *P
stopD
Union[builtins.int,None]
builtins.int"builtins.int
None *ﬂ
columnsœ
3Union[builtins.list[pandas._typing.HashableT],None]ã
'builtins.list[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list
None *H
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool*U
	chunksizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *0

auto_close
builtins.bool"builtins.bool 0:typing.overloadX·	
select"pandas.io.pytables.HDFStore.select"D
 pandas.io.pytables.TableIterator" pandas.io.pytables.TableIterator*D
self:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*%
key
builtins.str"builtins.str*‘
where∆
ÖUnion[builtins.str,pandas.core.computation.pytables.PyTablesExpr,typing.Sequence[pandas.core.computation.pytables.PyTablesExpr],None]
builtins.str"builtins.str^
-pandas.core.computation.pytables.PyTablesExpr"-pandas.core.computation.pytables.PyTablesExpr±
>typing.Sequence[pandas.core.computation.pytables.PyTablesExpr]^
-pandas.core.computation.pytables.PyTablesExpr"-pandas.core.computation.pytables.PyTablesExpr"typing.Sequence
None *Q
startD
Union[builtins.int,None]
builtins.int"builtins.int
None *P
stopD
Union[builtins.int,None]
builtins.int"builtins.int
None *ﬂ
columnsœ
3Union[builtins.list[pandas._typing.HashableT],None]ã
'builtins.list[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list
None *.
iterator
builtins.bool"builtins.bool *+
	chunksize
builtins.int"builtins.int*0

auto_close
builtins.bool"builtins.bool 0:typing.overloadXÔ

select"pandas.io.pytables.HDFStore.select"«
AUnion[pandas.core.frame.DataFrame,pandas.core.series.Series[Any]]:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrameD
pandas.core.series.Series[Any]
Any"pandas.core.series.Series*D
self:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*%
key
builtins.str"builtins.str*‘
where∆
ÖUnion[builtins.str,pandas.core.computation.pytables.PyTablesExpr,typing.Sequence[pandas.core.computation.pytables.PyTablesExpr],None]
builtins.str"builtins.str^
-pandas.core.computation.pytables.PyTablesExpr"-pandas.core.computation.pytables.PyTablesExpr±
>typing.Sequence[pandas.core.computation.pytables.PyTablesExpr]^
-pandas.core.computation.pytables.PyTablesExpr"-pandas.core.computation.pytables.PyTablesExpr"typing.Sequence
None *Q
startD
Union[builtins.int,None]
builtins.int"builtins.int
None *P
stopD
Union[builtins.int,None]
builtins.int"builtins.int
None *ﬂ
columnsœ
3Union[builtins.list[pandas._typing.HashableT],None]ã
'builtins.list[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list
None *J
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
	chunksize
None *0

auto_close
builtins.bool"builtins.bool 0:typing.overloadXª
read_feather%pandas.io.feather_format.read_feather":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*‘
path…
iUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.bytes]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer*ﬂ
columnsœ
3Union[builtins.list[pandas._typing.HashableT],None]ã
'builtins.list[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list
None *1
use_threads
builtins.bool"builtins.bool *Ü
storage_optionsÓ
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault ˚
read_gbqpandas.io.gbq.read_gbq":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*'
query
builtins.str"builtins.str*V

project_idD
Union[builtins.str,None]
builtins.str"builtins.str
None *U
	index_colD
Union[builtins.str,None]
builtins.str"builtins.str
None *ì
	col_orderÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *,
reauth
builtins.bool"builtins.bool *:
auth_local_webserver
builtins.bool"builtins.bool *«
dialect∑
7Union[Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *T
locationD
Union[builtins.str,None]
builtins.str"builtins.str
None *®
configurationí
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None *
credentials
Any *`
use_bqstorage_apiG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *W
max_resultsD
Union[builtins.int,None]
builtins.int"builtins.int
None *†
progress_bar_typeÜ
MUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None ç+
	read_htmlpandas.io.html.read_html"w
*builtins.list[pandas.core.frame.DataFrame]:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame"builtins.list* 
io¡
gUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathb
'pandas._typing.ReadBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadBuffer*z
matchm
#Union[builtins.str,re.Pattern[Any]]
builtins.str"builtins.str&
re.Pattern[Any]
Any"
re.Pattern *R
flavorD
Union[builtins.str,None]
builtins.str"builtins.str
None *¡
header≤
6Union[builtins.int,typing.Sequence[builtins.int],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence
None *˝
	index_colÎ
_Union[builtins.int,typing.Sequence[builtins.int],builtins.list[pandas._typing.HashableT1],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequenceç
(builtins.list[pandas._typing.HashableT1]R
pandas._typing.HashableT1"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list
None *Ù
skiprows„
EUnion[builtins.int,typing.Sequence[builtins.int],builtins.slice,None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence 
builtins.slice"builtins.slice
None *«
attrsπ
4Union[builtins.dict[builtins.str,builtins.str],None]u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict
None *Ü	
parse_datesÚ
åUnion[builtins.bool,typing.Sequence[builtins.int],builtins.list[pandas._typing.HashableT2],typing.Sequence[typing.Sequence[typing.Hashable]],builtins.dict[builtins.str,typing.Sequence[builtins.int]],builtins.dict[builtins.str,builtins.list[pandas._typing.HashableT3]]]
builtins.bool"builtins.boolN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequenceç
(builtins.list[pandas._typing.HashableT2]R
pandas._typing.HashableT2"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.listù
1typing.Sequence[typing.Sequence[typing.Hashable]]W
 typing.Sequence[typing.Hashable]"
typing.Hashable"typing.Hashable"typing.Sequence"typing.Sequence∏
9builtins.dict[builtins.str,typing.Sequence[builtins.int]]
builtins.str"builtins.strN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"builtins.dictÉ
Dbuiltins.dict[builtins.str,builtins.list[pandas._typing.HashableT3]]
builtins.str"builtins.strç
(builtins.list[pandas._typing.HashableT3]R
pandas._typing.HashableT3"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list"builtins.dict *-
	thousands
builtins.str"builtins.str *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
decimal
builtins.str"builtins.str *Ô

converters‹
iUnion[typing.Mapping[Union[builtins.int,pandas._typing.HashableT4],CallableType[builtins.function]],None]‚
]typing.Mapping[Union[builtins.int,pandas._typing.HashableT4],CallableType[builtins.function]]£
-Union[builtins.int,pandas._typing.HashableT4]
builtins.int"builtins.intR
pandas._typing.HashableT4"
typing.Hashable"typing.Hashable"typing.HashableK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mapping
None *Ì
	na_values€
ØUnion[builtins.str,builtins.list[builtins.str],builtins.dict[pandas._typing.HashableT5,builtins.str],builtins.dict[pandas._typing.HashableT5,builtins.list[builtins.str]],None]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list∏
5builtins.dict[pandas._typing.HashableT5,builtins.str]R
pandas._typing.HashableT5"
typing.Hashable"typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dictı
Dbuiltins.dict[pandas._typing.HashableT5,builtins.list[builtins.str]]R
pandas._typing.HashableT5"
typing.Hashable"typing.Hashable"typing.HashableJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"builtins.dict
None *5
keep_default_na
builtins.bool"builtins.bool *4
displayed_only
builtins.bool"builtins.bool *Î
extract_links’
cUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault Å
read_orcpandas.io.orc.read_orc":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*‘
path…
iUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.bytes]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer*ﬂ
columnsœ
3Union[builtins.list[pandas._typing.HashableT],None]ã
'builtins.list[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list
None *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault *
kwargs
AnyØ
read_parquetpandas.io.parquet.read_parquet":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*‘
path…
iUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.bytes]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer*˛
engineÔ
STypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]˜
HUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.ParquetEngine *ë
columnsÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *Ü
storage_optionsÓ
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions *9
use_nullable_dtypes
builtins.bool"builtins.bool *
kwargs
Any¬
read_picklepandas.io.pickle.read_pickle"
Any*≤
filepath_or_bufferô
_Union[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadPickleBuffer]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathB
pandas._typing.ReadPickleBuffer"pandas._typing.ReadPickleBuffer*Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *Ü
storage_optionsÓ
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions Õ
	to_picklepandas.io.pickle.to_pickle"
None*+
obj"
builtins.object"builtins.object*Â
filepath_or_bufferÃ
jUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.WriteBuffer[builtins.bytes]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathj
*pandas._typing.WriteBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.WriteBuffer*Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *,
protocol
builtins.int"builtins.int *Ü
storage_optionsÓ
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions —	
	read_spsspandas.io.spss.read_spss":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*˙
pathÔ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePath*ﬂ
usecolsœ
3Union[builtins.list[pandas._typing.HashableT],None]ã
'builtins.list[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list
None *:
convert_categoricals
builtins.bool"builtins.bool *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault »=
read_xmlpandas.io.xml.read_xml":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*Î
path_or_buffer÷
ëUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.bytes],pandas._typing.ReadBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBufferb
'pandas._typing.ReadBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadBuffer*)
xpath
builtins.str"builtins.str *Ã

namespacesπ
4Union[builtins.dict[builtins.str,builtins.str],None]u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict
None *0

elems_only
builtins.bool"builtins.bool *0

attrs_only
builtins.bool"builtins.bool *ï
namesá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *˛
dtype
ÄUnion[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArg
None *ß

convertersî
UUnion[TypeAlias[builtins.dict[typing.Hashable,CallableType[builtins.function]]],None]Æ
ITypeAlias[builtins.dict[typing.Hashable,CallableType[builtins.function]]]¿
>builtins.dict[typing.Hashable,CallableType[builtins.function]]"
typing.Hashable"typing.HashableK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict"pandas._typing.ConvertersArg
None *•
parse_datesë
∂Union[TypeAlias[Union[builtins.bool,builtins.list[typing.Hashable],builtins.list[builtins.list[typing.Hashable]],builtins.dict[typing.Hashable,builtins.list[typing.Hashable]]]],None]…
™TypeAlias[Union[builtins.bool,builtins.list[typing.Hashable],builtins.list[builtins.list[typing.Hashable]],builtins.dict[typing.Hashable,builtins.list[typing.Hashable]]]]˘
üUnion[builtins.bool,builtins.list[typing.Hashable],builtins.list[builtins.list[typing.Hashable]],builtins.dict[typing.Hashable,builtins.list[typing.Hashable]]]
builtins.bool"builtins.boolS
builtins.list[typing.Hashable]"
typing.Hashable"typing.Hashable"builtins.listì
-builtins.list[builtins.list[typing.Hashable]]S
builtins.list[typing.Hashable]"
typing.Hashable"typing.Hashable"builtins.list"builtins.list«
=builtins.dict[typing.Hashable,builtins.list[typing.Hashable]]"
typing.Hashable"typing.HashableS
builtins.list[typing.Hashable]"
typing.Hashable"typing.Hashable"builtins.list"builtins.dict"pandas._typing.ParseDatesArg
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *ñ
parserá
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.XMLParsers *¯

stylesheetÂ
ñUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.bytes],pandas._typing.ReadBuffer[builtins.str],None]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBufferb
'pandas._typing.ReadBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadBuffer
None *ò
	iterparseÜ
CUnion[builtins.dict[builtins.str,builtins.list[builtins.str]],None]≤
7builtins.dict[builtins.str,builtins.list[builtins.str]]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"builtins.dict
None *Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *Ü
storage_optionsÓ
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault "°¶
read_clipboard#pandas.io.clipboards.read_clipboard©b
read_clipboard#pandas.io.clipboards.read_clipboard"T
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault *U
	delimiterD
Union[builtins.str,None]
builtins.str"builtins.str
None *ê
headerÅ
LUnion[builtins.int,typing.Sequence[builtins.int],Literal[builtins.str],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *è
namesÅ
ùUnion[TypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]],None]“
ëTypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]]ò
ÜUnion[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]ù
0typing.MutableSequence[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSequence9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayç
(builtins.tuple[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.tuple 
builtins.range"builtins.range"pandas._typing.ListLikeHashable
None *Ø
	index_colù
nUnion[builtins.int,builtins.str,typing.Sequence[Union[builtins.str,builtins.int]],Literal[builtins.bool],None]
builtins.int"builtins.int
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"typing.Sequence:
Literal[builtins.bool]	
builtins.bool"builtins.bool
None *µ
usecols•
TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]é
ÂUnion[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]\
$typing.MutableSequence[builtins.str]
builtins.str"builtins.str"typing.MutableSequenceL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceD
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayK
CallableType[builtins.function]&
builtins.function"builtins.function
None"pandas._typing.UsecolsArgType *Ó
dtype‡
°Union[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],collections.defaultdict[Any,Any],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArgM
 collections.defaultdict[Any,Any]
Any
Any"collections.defaultdict
None *Â
engine÷
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]–
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.CSVEngine
None *¢

convertersè
Obuiltins.dict[Union[builtins.int,builtins.str],CallableType[builtins.function]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict *]
true_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *^
false_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *6
skipinitialspace
builtins.bool"builtins.bool *°
skiprowsê
QUnion[builtins.int,typing.Sequence[builtins.int],CallableType[builtins.function]]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function *.

skipfooter
builtins.int"builtins.int *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *ˇ
	na_valuesÌ
^Union[typing.Sequence[builtins.str],builtins.dict[builtins.str,typing.Sequence[builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence∏
9builtins.dict[builtins.str,typing.Sequence[builtins.str]]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"builtins.dict *5
keep_default_na
builtins.bool"builtins.bool */
	na_filter
builtins.bool"builtins.bool *-
verbose
builtins.bool"builtins.bool *6
skip_blank_lines
builtins.bool"builtins.bool *€
parse_dates«
∑Union[builtins.bool,typing.Sequence[builtins.int],builtins.list[builtins.str],typing.Sequence[typing.Sequence[builtins.int]],builtins.dict[builtins.str,typing.Sequence[builtins.int]]]
builtins.bool"builtins.boolN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listë
.typing.Sequence[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"typing.Sequence∏
9builtins.dict[builtins.str,typing.Sequence[builtins.int]]
builtins.str"builtins.strN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"builtins.dict *;
infer_datetime_format
builtins.bool"builtins.bool *3
keep_date_col
builtins.bool"builtins.bool *^
date_parserK
CallableType[builtins.function]&
builtins.function"builtins.function *.
dayfirst
builtins.bool"builtins.bool *1
cache_dates
builtins.bool"builtins.bool *H
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool*U
	chunksizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *U
	thousandsD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
decimal
builtins.str"builtins.str *Z
lineterminatorD
Union[builtins.str,None]
builtins.str"builtins.str
None *-
	quotechar
builtins.str"builtins.str *·
quoting—
iTypeAlias[Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]]∆
^Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int"pandas._typing.CSVQuoting *1
doublequote
builtins.bool"builtins.bool *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
commentD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *[
encoding_errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *o
dialect`
 Union[builtins.str,_csv.Dialect]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect *˘
on_bad_lines‰
hUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *6
delim_whitespace
builtins.bool"builtins.bool *0

low_memory
builtins.bool"builtins.bool *0

memory_map
builtins.bool"builtins.bool *û
float_precisionÜ
MUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *Ÿ
storage_options¡
BUnion[TypeAlias[Union[builtins.dict[builtins.str,Any],None]],None]Ó
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions
None 0:typing.overloadXÂa
read_clipboard#pandas.io.clipboards.read_clipboard"T
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault *U
	delimiterD
Union[builtins.str,None]
builtins.str"builtins.str
None *ê
headerÅ
LUnion[builtins.int,typing.Sequence[builtins.int],Literal[builtins.str],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *è
namesÅ
ùUnion[TypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]],None]“
ëTypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]]ò
ÜUnion[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]ù
0typing.MutableSequence[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSequence9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayç
(builtins.tuple[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.tuple 
builtins.range"builtins.range"pandas._typing.ListLikeHashable
None *Ø
	index_colù
nUnion[builtins.int,builtins.str,typing.Sequence[Union[builtins.str,builtins.int]],Literal[builtins.bool],None]
builtins.int"builtins.int
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"typing.Sequence:
Literal[builtins.bool]	
builtins.bool"builtins.bool
None *µ
usecols•
TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]é
ÂUnion[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]\
$typing.MutableSequence[builtins.str]
builtins.str"builtins.str"typing.MutableSequenceL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceD
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayK
CallableType[builtins.function]&
builtins.function"builtins.function
None"pandas._typing.UsecolsArgType *Ó
dtype‡
°Union[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],collections.defaultdict[Any,Any],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArgM
 collections.defaultdict[Any,Any]
Any
Any"collections.defaultdict
None *Â
engine÷
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]–
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.CSVEngine
None *¢

convertersè
Obuiltins.dict[Union[builtins.int,builtins.str],CallableType[builtins.function]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict *]
true_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *^
false_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *6
skipinitialspace
builtins.bool"builtins.bool *°
skiprowsê
QUnion[builtins.int,typing.Sequence[builtins.int],CallableType[builtins.function]]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function *.

skipfooter
builtins.int"builtins.int *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *ˇ
	na_valuesÌ
^Union[typing.Sequence[builtins.str],builtins.dict[builtins.str,typing.Sequence[builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence∏
9builtins.dict[builtins.str,typing.Sequence[builtins.str]]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"builtins.dict *5
keep_default_na
builtins.bool"builtins.bool */
	na_filter
builtins.bool"builtins.bool *-
verbose
builtins.bool"builtins.bool *6
skip_blank_lines
builtins.bool"builtins.bool *€
parse_dates«
∑Union[builtins.bool,typing.Sequence[builtins.int],builtins.list[builtins.str],typing.Sequence[typing.Sequence[builtins.int]],builtins.dict[builtins.str,typing.Sequence[builtins.int]]]
builtins.bool"builtins.boolN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listë
.typing.Sequence[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"typing.Sequence∏
9builtins.dict[builtins.str,typing.Sequence[builtins.int]]
builtins.str"builtins.strN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"builtins.dict *;
infer_datetime_format
builtins.bool"builtins.bool *3
keep_date_col
builtins.bool"builtins.bool *^
date_parserK
CallableType[builtins.function]&
builtins.function"builtins.function *.
dayfirst
builtins.bool"builtins.bool *1
cache_dates
builtins.bool"builtins.bool *.
iterator
builtins.bool"builtins.bool *+
	chunksize
builtins.int"builtins.int*Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *U
	thousandsD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
decimal
builtins.str"builtins.str *Z
lineterminatorD
Union[builtins.str,None]
builtins.str"builtins.str
None *-
	quotechar
builtins.str"builtins.str *·
quoting—
iTypeAlias[Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]]∆
^Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int"pandas._typing.CSVQuoting *1
doublequote
builtins.bool"builtins.bool *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
commentD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *[
encoding_errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *o
dialect`
 Union[builtins.str,_csv.Dialect]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect *˘
on_bad_lines‰
hUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *6
delim_whitespace
builtins.bool"builtins.bool *0

low_memory
builtins.bool"builtins.bool *0

memory_map
builtins.bool"builtins.bool *û
float_precisionÜ
MUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *Ÿ
storage_options¡
BUnion[TypeAlias[Union[builtins.dict[builtins.str,Any],None]],None]Ó
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions
None 0:typing.overloadX’a
read_clipboard#pandas.io.clipboards.read_clipboard":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault *U
	delimiterD
Union[builtins.str,None]
builtins.str"builtins.str
None *ê
headerÅ
LUnion[builtins.int,typing.Sequence[builtins.int],Literal[builtins.str],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *è
namesÅ
ùUnion[TypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]],None]“
ëTypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]]ò
ÜUnion[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]ù
0typing.MutableSequence[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSequence9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayç
(builtins.tuple[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.tuple 
builtins.range"builtins.range"pandas._typing.ListLikeHashable
None *Ø
	index_colù
nUnion[builtins.int,builtins.str,typing.Sequence[Union[builtins.str,builtins.int]],Literal[builtins.bool],None]
builtins.int"builtins.int
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"typing.Sequence:
Literal[builtins.bool]	
builtins.bool"builtins.bool
None *µ
usecols•
TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]é
ÂUnion[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]\
$typing.MutableSequence[builtins.str]
builtins.str"builtins.str"typing.MutableSequenceL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceD
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayK
CallableType[builtins.function]&
builtins.function"builtins.function
None"pandas._typing.UsecolsArgType *Ó
dtype‡
°Union[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],collections.defaultdict[Any,Any],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArgM
 collections.defaultdict[Any,Any]
Any
Any"collections.defaultdict
None *Â
engine÷
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]–
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.CSVEngine
None *¢

convertersè
Obuiltins.dict[Union[builtins.int,builtins.str],CallableType[builtins.function]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.dict *]
true_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *^
false_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *6
skipinitialspace
builtins.bool"builtins.bool *°
skiprowsê
QUnion[builtins.int,typing.Sequence[builtins.int],CallableType[builtins.function]]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function *.

skipfooter
builtins.int"builtins.int *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *ˇ
	na_valuesÌ
^Union[typing.Sequence[builtins.str],builtins.dict[builtins.str,typing.Sequence[builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence∏
9builtins.dict[builtins.str,typing.Sequence[builtins.str]]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"builtins.dict *5
keep_default_na
builtins.bool"builtins.bool */
	na_filter
builtins.bool"builtins.bool *-
verbose
builtins.bool"builtins.bool *6
skip_blank_lines
builtins.bool"builtins.bool *€
parse_dates«
∑Union[builtins.bool,typing.Sequence[builtins.int],builtins.list[builtins.str],typing.Sequence[typing.Sequence[builtins.int]],builtins.dict[builtins.str,typing.Sequence[builtins.int]]]
builtins.bool"builtins.boolN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listë
.typing.Sequence[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"typing.Sequence∏
9builtins.dict[builtins.str,typing.Sequence[builtins.int]]
builtins.str"builtins.strN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"builtins.dict *;
infer_datetime_format
builtins.bool"builtins.bool *3
keep_date_col
builtins.bool"builtins.bool *^
date_parserK
CallableType[builtins.function]&
builtins.function"builtins.function *.
dayfirst
builtins.bool"builtins.bool *1
cache_dates
builtins.bool"builtins.bool *J
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
	chunksize
None *Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *U
	thousandsD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
decimal
builtins.str"builtins.str *Z
lineterminatorD
Union[builtins.str,None]
builtins.str"builtins.str
None *-
	quotechar
builtins.str"builtins.str *·
quoting—
iTypeAlias[Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]]∆
^Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int"pandas._typing.CSVQuoting *1
doublequote
builtins.bool"builtins.bool *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
commentD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *[
encoding_errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *o
dialect`
 Union[builtins.str,_csv.Dialect]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect *˘
on_bad_lines‰
hUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *6
delim_whitespace
builtins.bool"builtins.bool *0

low_memory
builtins.bool"builtins.bool *0

memory_map
builtins.bool"builtins.bool *û
float_precisionÜ
MUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *Ÿ
storage_options¡
BUnion[TypeAlias[Union[builtins.dict[builtins.str,Any],None]],None]Ó
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions
None 0:typing.overloadX"·ù

read_excel pandas.io.excel._base.read_excel˛O

read_excel pandas.io.excel._base.read_excel"˙
Kbuiltins.dict[Union[builtins.int,builtins.str],pandas.core.frame.DataFrame]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame"builtins.dict*ú
ioì
®Union[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.bytes],builtins.bytes,pandas.io.excel._base.ExcelFile,Any,Any,Any,Any]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer 
builtins.bytes"builtins.bytesB
pandas.io.excel._base.ExcelFile"pandas.io.excel._base.ExcelFile
Any
Any
Any
Any*ˇ

sheet_nameÓ
;Union[builtins.list[Union[builtins.int,builtins.str]],None]¢
/builtins.list[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"builtins.list
None*¡
header≤
6Union[builtins.int,typing.Sequence[builtins.int],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence
None *è
namesÅ
ùUnion[TypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]],None]“
ëTypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]]ò
ÜUnion[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]ù
0typing.MutableSequence[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSequence9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayç
(builtins.tuple[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.tuple 
builtins.range"builtins.range"pandas._typing.ListLikeHashable
None *ƒ
	index_col≤
6Union[builtins.int,typing.Sequence[builtins.int],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence
None *ﬂ

usecolsœ

ÑUnion[builtins.str,TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]]
builtins.str"builtins.str•
TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]é
ÂUnion[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]\
$typing.MutableSequence[builtins.str]
builtins.str"builtins.str"typing.MutableSequenceL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceD
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayK
CallableType[builtins.function]&
builtins.function"builtins.function
None"pandas._typing.UsecolsArgType *†
dtypeí
òUnion[builtins.str,TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[builtins.str,Union[builtins.str,Unknown]],None]
builtins.str"builtins.strû	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype©
8typing.Mapping[builtins.str,Union[builtins.str,Unknown]]
builtins.str"builtins.str?
Union[builtins.str,Unknown]
builtins.str"builtins.str "typing.Mapping
None *‰
engine’
cUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *ë

converters˛
\Union[typing.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]],None]ë
Ptyping.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mapping
None *ß
true_valuesì
,Union[typing.Iterable[typing.Hashable],None]W
 typing.Iterable[typing.Hashable]"
typing.Hashable"typing.Hashable"typing.Iterable
None *®
false_valuesì
,Union[typing.Iterable[typing.Hashable],None]W
 typing.Iterable[typing.Hashable]"
typing.Hashable"typing.Hashable"typing.Iterable
None *∞
skiprowsü
VUnion[builtins.int,typing.Sequence[builtins.int],CallableType[builtins.function],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function
None *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Î
	na_valuesŸ
rUnion[typing.Sequence[builtins.str],builtins.dict[Union[builtins.str,builtins.int],typing.Sequence[builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequenceê
Mbuiltins.dict[Union[builtins.str,builtins.int],typing.Sequence[builtins.str]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.intN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"builtins.dict *5
keep_default_na
builtins.bool"builtins.bool */
	na_filter
builtins.bool"builtins.bool *-
verbose
builtins.bool"builtins.bool *Ø
parse_datesõ
„Union[builtins.bool,typing.Sequence[builtins.int],typing.Sequence[Union[typing.Sequence[builtins.str],typing.Sequence[builtins.int]]],builtins.dict[builtins.str,Union[typing.Sequence[builtins.int],builtins.list[builtins.str]]]]
builtins.bool"builtins.boolN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequenceœ
Styping.Sequence[Union[typing.Sequence[builtins.str],typing.Sequence[builtins.int]]]Ê
BUnion[typing.Sequence[builtins.str],typing.Sequence[builtins.int]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.SequenceN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"typing.SequenceÓ
\builtins.dict[builtins.str,Union[typing.Sequence[builtins.int],builtins.list[builtins.str]]]
builtins.str"builtins.str‡
@Union[typing.Sequence[builtins.int],builtins.list[builtins.str]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"builtins.dict *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *U
	thousandsD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
decimal
builtins.str"builtins.str *S
commentD
Union[builtins.str,None]
builtins.str"builtins.str
None *.

skipfooter
builtins.int"builtins.int *Ü
storage_optionsÓ
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault 0:typing.overloadXØM

read_excel pandas.io.excel._base.read_excel":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*ú
ioì
®Union[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.bytes],builtins.bytes,pandas.io.excel._base.ExcelFile,Any,Any,Any,Any]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer 
builtins.bytes"builtins.bytesB
pandas.io.excel._base.ExcelFile"pandas.io.excel._base.ExcelFile
Any
Any
Any
Any*r

sheet_name`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str *¡
header≤
6Union[builtins.int,typing.Sequence[builtins.int],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence
None *è
namesÅ
ùUnion[TypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]],None]“
ëTypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]]ò
ÜUnion[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]ù
0typing.MutableSequence[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSequence9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayç
(builtins.tuple[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.tuple 
builtins.range"builtins.range"pandas._typing.ListLikeHashable
None *ƒ
	index_col≤
6Union[builtins.int,typing.Sequence[builtins.int],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence
None *ﬂ

usecolsœ

ÑUnion[builtins.str,TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]]
builtins.str"builtins.str•
TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]é
ÂUnion[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]\
$typing.MutableSequence[builtins.str]
builtins.str"builtins.str"typing.MutableSequenceL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceD
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayK
CallableType[builtins.function]&
builtins.function"builtins.function
None"pandas._typing.UsecolsArgType *†
dtypeí
òUnion[builtins.str,TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[builtins.str,Union[builtins.str,Unknown]],None]
builtins.str"builtins.strû	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype©
8typing.Mapping[builtins.str,Union[builtins.str,Unknown]]
builtins.str"builtins.str?
Union[builtins.str,Unknown]
builtins.str"builtins.str "typing.Mapping
None *‰
engine’
cUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *ë

converters˛
\Union[typing.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]],None]ë
Ptyping.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mapping
None *ß
true_valuesì
,Union[typing.Iterable[typing.Hashable],None]W
 typing.Iterable[typing.Hashable]"
typing.Hashable"typing.Hashable"typing.Iterable
None *®
false_valuesì
,Union[typing.Iterable[typing.Hashable],None]W
 typing.Iterable[typing.Hashable]"
typing.Hashable"typing.Hashable"typing.Iterable
None *∞
skiprowsü
VUnion[builtins.int,typing.Sequence[builtins.int],CallableType[builtins.function],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function
None *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Î
	na_valuesŸ
rUnion[typing.Sequence[builtins.str],builtins.dict[Union[builtins.str,builtins.int],typing.Sequence[builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequenceê
Mbuiltins.dict[Union[builtins.str,builtins.int],typing.Sequence[builtins.str]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.intN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"builtins.dict *5
keep_default_na
builtins.bool"builtins.bool */
	na_filter
builtins.bool"builtins.bool *-
verbose
builtins.bool"builtins.bool *Ø
parse_datesõ
„Union[builtins.bool,typing.Sequence[builtins.int],typing.Sequence[Union[typing.Sequence[builtins.str],typing.Sequence[builtins.int]]],builtins.dict[builtins.str,Union[typing.Sequence[builtins.int],builtins.list[builtins.str]]]]
builtins.bool"builtins.boolN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequenceœ
Styping.Sequence[Union[typing.Sequence[builtins.str],typing.Sequence[builtins.int]]]Ê
BUnion[typing.Sequence[builtins.str],typing.Sequence[builtins.int]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.SequenceN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"typing.SequenceÓ
\builtins.dict[builtins.str,Union[typing.Sequence[builtins.int],builtins.list[builtins.str]]]
builtins.str"builtins.str‡
@Union[typing.Sequence[builtins.int],builtins.list[builtins.str]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"builtins.dict *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *U
	thousandsD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
decimal
builtins.str"builtins.str *S
commentD
Union[builtins.str,None]
builtins.str"builtins.str
None *.

skipfooter
builtins.int"builtins.int *Ü
storage_optionsÓ
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault 0:typing.overloadX"ÍË
	read_jsonpandas.io.json._json.read_jsonﬁ9
	read_jsonpandas.io.json._json.read_json"®
?pandas.io.json._json.JsonReader[pandas.core.series.Series[Any]]D
pandas.core.series.Series[Any]
Any"pandas.core.series.Series"pandas.io.json._json.JsonReader*Ë
path_or_buf÷
ëUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.str],pandas._typing.ReadBuffer[builtins.bytes]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathb
'pandas._typing.ReadBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadBufferh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer*Ï
orient›
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]◊
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.JsonSeriesOrient
None *@
typ7
Literal[builtins.str]	
builtins.str"builtins.str*€
dtypeÕ
∑Union[builtins.bool,typing.Mapping[pandas._typing.HashableT,TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]],None]
builtins.bool"builtins.bool‰
ùtyping.Mapping[pandas._typing.HashableT,TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashableﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArg"typing.Mapping
None *[
convert_axesG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *∂
convert_dates†
0Union[builtins.bool,builtins.list[builtins.str]]
builtins.bool"builtins.boolJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *8
keep_default_dates
builtins.bool"builtins.bool *3
precise_float
builtins.bool"builtins.bool *Á
	date_unit’
cUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *º
encoding_errors§
yUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *E
lines:
Literal[builtins.bool]	
builtins.bool"builtins.bool*+
	chunksize
builtins.int"builtins.int*Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ü
storage_optionsÓ
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault 0:typing.overloadXÀ;
	read_jsonpandas.io.json._json.read_json"õ
<pandas.io.json._json.JsonReader[pandas.core.frame.DataFrame]:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame"pandas.io.json._json.JsonReader*Ë
path_or_buf÷
ëUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.str],pandas._typing.ReadBuffer[builtins.bytes]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathb
'pandas._typing.ReadBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadBufferh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer*‰
orient’
°Union[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]¢
ïTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]Â
äUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.JsonFrameOrient
None *B
typ7
Literal[builtins.str]	
builtins.str"builtins.str *€
dtypeÕ
∑Union[builtins.bool,typing.Mapping[pandas._typing.HashableT,TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]],None]
builtins.bool"builtins.bool‰
ùtyping.Mapping[pandas._typing.HashableT,TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashableﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArg"typing.Mapping
None *[
convert_axesG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *∂
convert_dates†
0Union[builtins.bool,builtins.list[builtins.str]]
builtins.bool"builtins.boolJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *8
keep_default_dates
builtins.bool"builtins.bool *3
precise_float
builtins.bool"builtins.bool *Á
	date_unit’
cUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *º
encoding_errors§
yUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *E
lines:
Literal[builtins.bool]	
builtins.bool"builtins.bool*+
	chunksize
builtins.int"builtins.int*Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ü
storage_optionsÓ
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault 0:typing.overloadXÕ8
	read_jsonpandas.io.json._json.read_json"D
pandas.core.series.Series[Any]
Any"pandas.core.series.Series*Ë
path_or_buf÷
ëUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.str],pandas._typing.ReadBuffer[builtins.bytes]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathb
'pandas._typing.ReadBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadBufferh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer*Ï
orient›
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]◊
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.JsonSeriesOrient
None *@
typ7
Literal[builtins.str]	
builtins.str"builtins.str*€
dtypeÕ
∑Union[builtins.bool,typing.Mapping[pandas._typing.HashableT,TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]],None]
builtins.bool"builtins.bool‰
ùtyping.Mapping[pandas._typing.HashableT,TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashableﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArg"typing.Mapping
None *[
convert_axesG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *∂
convert_dates†
0Union[builtins.bool,builtins.list[builtins.str]]
builtins.bool"builtins.boolJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *8
keep_default_dates
builtins.bool"builtins.bool *3
precise_float
builtins.bool"builtins.bool *Á
	date_unit’
cUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *º
encoding_errors§
yUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *+
lines
builtins.bool"builtins.bool *
	chunksize
None *Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ü
storage_optionsÓ
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault 0:typing.overloadXΩ:
	read_jsonpandas.io.json._json.read_json":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*Ë
path_or_buf÷
ëUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.str],pandas._typing.ReadBuffer[builtins.bytes]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathb
'pandas._typing.ReadBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadBufferh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer*‰
orient’
°Union[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]¢
ïTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]Â
äUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.JsonFrameOrient
None *B
typ7
Literal[builtins.str]	
builtins.str"builtins.str *€
dtypeÕ
∑Union[builtins.bool,typing.Mapping[pandas._typing.HashableT,TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]],None]
builtins.bool"builtins.bool‰
ùtyping.Mapping[pandas._typing.HashableT,TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashableﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArg"typing.Mapping
None *[
convert_axesG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *∂
convert_dates†
0Union[builtins.bool,builtins.list[builtins.str]]
builtins.bool"builtins.boolJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *8
keep_default_dates
builtins.bool"builtins.bool *3
precise_float
builtins.bool"builtins.bool *Á
	date_unit’
cUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *º
encoding_errors§
yUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *+
lines
builtins.bool"builtins.bool *
	chunksize
None *Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ü
storage_optionsÓ
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault 0:typing.overloadX"Ø 
read_csv"pandas.io.parsers.readers.read_csv∞n
read_csv"pandas.io.parsers.readers.read_csv"T
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*Å
filepath_or_bufferË
óUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadCsvBuffer[builtins.bytes],pandas._typing.ReadCsvBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathn
,pandas._typing.ReadCsvBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadCsvBufferh
*pandas._typing.ReadCsvBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadCsvBuffer*O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *U
	delimiterD
Union[builtins.str,None]
builtins.str"builtins.str
None *ê
headerÅ
LUnion[builtins.int,typing.Sequence[builtins.int],Literal[builtins.str],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *è
namesÅ
ùUnion[TypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]],None]“
ëTypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]]ò
ÜUnion[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]ù
0typing.MutableSequence[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSequence9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayç
(builtins.tuple[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.tuple 
builtins.range"builtins.range"pandas._typing.ListLikeHashable
None *Ø
	index_colù
nUnion[builtins.int,builtins.str,typing.Sequence[Union[builtins.str,builtins.int]],Literal[builtins.bool],None]
builtins.int"builtins.int
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"typing.Sequence:
Literal[builtins.bool]	
builtins.bool"builtins.bool
None *µ
usecols•
TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]é
ÂUnion[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]\
$typing.MutableSequence[builtins.str]
builtins.str"builtins.str"typing.MutableSequenceL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceD
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayK
CallableType[builtins.function]&
builtins.function"builtins.function
None"pandas._typing.UsecolsArgType *Ó
dtype‡
°Union[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],collections.defaultdict[Any,Any],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArgM
 collections.defaultdict[Any,Any]
Any
Any"collections.defaultdict
None *Â
engine÷
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]–
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.CSVEngine
None *Ñ

convertersÒ
÷Union[typing.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]],typing.Mapping[builtins.int,CallableType[builtins.function]],typing.Mapping[builtins.str,CallableType[builtins.function]],None]ë
Ptyping.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.int,CallableType[builtins.function]]
builtins.int"builtins.intK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mapping
None *]
true_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *^
false_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *6
skipinitialspace
builtins.bool"builtins.bool *°
skiprowsê
QUnion[builtins.int,typing.Sequence[builtins.int],CallableType[builtins.function]]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function *.

skipfooter
builtins.int"builtins.int *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ç
	na_values
_Union[typing.Sequence[builtins.str],typing.Mapping[builtins.str,typing.Sequence[builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence∫
:typing.Mapping[builtins.str,typing.Sequence[builtins.str]]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"typing.Mapping *5
keep_default_na
builtins.bool"builtins.bool */
	na_filter
builtins.bool"builtins.bool *-
verbose
builtins.bool"builtins.bool *6
skip_blank_lines
builtins.bool"builtins.bool *Ÿ
parse_dates≈
 Union[builtins.bool,builtins.list[builtins.int],builtins.list[builtins.str],typing.Sequence[typing.Sequence[builtins.int]],typing.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]]
builtins.bool"builtins.boolJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listë
.typing.Sequence[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"typing.Sequenceß
Ntyping.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"typing.Sequence"typing.Mapping *;
infer_datetime_format
builtins.bool"builtins.bool *3
keep_date_col
builtins.bool"builtins.bool *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *.
dayfirst
builtins.bool"builtins.bool *1
cache_dates
builtins.bool"builtins.bool *H
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool*U
	chunksizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *U
	thousandsD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
decimal
builtins.str"builtins.str *Z
lineterminatorD
Union[builtins.str,None]
builtins.str"builtins.str
None *-
	quotechar
builtins.str"builtins.str *·
quoting—
iTypeAlias[Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]]∆
^Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int"pandas._typing.CSVQuoting *1
doublequote
builtins.bool"builtins.bool *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
commentD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *[
encoding_errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *o
dialect`
 Union[builtins.str,_csv.Dialect]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect *˘
on_bad_lines‰
hUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *6
delim_whitespace
builtins.bool"builtins.bool *0

low_memory
builtins.bool"builtins.bool *0

memory_map
builtins.bool"builtins.bool *û
float_precisionÜ
MUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *Ÿ
storage_options¡
BUnion[TypeAlias[Union[builtins.dict[builtins.str,Any],None]],None]Ó
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions
None *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault 0:typing.overloadXÏm
read_csv"pandas.io.parsers.readers.read_csv"T
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*Å
filepath_or_bufferË
óUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadCsvBuffer[builtins.bytes],pandas._typing.ReadCsvBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathn
,pandas._typing.ReadCsvBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadCsvBufferh
*pandas._typing.ReadCsvBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadCsvBuffer*O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *U
	delimiterD
Union[builtins.str,None]
builtins.str"builtins.str
None *ê
headerÅ
LUnion[builtins.int,typing.Sequence[builtins.int],Literal[builtins.str],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *è
namesÅ
ùUnion[TypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]],None]“
ëTypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]]ò
ÜUnion[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]ù
0typing.MutableSequence[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSequence9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayç
(builtins.tuple[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.tuple 
builtins.range"builtins.range"pandas._typing.ListLikeHashable
None *Ø
	index_colù
nUnion[builtins.int,builtins.str,typing.Sequence[Union[builtins.str,builtins.int]],Literal[builtins.bool],None]
builtins.int"builtins.int
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"typing.Sequence:
Literal[builtins.bool]	
builtins.bool"builtins.bool
None *µ
usecols•
TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]é
ÂUnion[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]\
$typing.MutableSequence[builtins.str]
builtins.str"builtins.str"typing.MutableSequenceL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceD
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayK
CallableType[builtins.function]&
builtins.function"builtins.function
None"pandas._typing.UsecolsArgType *Ó
dtype‡
°Union[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],collections.defaultdict[Any,Any],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArgM
 collections.defaultdict[Any,Any]
Any
Any"collections.defaultdict
None *Â
engine÷
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]–
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.CSVEngine
None *Ñ

convertersÒ
÷Union[typing.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]],typing.Mapping[builtins.int,CallableType[builtins.function]],typing.Mapping[builtins.str,CallableType[builtins.function]],None]ë
Ptyping.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.int,CallableType[builtins.function]]
builtins.int"builtins.intK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mapping
None *]
true_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *^
false_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *6
skipinitialspace
builtins.bool"builtins.bool *°
skiprowsê
QUnion[builtins.int,typing.Sequence[builtins.int],CallableType[builtins.function]]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function *.

skipfooter
builtins.int"builtins.int *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ç
	na_values
_Union[typing.Sequence[builtins.str],typing.Mapping[builtins.str,typing.Sequence[builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence∫
:typing.Mapping[builtins.str,typing.Sequence[builtins.str]]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"typing.Mapping *5
keep_default_na
builtins.bool"builtins.bool */
	na_filter
builtins.bool"builtins.bool *-
verbose
builtins.bool"builtins.bool *6
skip_blank_lines
builtins.bool"builtins.bool *Ÿ
parse_dates≈
 Union[builtins.bool,builtins.list[builtins.int],builtins.list[builtins.str],typing.Sequence[typing.Sequence[builtins.int]],typing.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]]
builtins.bool"builtins.boolJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listë
.typing.Sequence[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"typing.Sequenceß
Ntyping.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"typing.Sequence"typing.Mapping *;
infer_datetime_format
builtins.bool"builtins.bool *3
keep_date_col
builtins.bool"builtins.bool *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *.
dayfirst
builtins.bool"builtins.bool *1
cache_dates
builtins.bool"builtins.bool *.
iterator
builtins.bool"builtins.bool *+
	chunksize
builtins.int"builtins.int*Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *U
	thousandsD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
decimal
builtins.str"builtins.str *Z
lineterminatorD
Union[builtins.str,None]
builtins.str"builtins.str
None *-
	quotechar
builtins.str"builtins.str *·
quoting—
iTypeAlias[Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]]∆
^Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int"pandas._typing.CSVQuoting *1
doublequote
builtins.bool"builtins.bool *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
commentD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *[
encoding_errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *o
dialect`
 Union[builtins.str,_csv.Dialect]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect *˘
on_bad_lines‰
hUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *6
delim_whitespace
builtins.bool"builtins.bool *0

low_memory
builtins.bool"builtins.bool *0

memory_map
builtins.bool"builtins.bool *û
float_precisionÜ
MUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *Ÿ
storage_options¡
BUnion[TypeAlias[Union[builtins.dict[builtins.str,Any],None]],None]Ó
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions
None *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault 0:typing.overloadX‹m
read_csv"pandas.io.parsers.readers.read_csv":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*Å
filepath_or_bufferË
óUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadCsvBuffer[builtins.bytes],pandas._typing.ReadCsvBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathn
,pandas._typing.ReadCsvBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadCsvBufferh
*pandas._typing.ReadCsvBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadCsvBuffer*O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *U
	delimiterD
Union[builtins.str,None]
builtins.str"builtins.str
None *ê
headerÅ
LUnion[builtins.int,typing.Sequence[builtins.int],Literal[builtins.str],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *è
namesÅ
ùUnion[TypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]],None]“
ëTypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]]ò
ÜUnion[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]ù
0typing.MutableSequence[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSequence9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayç
(builtins.tuple[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.tuple 
builtins.range"builtins.range"pandas._typing.ListLikeHashable
None *Ø
	index_colù
nUnion[builtins.int,builtins.str,typing.Sequence[Union[builtins.str,builtins.int]],Literal[builtins.bool],None]
builtins.int"builtins.int
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"typing.Sequence:
Literal[builtins.bool]	
builtins.bool"builtins.bool
None *µ
usecols•
TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]é
ÂUnion[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]\
$typing.MutableSequence[builtins.str]
builtins.str"builtins.str"typing.MutableSequenceL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceD
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayK
CallableType[builtins.function]&
builtins.function"builtins.function
None"pandas._typing.UsecolsArgType *Ó
dtype‡
°Union[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],collections.defaultdict[Any,Any],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArgM
 collections.defaultdict[Any,Any]
Any
Any"collections.defaultdict
None *Â
engine÷
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]–
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.CSVEngine
None *Ñ

convertersÒ
÷Union[typing.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]],typing.Mapping[builtins.int,CallableType[builtins.function]],typing.Mapping[builtins.str,CallableType[builtins.function]],None]ë
Ptyping.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.int,CallableType[builtins.function]]
builtins.int"builtins.intK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mapping
None *]
true_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *^
false_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *6
skipinitialspace
builtins.bool"builtins.bool *°
skiprowsê
QUnion[builtins.int,typing.Sequence[builtins.int],CallableType[builtins.function]]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function *.

skipfooter
builtins.int"builtins.int *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ç
	na_values
_Union[typing.Sequence[builtins.str],typing.Mapping[builtins.str,typing.Sequence[builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence∫
:typing.Mapping[builtins.str,typing.Sequence[builtins.str]]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"typing.Mapping *5
keep_default_na
builtins.bool"builtins.bool */
	na_filter
builtins.bool"builtins.bool *-
verbose
builtins.bool"builtins.bool *6
skip_blank_lines
builtins.bool"builtins.bool *Ÿ
parse_dates≈
 Union[builtins.bool,builtins.list[builtins.int],builtins.list[builtins.str],typing.Sequence[typing.Sequence[builtins.int]],typing.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]]
builtins.bool"builtins.boolJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listë
.typing.Sequence[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"typing.Sequenceß
Ntyping.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"typing.Sequence"typing.Mapping *;
infer_datetime_format
builtins.bool"builtins.bool *3
keep_date_col
builtins.bool"builtins.bool *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *.
dayfirst
builtins.bool"builtins.bool *1
cache_dates
builtins.bool"builtins.bool *J
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
	chunksize
None *Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *U
	thousandsD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
decimal
builtins.str"builtins.str *Z
lineterminatorD
Union[builtins.str,None]
builtins.str"builtins.str
None *-
	quotechar
builtins.str"builtins.str *·
quoting—
iTypeAlias[Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]]∆
^Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int"pandas._typing.CSVQuoting *1
doublequote
builtins.bool"builtins.bool *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
commentD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *[
encoding_errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *o
dialect`
 Union[builtins.str,_csv.Dialect]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect *˘
on_bad_lines‰
hUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *6
delim_whitespace
builtins.bool"builtins.bool *0

low_memory
builtins.bool"builtins.bool *0

memory_map
builtins.bool"builtins.bool *û
float_precisionÜ
MUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *Ÿ
storage_options¡
BUnion[TypeAlias[Union[builtins.dict[builtins.str,Any],None]],None]Ó
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions
None *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault 0:typing.overloadX"â7
read_fwf"pandas.io.parsers.readers.read_fwfŒ
read_fwf"pandas.io.parsers.readers.read_fwf"T
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*Å
filepath_or_bufferË
óUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadCsvBuffer[builtins.bytes],pandas._typing.ReadCsvBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathn
,pandas._typing.ReadCsvBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadCsvBufferh
*pandas._typing.ReadCsvBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadCsvBuffer*‘
colspecs√
SUnion[typing.Sequence[Tuple[builtins.int,builtins.int]],Literal[builtins.str],None]¶
1typing.Sequence[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *ñ
widthsá
)Union[typing.Sequence[builtins.int],None]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence
None */
infer_nrows
builtins.int"builtins.int *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *H
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool*U
	chunksizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *
kwds
Any0:typing.overloadXä
read_fwf"pandas.io.parsers.readers.read_fwf"T
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*Å
filepath_or_bufferË
óUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadCsvBuffer[builtins.bytes],pandas._typing.ReadCsvBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathn
,pandas._typing.ReadCsvBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadCsvBufferh
*pandas._typing.ReadCsvBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadCsvBuffer*‘
colspecs√
SUnion[typing.Sequence[Tuple[builtins.int,builtins.int]],Literal[builtins.str],None]¶
1typing.Sequence[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *ñ
widthsá
)Union[typing.Sequence[builtins.int],None]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence
None */
infer_nrows
builtins.int"builtins.int *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *.
iterator
builtins.bool"builtins.bool *+
	chunksize
builtins.int"builtins.int*
kwds
Any0:typing.overloadX˙
read_fwf"pandas.io.parsers.readers.read_fwf":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*Å
filepath_or_bufferË
óUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadCsvBuffer[builtins.bytes],pandas._typing.ReadCsvBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathn
,pandas._typing.ReadCsvBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadCsvBufferh
*pandas._typing.ReadCsvBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadCsvBuffer*‘
colspecs√
SUnion[typing.Sequence[Tuple[builtins.int,builtins.int]],Literal[builtins.str],None]¶
1typing.Sequence[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *ñ
widthsá
)Union[typing.Sequence[builtins.int],None]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence
None */
infer_nrows
builtins.int"builtins.int *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *J
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
	chunksize
None *
kwds
Any0:typing.overloadX"¿º

read_table$pandas.io.parsers.readers.read_tableﬂi

read_table$pandas.io.parsers.readers.read_table"T
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*Å
filepath_or_bufferË
óUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadCsvBuffer[builtins.bytes],pandas._typing.ReadCsvBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathn
,pandas._typing.ReadCsvBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadCsvBufferh
*pandas._typing.ReadCsvBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadCsvBuffer*O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *U
	delimiterD
Union[builtins.str,None]
builtins.str"builtins.str
None *ê
headerÅ
LUnion[builtins.int,typing.Sequence[builtins.int],Literal[builtins.str],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *è
namesÅ
ùUnion[TypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]],None]“
ëTypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]]ò
ÜUnion[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]ù
0typing.MutableSequence[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSequence9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayç
(builtins.tuple[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.tuple 
builtins.range"builtins.range"pandas._typing.ListLikeHashable
None *Ø
	index_colù
nUnion[builtins.int,builtins.str,typing.Sequence[Union[builtins.str,builtins.int]],Literal[builtins.bool],None]
builtins.int"builtins.int
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"typing.Sequence:
Literal[builtins.bool]	
builtins.bool"builtins.bool
None *µ
usecols•
TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]é
ÂUnion[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]\
$typing.MutableSequence[builtins.str]
builtins.str"builtins.str"typing.MutableSequenceL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceD
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayK
CallableType[builtins.function]&
builtins.function"builtins.function
None"pandas._typing.UsecolsArgType *Ó
dtype‡
°Union[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],collections.defaultdict[Any,Any],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArgM
 collections.defaultdict[Any,Any]
Any
Any"collections.defaultdict
None *Â
engine÷
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]–
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.CSVEngine
None *Ñ

convertersÒ
÷Union[typing.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]],typing.Mapping[builtins.int,CallableType[builtins.function]],typing.Mapping[builtins.str,CallableType[builtins.function]],None]ë
Ptyping.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.int,CallableType[builtins.function]]
builtins.int"builtins.intK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mapping
None *]
true_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *^
false_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *6
skipinitialspace
builtins.bool"builtins.bool *°
skiprowsê
QUnion[builtins.int,typing.Sequence[builtins.int],CallableType[builtins.function]]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function *.

skipfooter
builtins.int"builtins.int *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ç
	na_values
_Union[typing.Sequence[builtins.str],typing.Mapping[builtins.str,typing.Sequence[builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence∫
:typing.Mapping[builtins.str,typing.Sequence[builtins.str]]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"typing.Mapping *5
keep_default_na
builtins.bool"builtins.bool */
	na_filter
builtins.bool"builtins.bool *-
verbose
builtins.bool"builtins.bool *6
skip_blank_lines
builtins.bool"builtins.bool *Ÿ
parse_dates≈
 Union[builtins.bool,builtins.list[builtins.int],builtins.list[builtins.str],typing.Sequence[typing.Sequence[builtins.int]],typing.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]]
builtins.bool"builtins.boolJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listë
.typing.Sequence[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"typing.Sequenceß
Ntyping.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"typing.Sequence"typing.Mapping *;
infer_datetime_format
builtins.bool"builtins.bool *3
keep_date_col
builtins.bool"builtins.bool *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *.
dayfirst
builtins.bool"builtins.bool *1
cache_dates
builtins.bool"builtins.bool *H
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool*U
	chunksizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *U
	thousandsD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
decimal
builtins.str"builtins.str *Z
lineterminatorD
Union[builtins.str,None]
builtins.str"builtins.str
None *-
	quotechar
builtins.str"builtins.str *·
quoting—
iTypeAlias[Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]]∆
^Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int"pandas._typing.CSVQuoting *1
doublequote
builtins.bool"builtins.bool *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
commentD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *[
encoding_errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *o
dialect`
 Union[builtins.str,_csv.Dialect]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect *˘
on_bad_lines‰
hUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *6
delim_whitespace
builtins.bool"builtins.bool *0

low_memory
builtins.bool"builtins.bool *0

memory_map
builtins.bool"builtins.bool *û
float_precisionÜ
MUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *Ÿ
storage_options¡
BUnion[TypeAlias[Union[builtins.dict[builtins.str,Any],None]],None]Ó
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions
None 0:typing.overloadXõi

read_table$pandas.io.parsers.readers.read_table"T
(pandas.io.parsers.readers.TextFileReader"(pandas.io.parsers.readers.TextFileReader*Å
filepath_or_bufferË
óUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadCsvBuffer[builtins.bytes],pandas._typing.ReadCsvBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathn
,pandas._typing.ReadCsvBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadCsvBufferh
*pandas._typing.ReadCsvBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadCsvBuffer*O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *U
	delimiterD
Union[builtins.str,None]
builtins.str"builtins.str
None *ê
headerÅ
LUnion[builtins.int,typing.Sequence[builtins.int],Literal[builtins.str],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *è
namesÅ
ùUnion[TypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]],None]“
ëTypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]]ò
ÜUnion[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]ù
0typing.MutableSequence[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSequence9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayç
(builtins.tuple[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.tuple 
builtins.range"builtins.range"pandas._typing.ListLikeHashable
None *Ø
	index_colù
nUnion[builtins.int,builtins.str,typing.Sequence[Union[builtins.str,builtins.int]],Literal[builtins.bool],None]
builtins.int"builtins.int
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"typing.Sequence:
Literal[builtins.bool]	
builtins.bool"builtins.bool
None *µ
usecols•
TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]é
ÂUnion[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]\
$typing.MutableSequence[builtins.str]
builtins.str"builtins.str"typing.MutableSequenceL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceD
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayK
CallableType[builtins.function]&
builtins.function"builtins.function
None"pandas._typing.UsecolsArgType *Ó
dtype‡
°Union[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],collections.defaultdict[Any,Any],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArgM
 collections.defaultdict[Any,Any]
Any
Any"collections.defaultdict
None *Â
engine÷
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]–
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.CSVEngine
None *Ñ

convertersÒ
÷Union[typing.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]],typing.Mapping[builtins.int,CallableType[builtins.function]],typing.Mapping[builtins.str,CallableType[builtins.function]],None]ë
Ptyping.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.int,CallableType[builtins.function]]
builtins.int"builtins.intK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mapping
None *]
true_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *^
false_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *6
skipinitialspace
builtins.bool"builtins.bool *°
skiprowsê
QUnion[builtins.int,typing.Sequence[builtins.int],CallableType[builtins.function]]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function *.

skipfooter
builtins.int"builtins.int *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ç
	na_values
_Union[typing.Sequence[builtins.str],typing.Mapping[builtins.str,typing.Sequence[builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence∫
:typing.Mapping[builtins.str,typing.Sequence[builtins.str]]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"typing.Mapping *5
keep_default_na
builtins.bool"builtins.bool */
	na_filter
builtins.bool"builtins.bool *-
verbose
builtins.bool"builtins.bool *6
skip_blank_lines
builtins.bool"builtins.bool *Ÿ
parse_dates≈
 Union[builtins.bool,builtins.list[builtins.int],builtins.list[builtins.str],typing.Sequence[typing.Sequence[builtins.int]],typing.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]]
builtins.bool"builtins.boolJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listë
.typing.Sequence[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"typing.Sequenceß
Ntyping.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"typing.Sequence"typing.Mapping *;
infer_datetime_format
builtins.bool"builtins.bool *3
keep_date_col
builtins.bool"builtins.bool *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *.
dayfirst
builtins.bool"builtins.bool *1
cache_dates
builtins.bool"builtins.bool *.
iterator
builtins.bool"builtins.bool *+
	chunksize
builtins.int"builtins.int*Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *U
	thousandsD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
decimal
builtins.str"builtins.str *Z
lineterminatorD
Union[builtins.str,None]
builtins.str"builtins.str
None *-
	quotechar
builtins.str"builtins.str *·
quoting—
iTypeAlias[Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]]∆
^Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int"pandas._typing.CSVQuoting *1
doublequote
builtins.bool"builtins.bool *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
commentD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *[
encoding_errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *o
dialect`
 Union[builtins.str,_csv.Dialect]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect *˘
on_bad_lines‰
hUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *6
delim_whitespace
builtins.bool"builtins.bool *0

low_memory
builtins.bool"builtins.bool *0

memory_map
builtins.bool"builtins.bool *û
float_precisionÜ
MUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *Ÿ
storage_options¡
BUnion[TypeAlias[Union[builtins.dict[builtins.str,Any],None]],None]Ó
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions
None 0:typing.overloadXãi

read_table$pandas.io.parsers.readers.read_table":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*Å
filepath_or_bufferË
óUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadCsvBuffer[builtins.bytes],pandas._typing.ReadCsvBuffer[builtins.str]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathn
,pandas._typing.ReadCsvBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadCsvBufferh
*pandas._typing.ReadCsvBuffer[builtins.str]
builtins.str"builtins.str"pandas._typing.ReadCsvBuffer*O
sepD
Union[builtins.str,None]
builtins.str"builtins.str
None *U
	delimiterD
Union[builtins.str,None]
builtins.str"builtins.str
None *ê
headerÅ
LUnion[builtins.int,typing.Sequence[builtins.int],Literal[builtins.str],None]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence7
Literal[builtins.str]	
builtins.str"builtins.str
None *è
namesÅ
ùUnion[TypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]],None]“
ëTypeAlias[Union[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]]ò
ÜUnion[typing.MutableSequence[pandas._typing.HashableT],numpy.ndarray[Any,Any],builtins.tuple[pandas._typing.HashableT],builtins.range]ù
0typing.MutableSequence[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"typing.MutableSequence9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayç
(builtins.tuple[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.tuple 
builtins.range"builtins.range"pandas._typing.ListLikeHashable
None *Ø
	index_colù
nUnion[builtins.int,builtins.str,typing.Sequence[Union[builtins.str,builtins.int]],Literal[builtins.bool],None]
builtins.int"builtins.int
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.str,builtins.int]]`
 Union[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"typing.Sequence:
Literal[builtins.bool]	
builtins.bool"builtins.bool
None *µ
usecols•
TypeAlias[Union[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]]é
ÂUnion[typing.MutableSequence[builtins.str],builtins.tuple[builtins.str],typing.Sequence[builtins.int],pandas.core.series.Series[Any],pandas.core.indexes.base.Index[Any],numpy.ndarray[Any,Any],CallableType[builtins.function],None]\
$typing.MutableSequence[builtins.str]
builtins.str"builtins.str"typing.MutableSequenceL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tupleN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceD
pandas.core.series.Series[Any]
Any"pandas.core.series.SeriesN
#pandas.core.indexes.base.Index[Any]
Any"pandas.core.indexes.base.Index9
numpy.ndarray[Any,Any]
Any
Any"numpy.ndarrayK
CallableType[builtins.function]&
builtins.function"builtins.function
None"pandas._typing.UsecolsArgType *Ó
dtype‡
°Union[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],collections.defaultdict[Any,Any],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArgM
 collections.defaultdict[Any,Any]
Any
Any"collections.defaultdict
None *Â
engine÷
uUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]],None]–
iTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]∆
^Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.CSVEngine
None *Ñ

convertersÒ
÷Union[typing.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]],typing.Mapping[builtins.int,CallableType[builtins.function]],typing.Mapping[builtins.str,CallableType[builtins.function]],None]ë
Ptyping.Mapping[Union[builtins.int,builtins.str],CallableType[builtins.function]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.int,CallableType[builtins.function]]
builtins.int"builtins.intK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mappingπ
<typing.Mapping[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function"typing.Mapping
None *]
true_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *^
false_valuesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *6
skipinitialspace
builtins.bool"builtins.bool *°
skiprowsê
QUnion[builtins.int,typing.Sequence[builtins.int],CallableType[builtins.function]]
builtins.int"builtins.intN
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.SequenceK
CallableType[builtins.function]&
builtins.function"builtins.function *.

skipfooter
builtins.int"builtins.int *Q
nrowsD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ç
	na_values
_Union[typing.Sequence[builtins.str],typing.Mapping[builtins.str,typing.Sequence[builtins.str]]]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence∫
:typing.Mapping[builtins.str,typing.Sequence[builtins.str]]
builtins.str"builtins.strN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence"typing.Mapping *5
keep_default_na
builtins.bool"builtins.bool */
	na_filter
builtins.bool"builtins.bool *-
verbose
builtins.bool"builtins.bool *6
skip_blank_lines
builtins.bool"builtins.bool *Ÿ
parse_dates≈
 Union[builtins.bool,builtins.list[builtins.int],builtins.list[builtins.str],typing.Sequence[typing.Sequence[builtins.int]],typing.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]]
builtins.bool"builtins.boolJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listë
.typing.Sequence[typing.Sequence[builtins.int]]N
typing.Sequence[builtins.int]
builtins.int"builtins.int"typing.Sequence"typing.Sequenceß
Ntyping.Mapping[builtins.str,typing.Sequence[Union[builtins.int,builtins.str]]]
builtins.str"builtins.str¶
1typing.Sequence[Union[builtins.int,builtins.str]]`
 Union[builtins.int,builtins.str]
builtins.int"builtins.int
builtins.str"builtins.str"typing.Sequence"typing.Mapping *;
infer_datetime_format
builtins.bool"builtins.bool *3
keep_date_col
builtins.bool"builtins.bool *Ñ
date_format
DUnion[builtins.dict[typing.Hashable,builtins.str],builtins.str,None]~
+builtins.dict[typing.Hashable,builtins.str]"
typing.Hashable"typing.Hashable
builtins.str"builtins.str"builtins.dict
builtins.str"builtins.str
None *.
dayfirst
builtins.bool"builtins.bool *1
cache_dates
builtins.bool"builtins.bool *J
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
	chunksize
None *Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *U
	thousandsD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
decimal
builtins.str"builtins.str *Z
lineterminatorD
Union[builtins.str,None]
builtins.str"builtins.str
None *-
	quotechar
builtins.str"builtins.str *·
quoting—
iTypeAlias[Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]]∆
^Union[Literal[builtins.int],Literal[builtins.int],Literal[builtins.int],Literal[builtins.int]]7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int7
Literal[builtins.int]	
builtins.int"builtins.int"pandas._typing.CSVQuoting *1
doublequote
builtins.bool"builtins.bool *V

escapecharD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
commentD
Union[builtins.str,None]
builtins.str"builtins.str
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *[
encoding_errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *o
dialect`
 Union[builtins.str,_csv.Dialect]
builtins.str"builtins.str
_csv.Dialect"_csv.Dialect *˘
on_bad_lines‰
hUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],CallableType[builtins.function]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function *6
delim_whitespace
builtins.bool"builtins.bool *0

low_memory
builtins.bool"builtins.bool *0

memory_map
builtins.bool"builtins.bool *û
float_precisionÜ
MUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *Ÿ
storage_options¡
BUnion[TypeAlias[Union[builtins.dict[builtins.str,Any],None]],None]Ó
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions
None 0:typing.overloadX"ﬁ:
read_hdfpandas.io.pytables.read_hdf∏
read_hdfpandas.io.pytables.read_hdf"D
 pandas.io.pytables.TableIterator" pandas.io.pytables.TableIterator*ü
path_or_bufç
[Union[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas.io.pytables.HDFStore]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePath:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*1
key&
Union[Any,None]
Any
None *Ñ
mode˜
HUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *√
errors¥
†Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *‘
where∆
ÖUnion[builtins.str,pandas.core.computation.pytables.PyTablesExpr,typing.Sequence[pandas.core.computation.pytables.PyTablesExpr],None]
builtins.str"builtins.str^
-pandas.core.computation.pytables.PyTablesExpr"-pandas.core.computation.pytables.PyTablesExpr±
>typing.Sequence[pandas.core.computation.pytables.PyTablesExpr]^
-pandas.core.computation.pytables.PyTablesExpr"-pandas.core.computation.pytables.PyTablesExpr"typing.Sequence
None *Q
startD
Union[builtins.int,None]
builtins.int"builtins.int
None *P
stopD
Union[builtins.int,None]
builtins.int"builtins.int
None *ﬂ
columnsœ
3Union[builtins.list[pandas._typing.HashableT],None]ã
'builtins.list[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list
None *H
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool*U
	chunksizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *
kwargs
Any0:typing.overloadXÙ
read_hdfpandas.io.pytables.read_hdf"D
 pandas.io.pytables.TableIterator" pandas.io.pytables.TableIterator*ü
path_or_bufç
[Union[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas.io.pytables.HDFStore]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePath:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*1
key&
Union[Any,None]
Any
None *Ñ
mode˜
HUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *√
errors¥
†Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *‘
where∆
ÖUnion[builtins.str,pandas.core.computation.pytables.PyTablesExpr,typing.Sequence[pandas.core.computation.pytables.PyTablesExpr],None]
builtins.str"builtins.str^
-pandas.core.computation.pytables.PyTablesExpr"-pandas.core.computation.pytables.PyTablesExpr±
>typing.Sequence[pandas.core.computation.pytables.PyTablesExpr]^
-pandas.core.computation.pytables.PyTablesExpr"-pandas.core.computation.pytables.PyTablesExpr"typing.Sequence
None *Q
startD
Union[builtins.int,None]
builtins.int"builtins.int
None *P
stopD
Union[builtins.int,None]
builtins.int"builtins.int
None *ﬂ
columnsœ
3Union[builtins.list[pandas._typing.HashableT],None]ã
'builtins.list[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list
None *.
iterator
builtins.bool"builtins.bool *+
	chunksize
builtins.int"builtins.int*
kwargs
Any0:typing.overloadXÇ
read_hdfpandas.io.pytables.read_hdf"«
AUnion[pandas.core.frame.DataFrame,pandas.core.series.Series[Any]]:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrameD
pandas.core.series.Series[Any]
Any"pandas.core.series.Series*ü
path_or_bufç
[Union[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas.io.pytables.HDFStore]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePath:
pandas.io.pytables.HDFStore"pandas.io.pytables.HDFStore*1
key&
Union[Any,None]
Any
None *Ñ
mode˜
HUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *√
errors¥
†Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *‘
where∆
ÖUnion[builtins.str,pandas.core.computation.pytables.PyTablesExpr,typing.Sequence[pandas.core.computation.pytables.PyTablesExpr],None]
builtins.str"builtins.str^
-pandas.core.computation.pytables.PyTablesExpr"-pandas.core.computation.pytables.PyTablesExpr±
>typing.Sequence[pandas.core.computation.pytables.PyTablesExpr]^
-pandas.core.computation.pytables.PyTablesExpr"-pandas.core.computation.pytables.PyTablesExpr"typing.Sequence
None *Q
startD
Union[builtins.int,None]
builtins.int"builtins.int
None *P
stopD
Union[builtins.int,None]
builtins.int"builtins.int
None *ﬂ
columnsœ
3Union[builtins.list[pandas._typing.HashableT],None]ã
'builtins.list[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list
None *J
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool *
	chunksize
None *
kwargs
Any0:typing.overloadX"°o
read_sas pandas.io.sas.sasreader.read_sasö
read_sas pandas.io.sas.sasreader.read_sas"N
%pandas.io.sas.sas7bdat.SAS7BDATReader"%pandas.io.sas.sas7bdat.SAS7BDATReader*‚
filepath_or_buffer…
iUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.bytes]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer*C
format7
Literal[builtins.str]	
builtins.str"builtins.str*Z
indexM
Union[typing.Hashable,None]"
typing.Hashable"typing.Hashable
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
	chunksize
builtins.int"builtins.int*.
iterator
builtins.bool"builtins.bool *Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions 0:typing.overloadXñ
read_sas pandas.io.sas.sasreader.read_sas"J
#pandas.io.sas.sas_xport.XportReader"#pandas.io.sas.sas_xport.XportReader*‚
filepath_or_buffer…
iUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.bytes]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer*C
format7
Literal[builtins.str]	
builtins.str"builtins.str*Z
indexM
Union[typing.Hashable,None]"
typing.Hashable"typing.Hashable
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
	chunksize
builtins.int"builtins.int*.
iterator
builtins.bool"builtins.bool *Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions 0:typing.overloadXê
read_sas pandas.io.sas.sasreader.read_sas"
PUnion[pandas.io.sas.sas_xport.XportReader,pandas.io.sas.sas7bdat.SAS7BDATReader]J
#pandas.io.sas.sas_xport.XportReader"#pandas.io.sas.sas_xport.XportReaderN
%pandas.io.sas.sas7bdat.SAS7BDATReader"%pandas.io.sas.sas7bdat.SAS7BDATReader*‚
filepath_or_buffer…
iUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.bytes]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer*
format
None *Z
indexM
Union[typing.Hashable,None]"
typing.Hashable"typing.Hashable
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *+
	chunksize
builtins.int"builtins.int*.
iterator
builtins.bool"builtins.bool *Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions 0:typing.overloadXﬁ
read_sas pandas.io.sas.sasreader.read_sas"N
%pandas.io.sas.sas7bdat.SAS7BDATReader"%pandas.io.sas.sas7bdat.SAS7BDATReader*‚
filepath_or_buffer…
iUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.bytes]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer*C
format7
Literal[builtins.str]	
builtins.str"builtins.str*Z
indexM
Union[typing.Hashable,None]"
typing.Hashable"typing.Hashable
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *U
	chunksizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *H
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool*Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions 0:typing.overloadX⁄
read_sas pandas.io.sas.sasreader.read_sas"J
#pandas.io.sas.sas_xport.XportReader"#pandas.io.sas.sas_xport.XportReader*‚
filepath_or_buffer…
iUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.bytes]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer*C
format7
Literal[builtins.str]	
builtins.str"builtins.str*Z
indexM
Union[typing.Hashable,None]"
typing.Hashable"typing.Hashable
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *U
	chunksizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *H
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool*Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions 0:typing.overloadX‘
read_sas pandas.io.sas.sasreader.read_sas"
PUnion[pandas.io.sas.sas_xport.XportReader,pandas.io.sas.sas7bdat.SAS7BDATReader]J
#pandas.io.sas.sas_xport.XportReader"#pandas.io.sas.sas_xport.XportReaderN
%pandas.io.sas.sas7bdat.SAS7BDATReader"%pandas.io.sas.sas7bdat.SAS7BDATReader*‚
filepath_or_buffer…
iUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.bytes]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer*
format
None *Z
indexM
Union[typing.Hashable,None]"
typing.Hashable"typing.Hashable
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *U
	chunksizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *H
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool*Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions 0:typing.overloadXî
read_sas pandas.io.sas.sasreader.read_sas":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*‚
filepath_or_buffer…
iUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.bytes]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer*∆
format∑
7Union[Literal[builtins.str],Literal[builtins.str],None]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str
None *Z
indexM
Union[typing.Hashable,None]"
typing.Hashable"typing.Hashable
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *
	chunksize
None *J
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool *Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions 0:typing.overloadX"¬j
read_sqlpandas.io.sql.read_sql«5
read_sqlpandas.io.sql.read_sql"õ
7typing.Generator[pandas.core.frame.DataFrame,None,None]:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
None
None"typing.Generator*ƒ
sql∫
.TypeAlias[Union[builtins.str,Any,Any,Any,Any]]i
#Union[builtins.str,Any,Any,Any,Any]
builtins.str"builtins.str
Any
Any
Any
Any"pandas.io.sql._SQLStatement*ˇ
conı
<TypeAlias[Union[builtins.str,Any,sqlite3.dbapi2.Connection]]î
1Union[builtins.str,Any,sqlite3.dbapi2.Connection]
builtins.str"builtins.str
Any6
sqlite3.dbapi2.Connection"sqlite3.dbapi2.Connection"pandas.io.sql._SQLConnection*æ
	index_col¨
4Union[builtins.str,builtins.list[builtins.str],None]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *2
coerce_float
builtins.bool"builtins.bool *ò
paramsâ
˙Union[builtins.list[TypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]],builtins.complex]]],builtins.tuple[Unknown],typing.Mapping[builtins.str,Unknown],None]¯
±builtins.list[TypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]],builtins.complex]]]≤
¢TypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]],builtins.complex]]Ò

óUnion[TypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]],builtins.complex]¨
ˇTypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]]Ö
ÙUnion[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes
datetime.date"datetime.date&
datetime.datetime"datetime.datetime(
datetime.timedelta"datetime.timedelta$
numpy.datetime64"numpy.datetime64&
numpy.timedelta64"numpy.timedelta64
builtins.bool"builtins.bool
builtins.int"builtins.int 
builtins.float"builtins.floatT
(pandas._libs.tslibs.timestamps.Timestamp"(pandas._libs.tslibs.timestamps.TimestampT
(pandas._libs.tslibs.timedeltas.Timedelta"(pandas._libs.tslibs.timedeltas.Timedelta"pandas._typing.IndexIterScalar$
builtins.complex"builtins.complex"pandas._typing.Scalar"builtins.list+
builtins.tuple[Unknown] "builtins.tupleV
$typing.Mapping[builtins.str,Unknown]
builtins.str"builtins.str "typing.Mapping
None *∏
parse_dates§
åUnion[builtins.list[builtins.str],builtins.dict[builtins.str,builtins.str],builtins.dict[builtins.str,builtins.dict[builtins.str,Any]],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict√
;builtins.dict[builtins.str,builtins.dict[builtins.str,Any]]
builtins.str"builtins.strW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"builtins.dict
None *Y
columnsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *+
	chunksize
builtins.int"builtins.int*˛
dtype
ÄUnion[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArg
None *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault 0:typing.overloadX”4
read_sqlpandas.io.sql.read_sql":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*ƒ
sql∫
.TypeAlias[Union[builtins.str,Any,Any,Any,Any]]i
#Union[builtins.str,Any,Any,Any,Any]
builtins.str"builtins.str
Any
Any
Any
Any"pandas.io.sql._SQLStatement*ˇ
conı
<TypeAlias[Union[builtins.str,Any,sqlite3.dbapi2.Connection]]î
1Union[builtins.str,Any,sqlite3.dbapi2.Connection]
builtins.str"builtins.str
Any6
sqlite3.dbapi2.Connection"sqlite3.dbapi2.Connection"pandas.io.sql._SQLConnection*æ
	index_col¨
4Union[builtins.str,builtins.list[builtins.str],None]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *2
coerce_float
builtins.bool"builtins.bool *ò
paramsâ
˙Union[builtins.list[TypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]],builtins.complex]]],builtins.tuple[Unknown],typing.Mapping[builtins.str,Unknown],None]¯
±builtins.list[TypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]],builtins.complex]]]≤
¢TypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]],builtins.complex]]Ò

óUnion[TypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]],builtins.complex]¨
ˇTypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]]Ö
ÙUnion[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes
datetime.date"datetime.date&
datetime.datetime"datetime.datetime(
datetime.timedelta"datetime.timedelta$
numpy.datetime64"numpy.datetime64&
numpy.timedelta64"numpy.timedelta64
builtins.bool"builtins.bool
builtins.int"builtins.int 
builtins.float"builtins.floatT
(pandas._libs.tslibs.timestamps.Timestamp"(pandas._libs.tslibs.timestamps.TimestampT
(pandas._libs.tslibs.timedeltas.Timedelta"(pandas._libs.tslibs.timedeltas.Timedelta"pandas._typing.IndexIterScalar$
builtins.complex"builtins.complex"pandas._typing.Scalar"builtins.list+
builtins.tuple[Unknown] "builtins.tupleV
$typing.Mapping[builtins.str,Unknown]
builtins.str"builtins.str "typing.Mapping
None *∏
parse_dates§
åUnion[builtins.list[builtins.str],builtins.dict[builtins.str,builtins.str],builtins.dict[builtins.str,builtins.dict[builtins.str,Any]],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict√
;builtins.dict[builtins.str,builtins.dict[builtins.str,Any]]
builtins.str"builtins.strW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"builtins.dict
None *Y
columnsJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *
	chunksize
None *˛
dtype
ÄUnion[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArg
None *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault 0:typing.overloadX"∞i
read_sql_querypandas.io.sql.read_sql_query¯4
read_sql_querypandas.io.sql.read_sql_query"õ
7typing.Generator[pandas.core.frame.DataFrame,None,None]:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
None
None"typing.Generator*ƒ
sql∫
.TypeAlias[Union[builtins.str,Any,Any,Any,Any]]i
#Union[builtins.str,Any,Any,Any,Any]
builtins.str"builtins.str
Any
Any
Any
Any"pandas.io.sql._SQLStatement*ˇ
conı
<TypeAlias[Union[builtins.str,Any,sqlite3.dbapi2.Connection]]î
1Union[builtins.str,Any,sqlite3.dbapi2.Connection]
builtins.str"builtins.str
Any6
sqlite3.dbapi2.Connection"sqlite3.dbapi2.Connection"pandas.io.sql._SQLConnection*æ
	index_col¨
4Union[builtins.str,builtins.list[builtins.str],None]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *2
coerce_float
builtins.bool"builtins.bool *ò
paramsâ
˙Union[builtins.list[TypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]],builtins.complex]]],builtins.tuple[Unknown],typing.Mapping[builtins.str,Unknown],None]¯
±builtins.list[TypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]],builtins.complex]]]≤
¢TypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]],builtins.complex]]Ò

óUnion[TypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]],builtins.complex]¨
ˇTypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]]Ö
ÙUnion[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes
datetime.date"datetime.date&
datetime.datetime"datetime.datetime(
datetime.timedelta"datetime.timedelta$
numpy.datetime64"numpy.datetime64&
numpy.timedelta64"numpy.timedelta64
builtins.bool"builtins.bool
builtins.int"builtins.int 
builtins.float"builtins.floatT
(pandas._libs.tslibs.timestamps.Timestamp"(pandas._libs.tslibs.timestamps.TimestampT
(pandas._libs.tslibs.timedeltas.Timedelta"(pandas._libs.tslibs.timedeltas.Timedelta"pandas._typing.IndexIterScalar$
builtins.complex"builtins.complex"pandas._typing.Scalar"builtins.list+
builtins.tuple[Unknown] "builtins.tupleV
$typing.Mapping[builtins.str,Unknown]
builtins.str"builtins.str "typing.Mapping
None *∏
parse_dates§
åUnion[builtins.list[builtins.str],builtins.dict[builtins.str,builtins.str],builtins.dict[builtins.str,builtins.dict[builtins.str,Any]],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict√
;builtins.dict[builtins.str,builtins.dict[builtins.str,Any]]
builtins.str"builtins.strW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"builtins.dict
None *+
	chunksize
builtins.int"builtins.int*˛
dtype
ÄUnion[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArg
None *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault 0:typing.overloadXÑ4
read_sql_querypandas.io.sql.read_sql_query":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*ƒ
sql∫
.TypeAlias[Union[builtins.str,Any,Any,Any,Any]]i
#Union[builtins.str,Any,Any,Any,Any]
builtins.str"builtins.str
Any
Any
Any
Any"pandas.io.sql._SQLStatement*ˇ
conı
<TypeAlias[Union[builtins.str,Any,sqlite3.dbapi2.Connection]]î
1Union[builtins.str,Any,sqlite3.dbapi2.Connection]
builtins.str"builtins.str
Any6
sqlite3.dbapi2.Connection"sqlite3.dbapi2.Connection"pandas.io.sql._SQLConnection*æ
	index_col¨
4Union[builtins.str,builtins.list[builtins.str],None]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *2
coerce_float
builtins.bool"builtins.bool *ò
paramsâ
˙Union[builtins.list[TypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]],builtins.complex]]],builtins.tuple[Unknown],typing.Mapping[builtins.str,Unknown],None]¯
±builtins.list[TypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]],builtins.complex]]]≤
¢TypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]],builtins.complex]]Ò

óUnion[TypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]],builtins.complex]¨
ˇTypeAlias[Union[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]]Ö
ÙUnion[builtins.str,builtins.bytes,datetime.date,datetime.datetime,datetime.timedelta,numpy.datetime64,numpy.timedelta64,builtins.bool,builtins.int,builtins.float,pandas._libs.tslibs.timestamps.Timestamp,pandas._libs.tslibs.timedeltas.Timedelta]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes
datetime.date"datetime.date&
datetime.datetime"datetime.datetime(
datetime.timedelta"datetime.timedelta$
numpy.datetime64"numpy.datetime64&
numpy.timedelta64"numpy.timedelta64
builtins.bool"builtins.bool
builtins.int"builtins.int 
builtins.float"builtins.floatT
(pandas._libs.tslibs.timestamps.Timestamp"(pandas._libs.tslibs.timestamps.TimestampT
(pandas._libs.tslibs.timedeltas.Timedelta"(pandas._libs.tslibs.timedeltas.Timedelta"pandas._typing.IndexIterScalar$
builtins.complex"builtins.complex"pandas._typing.Scalar"builtins.list+
builtins.tuple[Unknown] "builtins.tupleV
$typing.Mapping[builtins.str,Unknown]
builtins.str"builtins.str "typing.Mapping
None *∏
parse_dates§
åUnion[builtins.list[builtins.str],builtins.dict[builtins.str,builtins.str],builtins.dict[builtins.str,builtins.dict[builtins.str,Any]],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict√
;builtins.dict[builtins.str,builtins.dict[builtins.str,Any]]
builtins.str"builtins.strW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"builtins.dict
None *
	chunksize
None *˛
dtype
ÄUnion[TypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]],None]ﬁ
ÙTypeAlias[Union[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]]…
ÈUnion[TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]],typing.Mapping[Any,Unknown]]û	
∆TypeAlias[Union[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]]∫
ªUnion[pandas.core.dtypes.base.ExtensionDtype,TypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]]P
&pandas.core.dtypes.base.ExtensionDtype"&pandas.core.dtypes.base.ExtensionDtype•
çTypeAlias[Union[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]]¯
ÇUnion[builtins.str,numpy.dtype[numpy.generic],Type[builtins.str],Type[builtins.complex],Type[builtins.bool],Type[builtins.object]]
builtins.str"builtins.strI
numpy.dtype[numpy.generic]
numpy.generic"numpy.generic"numpy.dtype:
Type[builtins.str]
builtins.str"builtins.str"typeF
Type[builtins.complex]$
builtins.complex"builtins.complex"type=
Type[builtins.bool]
builtins.bool"builtins.bool"typeC
Type[builtins.object]"
builtins.object"builtins.object"type"pandas._typing.NpDtype"pandas._typing.Dtype8
typing.Mapping[Any,Unknown]
Any "typing.Mapping"pandas._typing.DtypeArg
None *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault 0:typing.overloadX"ñ"
read_sql_tablepandas.io.sql.read_sql_table´
read_sql_tablepandas.io.sql.read_sql_table"õ
7typing.Generator[pandas.core.frame.DataFrame,None,None]:
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame
None
None"typing.Generator*,

table_name
builtins.str"builtins.str*ˇ
conı
<TypeAlias[Union[builtins.str,Any,sqlite3.dbapi2.Connection]]î
1Union[builtins.str,Any,sqlite3.dbapi2.Connection]
builtins.str"builtins.str
Any6
sqlite3.dbapi2.Connection"sqlite3.dbapi2.Connection"pandas.io.sql._SQLConnection*R
schemaD
Union[builtins.str,None]
builtins.str"builtins.str
None *æ
	index_col¨
4Union[builtins.str,builtins.list[builtins.str],None]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *2
coerce_float
builtins.bool"builtins.bool *∏
parse_dates§
åUnion[builtins.list[builtins.str],builtins.dict[builtins.str,builtins.str],builtins.dict[builtins.str,builtins.dict[builtins.str,Any]],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict√
;builtins.dict[builtins.str,builtins.dict[builtins.str,Any]]
builtins.str"builtins.strW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"builtins.dict
None *ë
columnsÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *+
	chunksize
builtins.int"builtins.int*“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault 0:typing.overloadX∑
read_sql_tablepandas.io.sql.read_sql_table":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*,

table_name
builtins.str"builtins.str*ˇ
conı
<TypeAlias[Union[builtins.str,Any,sqlite3.dbapi2.Connection]]î
1Union[builtins.str,Any,sqlite3.dbapi2.Connection]
builtins.str"builtins.str
Any6
sqlite3.dbapi2.Connection"sqlite3.dbapi2.Connection"pandas.io.sql._SQLConnection*R
schemaD
Union[builtins.str,None]
builtins.str"builtins.str
None *æ
	index_col¨
4Union[builtins.str,builtins.list[builtins.str],None]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *2
coerce_float
builtins.bool"builtins.bool *∏
parse_dates§
åUnion[builtins.list[builtins.str],builtins.dict[builtins.str,builtins.str],builtins.dict[builtins.str,builtins.dict[builtins.str,Any]],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict√
;builtins.dict[builtins.str,builtins.dict[builtins.str,Any]]
builtins.str"builtins.strW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"builtins.dict
None *ë
columnsÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *
	chunksize
None *“
dtype_backendº
tUnion[TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]],TypeAlias[Literal[pandas._libs.lib._NoDefault]]]â
=TypeAlias[Union[Literal[builtins.str],Literal[builtins.str]]]®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"pandas._typing.DtypeBackendµ
/TypeAlias[Literal[pandas._libs.lib._NoDefault]]d
$Literal[pandas._libs.lib._NoDefault]	:
pandas._libs.lib._NoDefault"pandas._libs.lib._NoDefault"pandas._libs.lib.NoDefault 0:typing.overloadX"±<

read_statapandas.io.stata.read_stata™

read_statapandas.io.stata.read_stata":
pandas.io.stata.StataReader"pandas.io.stata.StataReader*‚
filepath_or_buffer…
iUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.bytes]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer*3
convert_dates
builtins.bool"builtins.bool *:
convert_categoricals
builtins.bool"builtins.bool *U
	index_colD
Union[builtins.str,None]
builtins.str"builtins.str
None *5
convert_missing
builtins.bool"builtins.bool *5
preserve_dtypes
builtins.bool"builtins.bool *ﬂ
columnsœ
3Union[builtins.list[pandas._typing.HashableT],None]ã
'builtins.list[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list
None *8
order_categoricals
builtins.bool"builtins.bool *U
	chunksizeD
Union[builtins.int,None]
builtins.int"builtins.int
None *H
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool*Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *Ü
storage_optionsÓ
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions 0:typing.overloadXÊ

read_statapandas.io.stata.read_stata":
pandas.io.stata.StataReader"pandas.io.stata.StataReader*‚
filepath_or_buffer…
iUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.bytes]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer*3
convert_dates
builtins.bool"builtins.bool *:
convert_categoricals
builtins.bool"builtins.bool *U
	index_colD
Union[builtins.str,None]
builtins.str"builtins.str
None *5
convert_missing
builtins.bool"builtins.bool *5
preserve_dtypes
builtins.bool"builtins.bool *ﬂ
columnsœ
3Union[builtins.list[pandas._typing.HashableT],None]ã
'builtins.list[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list
None *8
order_categoricals
builtins.bool"builtins.bool *+
	chunksize
builtins.int"builtins.int*.
iterator
builtins.bool"builtins.bool *Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *Ü
storage_optionsÓ
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions 0:typing.overloadX

read_statapandas.io.stata.read_stata":
pandas.core.frame.DataFrame"pandas.core.frame.DataFrame*‚
filepath_or_buffer…
iUnion[TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]],pandas._typing.ReadBuffer[builtins.bytes]]Ô
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"pandas._typing.FilePathh
)pandas._typing.ReadBuffer[builtins.bytes] 
builtins.bytes"builtins.bytes"pandas._typing.ReadBuffer*3
convert_dates
builtins.bool"builtins.bool *:
convert_categoricals
builtins.bool"builtins.bool *U
	index_colD
Union[builtins.str,None]
builtins.str"builtins.str
None *5
convert_missing
builtins.bool"builtins.bool *5
preserve_dtypes
builtins.bool"builtins.bool *ﬂ
columnsœ
3Union[builtins.list[pandas._typing.HashableT],None]ã
'builtins.list[pandas._typing.HashableT]Q
pandas._typing.HashableT"
typing.Hashable"typing.Hashable"typing.Hashable"builtins.list
None *8
order_categoricals
builtins.bool"builtins.bool *
	chunksize
None *J
iterator:
Literal[builtins.bool]	
builtins.bool"builtins.bool *Õ
compressionπ
≈TypeAlias[Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]]…
∫Union[None,Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],TypeAlias[builtins.dict[builtins.str,Any]]]
None7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.strß
*TypeAlias[builtins.dict[builtins.str,Any]]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict"pandas._typing.CompressionDict"!pandas._typing.CompressionOptions *Ü
storage_optionsÓ
6TypeAlias[Union[builtins.dict[builtins.str,Any],None]]í
+Union[builtins.dict[builtins.str,Any],None]W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict
None"pandas._typing.StorageOptions 0:typing.overloadX*â
__annotations__pandas.io.api.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict