
pyspark.sql.catalogÄ
CatalogMetadata#pyspark.sql.catalog.CatalogMetadata"builtins.tuple*—
_replace,pyspark.sql.catalog.CatalogMetadata._replace"¬
'pyspark.sql.catalog.CatalogMetadata._NTî
,Tuple[builtins.str,Union[builtins.str,None]]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None*Œ
_self¬
'pyspark.sql.catalog.CatalogMetadata._NTî
,Tuple[builtins.str,Union[builtins.str,None]]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None*(
name
builtins.str"builtins.str *W
descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
None *Ñ
__new__+pyspark.sql.catalog.CatalogMetadata.__new__"¬
'pyspark.sql.catalog.CatalogMetadata._NTî
,Tuple[builtins.str,Union[builtins.str,None]]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None*á
_cls¸
-Type[pyspark.sql.catalog.CatalogMetadata._NT]¬
'pyspark.sql.catalog.CatalogMetadata._NTî
,Tuple[builtins.str,Union[builtins.str,None]]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None"type*&
name
builtins.str"builtins.str*U
descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
None*‡
_asdict+pyspark.sql.catalog.CatalogMetadata._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Œ
_self¬
'pyspark.sql.catalog.CatalogMetadata._NTî
,Tuple[builtins.str,Union[builtins.str,None]]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None*˙
_make)pyspark.sql.catalog.CatalogMetadata._make"¬
'pyspark.sql.catalog.CatalogMetadata._NTî
,Tuple[builtins.str,Union[builtins.str,None]]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None*á
_cls¸
-Type[pyspark.sql.catalog.CatalogMetadata._NT]¬
'pyspark.sql.catalog.CatalogMetadata._NTî
,Tuple[builtins.str,Union[builtins.str,None]]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodprN
name(pyspark.sql.catalog.CatalogMetadata.name
builtins.str"builtins.strrÑ
description/pyspark.sql.catalog.CatalogMetadata.descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
NonerN
name(pyspark.sql.catalog.CatalogMetadata.name
builtins.str"builtins.strrÑ
description/pyspark.sql.catalog.CatalogMetadata.descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
Nonerò
_fields+pyspark.sql.catalog.CatalogMetadata._fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.strrô
_field_types0pyspark.sql.catalog.CatalogMetadata._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrü
_field_defaults3pyspark.sql.catalog.CatalogMetadata._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrT
_source+pyspark.sql.catalog.CatalogMetadata._source
builtins.str"builtins.strrü
__annotations__3pyspark.sql.catalog.CatalogMetadata.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictó'
Databasepyspark.sql.catalog.Database"builtins.tuple*÷
_replace%pyspark.sql.catalog.Database._replace"≈
 pyspark.sql.catalog.Database._NTû
RTuple[builtins.str,Union[builtins.str,None],Union[builtins.str,None],builtins.str]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str*—
_self≈
 pyspark.sql.catalog.Database._NTû
RTuple[builtins.str,Union[builtins.str,None],Union[builtins.str,None],builtins.str]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str*(
name
builtins.str"builtins.str *S
catalogD
Union[builtins.str,None]
builtins.str"builtins.str
None *W
descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
None */
locationUri
builtins.str"builtins.str *˛
__new__$pyspark.sql.catalog.Database.__new__"≈
 pyspark.sql.catalog.Database._NTû
RTuple[builtins.str,Union[builtins.str,None],Union[builtins.str,None],builtins.str]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str*É
_cls¯
&Type[pyspark.sql.catalog.Database._NT]≈
 pyspark.sql.catalog.Database._NTû
RTuple[builtins.str,Union[builtins.str,None],Union[builtins.str,None],builtins.str]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str"type*&
name
builtins.str"builtins.str*Q
catalogD
Union[builtins.str,None]
builtins.str"builtins.str
None*U
descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
None*-
locationUri
builtins.str"builtins.str*‹
_asdict$pyspark.sql.catalog.Database._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*—
_self≈
 pyspark.sql.catalog.Database._NTû
RTuple[builtins.str,Union[builtins.str,None],Union[builtins.str,None],builtins.str]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str*Ú
_make"pyspark.sql.catalog.Database._make"≈
 pyspark.sql.catalog.Database._NTû
RTuple[builtins.str,Union[builtins.str,None],Union[builtins.str,None],builtins.str]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str*É
_cls¯
&Type[pyspark.sql.catalog.Database._NT]≈
 pyspark.sql.catalog.Database._NTû
RTuple[builtins.str,Union[builtins.str,None],Union[builtins.str,None],builtins.str]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodprG
name!pyspark.sql.catalog.Database.name
builtins.str"builtins.strru
catalog$pyspark.sql.catalog.Database.catalogD
Union[builtins.str,None]
builtins.str"builtins.str
Noner}
description(pyspark.sql.catalog.Database.descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
NonerU
locationUri(pyspark.sql.catalog.Database.locationUri
builtins.str"builtins.strrG
name!pyspark.sql.catalog.Database.name
builtins.str"builtins.strru
catalog$pyspark.sql.catalog.Database.catalogD
Union[builtins.str,None]
builtins.str"builtins.str
Noner}
description(pyspark.sql.catalog.Database.descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
NonerU
locationUri(pyspark.sql.catalog.Database.locationUri
builtins.str"builtins.strrË
_fields$pyspark.sql.catalog.Database._fields∂
:Tuple[builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrí
_field_types)pyspark.sql.catalog.Database._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrò
_field_defaults,pyspark.sql.catalog.Database._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrM
_source$pyspark.sql.catalog.Database._source
builtins.str"builtins.strrò
__annotations__,pyspark.sql.catalog.Database.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictæ?
Tablepyspark.sql.catalog.Table"builtins.tuple*â
database"pyspark.sql.catalog.Table.database"D
Union[builtins.str,None]
builtins.str"builtins.str
None*Ñ
self˘
àTuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool0:property`* 
_replace"pyspark.sql.catalog.Table._replace"ù
pyspark.sql.catalog.Table._NT˘
àTuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool*©
_selfù
pyspark.sql.catalog.Table._NT˘
àTuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool*(
name
builtins.str"builtins.str *S
catalogD
Union[builtins.str,None]
builtins.str"builtins.str
None *ì
	namespaceÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *W
descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
None *-
	tableType
builtins.str"builtins.str *1
isTemporary
builtins.bool"builtins.bool *Î
__new__!pyspark.sql.catalog.Table.__new__"ù
pyspark.sql.catalog.Table._NT˘
àTuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool*ÿ
_clsÕ
#Type[pyspark.sql.catalog.Table._NT]ù
pyspark.sql.catalog.Table._NT˘
àTuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool"type*&
name
builtins.str"builtins.str*Q
catalogD
Union[builtins.str,None]
builtins.str"builtins.str
None*ë
	namespaceÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None*U
descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
None*+
	tableType
builtins.str"builtins.str*/
isTemporary
builtins.bool"builtins.bool*±
_asdict!pyspark.sql.catalog.Table._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*©
_selfù
pyspark.sql.catalog.Table._NT˘
àTuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool*ú

_makepyspark.sql.catalog.Table._make"ù
pyspark.sql.catalog.Table._NT˘
àTuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool*ÿ
_clsÕ
#Type[pyspark.sql.catalog.Table._NT]ù
pyspark.sql.catalog.Table._NT˘
àTuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodprD
namepyspark.sql.catalog.Table.name
builtins.str"builtins.strrr
catalog!pyspark.sql.catalog.Table.catalogD
Union[builtins.str,None]
builtins.str"builtins.str
Noner¥
	namespace#pyspark.sql.catalog.Table.namespaceÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
Nonerz
description%pyspark.sql.catalog.Table.descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
NonerN
	tableType#pyspark.sql.catalog.Table.tableType
builtins.str"builtins.strrT
isTemporary%pyspark.sql.catalog.Table.isTemporary
builtins.bool"builtins.boolrD
namepyspark.sql.catalog.Table.name
builtins.str"builtins.strrr
catalog!pyspark.sql.catalog.Table.catalogD
Union[builtins.str,None]
builtins.str"builtins.str
Noner¥
	namespace#pyspark.sql.catalog.Table.namespaceÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
Nonerz
description%pyspark.sql.catalog.Table.descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
NonerN
	tableType#pyspark.sql.catalog.Table.tableType
builtins.str"builtins.strrT
isTemporary%pyspark.sql.catalog.Table.isTemporary
builtins.bool"builtins.boolrª
_fields!pyspark.sql.catalog.Table._fieldså
TTuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrè
_field_types&pyspark.sql.catalog.Table._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrï
_field_defaults)pyspark.sql.catalog.Table._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrJ
_source!pyspark.sql.catalog.Table._source
builtins.str"builtins.strrï
__annotations__)pyspark.sql.catalog.Table.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict–,
Columnpyspark.sql.catalog.Column"builtins.tuple*·
_replace#pyspark.sql.catalog.Column._replace"Ó
pyspark.sql.catalog.Column._NT…
cTuple[builtins.str,Union[builtins.str,None],builtins.str,builtins.bool,builtins.bool,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool
builtins.bool"builtins.bool
builtins.bool"builtins.bool*˙
_selfÓ
pyspark.sql.catalog.Column._NT…
cTuple[builtins.str,Union[builtins.str,None],builtins.str,builtins.bool,builtins.bool,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool
builtins.bool"builtins.bool
builtins.bool"builtins.bool*(
name
builtins.str"builtins.str *W
descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
None *,
dataType
builtins.str"builtins.str *.
nullable
builtins.bool"builtins.bool *1
isPartition
builtins.bool"builtins.bool *.
isBucket
builtins.bool"builtins.bool *É	
__new__"pyspark.sql.catalog.Column.__new__"Ó
pyspark.sql.catalog.Column._NT…
cTuple[builtins.str,Union[builtins.str,None],builtins.str,builtins.bool,builtins.bool,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool
builtins.bool"builtins.bool
builtins.bool"builtins.bool*™
_clsü
$Type[pyspark.sql.catalog.Column._NT]Ó
pyspark.sql.catalog.Column._NT…
cTuple[builtins.str,Union[builtins.str,None],builtins.str,builtins.bool,builtins.bool,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool
builtins.bool"builtins.bool
builtins.bool"builtins.bool"type*&
name
builtins.str"builtins.str*U
descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
None**
dataType
builtins.str"builtins.str*,
nullable
builtins.bool"builtins.bool*/
isPartition
builtins.bool"builtins.bool*,
isBucket
builtins.bool"builtins.bool*É
_asdict"pyspark.sql.catalog.Column._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*˙
_selfÓ
pyspark.sql.catalog.Column._NT…
cTuple[builtins.str,Union[builtins.str,None],builtins.str,builtins.bool,builtins.bool,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool
builtins.bool"builtins.bool
builtins.bool"builtins.bool*¿
_make pyspark.sql.catalog.Column._make"Ó
pyspark.sql.catalog.Column._NT…
cTuple[builtins.str,Union[builtins.str,None],builtins.str,builtins.bool,builtins.bool,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool
builtins.bool"builtins.bool
builtins.bool"builtins.bool*™
_clsü
$Type[pyspark.sql.catalog.Column._NT]Ó
pyspark.sql.catalog.Column._NT…
cTuple[builtins.str,Union[builtins.str,None],builtins.str,builtins.bool,builtins.bool,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool
builtins.bool"builtins.bool
builtins.bool"builtins.bool"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodprE
namepyspark.sql.catalog.Column.name
builtins.str"builtins.strr{
description&pyspark.sql.catalog.Column.descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
NonerM
dataType#pyspark.sql.catalog.Column.dataType
builtins.str"builtins.strrO
nullable#pyspark.sql.catalog.Column.nullable
builtins.bool"builtins.boolrU
isPartition&pyspark.sql.catalog.Column.isPartition
builtins.bool"builtins.boolrO
isBucket#pyspark.sql.catalog.Column.isBucket
builtins.bool"builtins.boolrE
namepyspark.sql.catalog.Column.name
builtins.str"builtins.strr{
description&pyspark.sql.catalog.Column.descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
NonerM
dataType#pyspark.sql.catalog.Column.dataType
builtins.str"builtins.strrO
nullable#pyspark.sql.catalog.Column.nullable
builtins.bool"builtins.boolrU
isPartition&pyspark.sql.catalog.Column.isPartition
builtins.bool"builtins.boolrO
isBucket#pyspark.sql.catalog.Column.isBucket
builtins.bool"builtins.boolrº
_fields"pyspark.sql.catalog.Column._fieldså
TTuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrê
_field_types'pyspark.sql.catalog.Column._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrñ
_field_defaults*pyspark.sql.catalog.Column._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrK
_source"pyspark.sql.catalog.Column._source
builtins.str"builtins.strrñ
__annotations__*pyspark.sql.catalog.Column.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictí;
Functionpyspark.sql.catalog.Function"builtins.tuple*”
_replace%pyspark.sql.catalog.Function._replace"†
 pyspark.sql.catalog.Function._NT˘
àTuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool*¨
_self†
 pyspark.sql.catalog.Function._NT˘
àTuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool*(
name
builtins.str"builtins.str *S
catalogD
Union[builtins.str,None]
builtins.str"builtins.str
None *ì
	namespaceÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *W
descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
None *-
	className
builtins.str"builtins.str *1
isTemporary
builtins.bool"builtins.bool *˜
__new__$pyspark.sql.catalog.Function.__new__"†
 pyspark.sql.catalog.Function._NT˘
àTuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool*ﬁ
_cls”
&Type[pyspark.sql.catalog.Function._NT]†
 pyspark.sql.catalog.Function._NT˘
àTuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool"type*&
name
builtins.str"builtins.str*Q
catalogD
Union[builtins.str,None]
builtins.str"builtins.str
None*ë
	namespaceÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None*U
descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
None*+
	className
builtins.str"builtins.str*/
isTemporary
builtins.bool"builtins.bool*∑
_asdict$pyspark.sql.catalog.Function._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*¨
_self†
 pyspark.sql.catalog.Function._NT˘
àTuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool*®

_make"pyspark.sql.catalog.Function._make"†
 pyspark.sql.catalog.Function._NT˘
àTuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool*ﬁ
_cls”
&Type[pyspark.sql.catalog.Function._NT]†
 pyspark.sql.catalog.Function._NT˘
àTuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodprG
name!pyspark.sql.catalog.Function.name
builtins.str"builtins.strru
catalog$pyspark.sql.catalog.Function.catalogD
Union[builtins.str,None]
builtins.str"builtins.str
Noner∑
	namespace&pyspark.sql.catalog.Function.namespaceÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
Noner}
description(pyspark.sql.catalog.Function.descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
NonerQ
	className&pyspark.sql.catalog.Function.className
builtins.str"builtins.strrW
isTemporary(pyspark.sql.catalog.Function.isTemporary
builtins.bool"builtins.boolrG
name!pyspark.sql.catalog.Function.name
builtins.str"builtins.strru
catalog$pyspark.sql.catalog.Function.catalogD
Union[builtins.str,None]
builtins.str"builtins.str
Noner∑
	namespace&pyspark.sql.catalog.Function.namespaceÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
Noner}
description(pyspark.sql.catalog.Function.descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
NonerQ
	className&pyspark.sql.catalog.Function.className
builtins.str"builtins.strrW
isTemporary(pyspark.sql.catalog.Function.isTemporary
builtins.bool"builtins.boolræ
_fields$pyspark.sql.catalog.Function._fieldså
TTuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strrí
_field_types)pyspark.sql.catalog.Function._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrò
_field_defaults,pyspark.sql.catalog.Function._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictrM
_source$pyspark.sql.catalog.Function._source
builtins.str"builtins.strrò
__annotations__,pyspark.sql.catalog.Function.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict¶c
Catalogpyspark.sql.catalog.Catalog"builtins.object*ÿ
__init__$pyspark.sql.catalog.Catalog.__init__"
None*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*V
sparkSessionD
 pyspark.sql.session.SparkSession" pyspark.sql.session.SparkSession*†
currentCatalog*pyspark.sql.catalog.Catalog.currentCatalog"
builtins.str"builtins.str*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*¡
setCurrentCatalog-pyspark.sql.catalog.Catalog.setCurrentCatalog"
None*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*-
catalogName
builtins.str"builtins.str*ß
listCatalogs(pyspark.sql.catalog.Catalog.listCatalogs"—
Fbuiltins.list[TypeAlias[Tuple[builtins.str,Union[builtins.str,None]]]]˜
7TypeAlias[Tuple[builtins.str,Union[builtins.str,None]]]î
,Tuple[builtins.str,Union[builtins.str,None]]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None"#pyspark.sql.catalog.CatalogMetadata"builtins.list*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*S
patternD
Union[builtins.str,None]
builtins.str"builtins.str
None *¢
currentDatabase+pyspark.sql.catalog.Catalog.currentDatabase"
builtins.str"builtins.str*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*æ
setCurrentDatabase.pyspark.sql.catalog.Catalog.setCurrentDatabase"
None*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*(
dbName
builtins.str"builtins.str*¯
listDatabases)pyspark.sql.catalog.Catalog.listDatabases"†
lbuiltins.list[TypeAlias[Tuple[builtins.str,Union[builtins.str,None],Union[builtins.str,None],builtins.str]]]†
]TypeAlias[Tuple[builtins.str,Union[builtins.str,None],Union[builtins.str,None],builtins.str]]û
RTuple[builtins.str,Union[builtins.str,None],Union[builtins.str,None],builtins.str]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str"pyspark.sql.catalog.Database"builtins.list*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*S
patternD
Union[builtins.str,None]
builtins.str"builtins.str
None *…
getDatabase'pyspark.sql.catalog.Catalog.getDatabase"†
]TypeAlias[Tuple[builtins.str,Union[builtins.str,None],Union[builtins.str,None],builtins.str]]û
RTuple[builtins.str,Union[builtins.str,None],Union[builtins.str,None],builtins.str]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str"pyspark.sql.catalog.Database*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*(
dbName
builtins.str"builtins.str*Ã
databaseExists*pyspark.sql.catalog.Catalog.databaseExists"
builtins.bool"builtins.bool*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*(
dbName
builtins.str"builtins.str*å	

listTables&pyspark.sql.catalog.Catalog.listTables"Ê
¢builtins.list[TypeAlias[Tuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]]]Ø
ìTypeAlias[Tuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]]˘
àTuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool"pyspark.sql.catalog.Table"builtins.list*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*R
dbNameD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
patternD
Union[builtins.str,None]
builtins.str"builtins.str
None *’
getTable$pyspark.sql.catalog.Catalog.getTable"Ø
ìTypeAlias[Tuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]]˘
àTuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool"pyspark.sql.catalog.Table*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*+
	tableName
builtins.str"builtins.str*ï	
listFunctions)pyspark.sql.catalog.Catalog.listFunctions"È
¢builtins.list[TypeAlias[Tuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]]]≤
ìTypeAlias[Tuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]]˘
àTuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool"pyspark.sql.catalog.Function"builtins.list*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*R
dbNameD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
patternD
Union[builtins.str,None]
builtins.str"builtins.str
None *¶
functionExists*pyspark.sql.catalog.Catalog.functionExists"
builtins.bool"builtins.bool*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*.
functionName
builtins.str"builtins.str*R
dbNameD
Union[builtins.str,None]
builtins.str"builtins.str
None *·
getFunction'pyspark.sql.catalog.Catalog.getFunction"≤
ìTypeAlias[Tuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]]˘
àTuple[builtins.str,Union[builtins.str,None],Union[builtins.list[builtins.str],None],Union[builtins.str,None],builtins.str,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
NoneÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool"pyspark.sql.catalog.Function*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*.
functionName
builtins.str"builtins.str*Î
listColumns'pyspark.sql.catalog.Catalog.listColumns"Î
}builtins.list[TypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str,builtins.bool,builtins.bool,builtins.bool]]]⁄
nTypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str,builtins.bool,builtins.bool,builtins.bool]]…
cTuple[builtins.str,Union[builtins.str,None],builtins.str,builtins.bool,builtins.bool,builtins.bool]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str
builtins.bool"builtins.bool
builtins.bool"builtins.bool
builtins.bool"builtins.bool"pyspark.sql.catalog.Column"builtins.list*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*+
	tableName
builtins.str"builtins.str*R
dbNameD
Union[builtins.str,None]
builtins.str"builtins.str
None *ù
tableExists'pyspark.sql.catalog.Catalog.tableExists"
builtins.bool"builtins.bool*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*+
	tableName
builtins.str"builtins.str*R
dbNameD
Union[builtins.str,None]
builtins.str"builtins.str
None *”
createExternalTable/pyspark.sql.catalog.Catalog.createExternalTable"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*+
	tableName
builtins.str"builtins.str*P
pathD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
sourceD
Union[builtins.str,None]
builtins.str"builtins.str
None *Ç
schemat
(Union[pyspark.sql.types.StructType,None]<
pyspark.sql.types.StructType"pyspark.sql.types.StructType
None *)
options
builtins.str"builtins.str*ú
createTable'pyspark.sql.catalog.Catalog.createTable"B
pyspark.sql.dataframe.DataFrame"pyspark.sql.dataframe.DataFrame*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*+
	tableName
builtins.str"builtins.str*P
pathD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
sourceD
Union[builtins.str,None]
builtins.str"builtins.str
None *Ç
schemat
(Union[pyspark.sql.types.StructType,None]<
pyspark.sql.types.StructType"pyspark.sql.types.StructType
None *W
descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
None *)
options
builtins.str"builtins.str* 
dropTempView(pyspark.sql.catalog.Catalog.dropTempView"
builtins.bool"builtins.bool*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog**
viewName
builtins.str"builtins.str*÷
dropGlobalTempView.pyspark.sql.catalog.Catalog.dropGlobalTempView"
builtins.bool"builtins.bool*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog**
viewName
builtins.str"builtins.str*·
registerFunction,pyspark.sql.catalog.Catalog.registerFunction"Z
+pyspark.sql._typing.UserDefinedFunctionLike"+pyspark.sql._typing.UserDefinedFunctionLike*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*&
name
builtins.str"builtins.str*R
fK
CallableType[builtins.function]&
builtins.function"builtins.function*Ä

returnTypen
&Union[pyspark.sql.types.DataType,None]8
pyspark.sql.types.DataType"pyspark.sql.types.DataType
None *√
isCached$pyspark.sql.catalog.Catalog.isCached"
builtins.bool"builtins.bool*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*+
	tableName
builtins.str"builtins.str*Ã

cacheTable&pyspark.sql.catalog.Catalog.cacheTable"
None*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*+
	tableName
builtins.str"builtins.str*ò
storageLevelÉ
-Union[pyspark.storagelevel.StorageLevel,None]F
!pyspark.storagelevel.StorageLevel"!pyspark.storagelevel.StorageLevel
None *µ
uncacheTable(pyspark.sql.catalog.Catalog.uncacheTable"
None*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*+
	tableName
builtins.str"builtins.str*Ñ

clearCache&pyspark.sql.catalog.Catalog.clearCache"
None*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*µ
refreshTable(pyspark.sql.catalog.Catalog.refreshTable"
None*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*+
	tableName
builtins.str"builtins.str*ø
recoverPartitions-pyspark.sql.catalog.Catalog.recoverPartitions"
None*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*+
	tableName
builtins.str"builtins.str*≤
refreshByPath)pyspark.sql.catalog.Catalog.refreshByPath"
None*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.Catalog*&
path
builtins.str"builtins.str*|
_reset"pyspark.sql.catalog.Catalog._reset"
None*D
self:
pyspark.sql.catalog.Catalog"pyspark.sql.catalog.CatalogrÄ
_sparkSession)pyspark.sql.catalog.Catalog._sparkSessionD
 pyspark.sql.session.SparkSession" pyspark.sql.session.SparkSessionrE
_jsparkSession*pyspark.sql.catalog.Catalog._jsparkSession
Anyrd
_scpyspark.sql.catalog.Catalog._sc<
pyspark.context.SparkContext"pyspark.context.SparkContextr;
	_jcatalog%pyspark.sql.catalog.Catalog._jcatalog
Any,
_testpyspark.sql.catalog._test"
None*è
__annotations__#pyspark.sql.catalog.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict